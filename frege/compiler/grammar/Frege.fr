--begin top
{- 

    Copyright Â© 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. 
        
        Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

     -}

{--
    This is the grammar for the Frege language.
-}
module frege.compiler.grammar.Frege where

    {-
       !!! DO NOT CHANGE FILE Frege.fr, IT HAS BEEN CREATED AUTOMATICALLY !!!
    -}

import frege.Prelude hiding(<+>, break)

import frege.control.monad.State(State)

import Data.TreeMap(insert)
import Data.List as DL(elemBy)

import  Compiler.enums.Flags 
import  Compiler.enums.TokenID(TokenID)
import  Compiler.enums.Visibility
import  Compiler.enums.Literals
import  Compiler.enums.CaseKind

import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.Kinds
import  Compiler.types.SNames
import  Compiler.types.Packs(magicPack)
import  Compiler.types.ImportDetails
import  Compiler.types.Types
import  Compiler.types.SourceDefinitions
import  Compiler.types.ConstructorField
import  Compiler.types.Global as G

import  Compiler.common.Mangle
import  Compiler.common.Errors as E()
import  Compiler.common.Resolve as R(enclosed)

import Lib.PP (group, break, msgdoc)
import frege.compiler.common.Tuples as T(tuple)
import frege.compiler.common.Desugar

import frege.compiler.grammar.Lexer (substQQ)


-- this will speed up the parser by a factor of 70, cause yyprods comes out monotyped.
private yyprod1 :: [(Int, YYsi ParseResult Token)]
    -> StG (YYsi ParseResult Token, [(Int, YYsi ParseResult Token)])


{-
 The following definitions are not strictly necessary, but they help
 to avoid truly crazy type signatures for parse stack items and
 considerably speed up type checking in giving the result types of
 certain nonterminal reduction rules.
 Note that you cannot lie about the type of nonterminal reduction rules.
 Note that types like "Maybe x" on the RHS must be given like so: (Maybe x)
 -}
--end top
type YYM = State;
-- data YYAction = YYShift Int | YYRed Int | YYErr | YYAccept;
!yyAccept = maxBound :: Int;
!yyErr    = minBound :: Int;
{-- positive numbers are *shift* actions, or *accept*
    negative ones are *reduce* actions, or *error* --}
data YYAction = YYAction Int;
data YYsi res tok  = 
	  YYStart () | YYAcc res | YYTok tok
	| YYNTaeq Token
	| YYNTalias Token
	| YYNTannoitem Token
	| YYNTannoitems [Token]
	| YYNTannotation [Def]
	| YYNTapats [Exp]
	| YYNTappex Exp
	| YYNTbinex Exp
	| YYNTboundvar String
	| YYNTboundvars [String]
	| YYNTcalt CAltS
	| YYNTcalts [CAltS]
	| YYNTccontext [ContextS]
	| YYNTclassdef Def
	| YYNTcommata Int
	| YYNTconfld [ConField SName]
	| YYNTconflds [ConField SName]
	| YYNTcontypes [ConField SName]
	| YYNTdalt DConS
	| YYNTdalts [DConS]
	| YYNTdatadef Def
	| YYNTdatainit Def
	| YYNTdefinition [Def]
	| YYNTdefinitions [Def]
	| YYNTderivedef Def
	| YYNTdocs String
	| YYNTdocumentation Def
	| YYNTdodefs [Qual]
	| YYNTdplocaldef [Def]
	| YYNTdvars [TauS]
	| YYNTelsex Token
	| YYNTexpr Exp
	| YYNTexprSC [Exp]
	| YYNTexprSS [Exp]
	| YYNTfield (String, Exp)
	| YYNTfields [(String, Exp)]
	| YYNTfixity Def
	| YYNTfldid (Position, String, Visibility, Bool)
	| YYNTfldids [(Position, String, Visibility, Bool)]
	| YYNTforall SigmaS
	| YYNTfundef [Def]
	| YYNTfunhead (Exp, [Pat])
	| YYNTgetfield (Token, Bool,Exp)
	| YYNTgetfields [(Token,Bool,Exp)]
	| YYNTgqual Qual
	| YYNTgquals [Qual]
	| YYNTguard Guard
	| YYNTguards [Guard]
	| YYNTicontext [ContextS]
	| YYNTimport Def
	| YYNTimportitem ImportItem
	| YYNTimportliste ImportList
	| YYNTimportspec ImportItem
	| YYNTimportspecs [ImportItem]
	| YYNTimpurenativedef Def
	| YYNTinfix Def
	| YYNTinstdef Def
	| YYNTinsthead Def
	| YYNTinterfaces [TauS]
	| YYNTjtoken Token
	| YYNTjtokens [Token]
	| YYNTkind Kind
	| YYNTlambda Exp
	| YYNTlambdabody Exp
	| YYNTlcqual Qual
	| YYNTlcquals [Qual]
	| YYNTletdef [Def]
	| YYNTletdefs [Def]
	| YYNTliteral Exp
	| YYNTlocaldef [Def]
	| YYNTlocaldefs [Def]
	| YYNTmbdot Token
	| YYNTmemspec ImportItem
	| YYNTmemspecs [ImportItem]
	| YYNTmoduledefinition Def
	| YYNTnativedef Def
	| YYNTnativename String
	| YYNTnativepur (Bool, Bool)
	| YYNTnativestart Token
	| YYNToperator Token
	| YYNToperators [String]
	| YYNTopstring String
	| YYNTpackage ParseResult
	| YYNTpackageclause (String, Maybe String, Position)
	| YYNTpackagename (String, Position)
	| YYNTpackagename1 (String, Position)
	| YYNTpattern Pat
	| YYNTplainfldid (Position, String, Visibility, Bool)
	| YYNTplocaldef [Def]
	| YYNTprimary Exp
	| YYNTpublicdefinition [Def]
	| YYNTqconid SName
	| YYNTqualifiers (Token -> SName)
	| YYNTqvarid SName
	| YYNTqvarids [SName]
	| YYNTqvarop SName
	| YYNTrho RhoS
	| YYNTrhofun RhoS
	| YYNTscontext ContextS
	| YYNTscontexts [ContextS]
	| YYNTscript ParseResult
	| YYNTsemicoli Int
	| YYNTsicontext ContextS
	| YYNTsicontexts [ContextS]
	| YYNTsigex SigExs
	| YYNTsigexs [SigExs]
	| YYNTsigma SigmaS
	| YYNTsimpledalt DConS
	| YYNTsimplekind Kind
	| YYNTsimpletype TauS
	| YYNTsimpletypes [TauS]
	| YYNTstrictdalt DConS
	| YYNTstrictfldid (Position, String, Visibility, Bool)
	| YYNTtapp TauS
	| YYNTtau TauS
	| YYNTtauSB [TauS]
	| YYNTtauSC [TauS]
	| YYNTterm Exp
	| YYNTthenx Token
	| YYNTtopdefinition [Def]
	| YYNTtopex Exp
	| YYNTtyname SName
	| YYNTtypeclause (Maybe TauS)
	| YYNTtypedef Def
	| YYNTtyvar TauS
	| YYNTunex Exp
	| YYNTunop Token
	| YYNTvarid Token
	| YYNTvaridkw Token
	| YYNTvarop Token
	| YYNTvisdalt DConS
	| YYNTvisibledefinition [Def]
	| YYNTwheredef [Def]
	| YYNTwherelet [Def]
	| YYNTwheretokens [Token]
	| YYNTword String
	| YYNTwords [String];
showsi (YYStart  _) = "%start ";
	showsi (YYAcc _) = "%accept ";
	showsi (YYTok x) = yyshow x;
	showsi (YYNTaeq _) = "<aeq>";
	showsi (YYNTalias _) = "<alias>";
	showsi (YYNTannoitem _) = "<annoitem>";
	showsi (YYNTannoitems _) = "<annoitems>";
	showsi (YYNTannotation _) = "<annotation>";
	showsi (YYNTapats _) = "<apats>";
	showsi (YYNTappex _) = "<appex>";
	showsi (YYNTbinex _) = "<binex>";
	showsi (YYNTboundvar _) = "<boundvar>";
	showsi (YYNTboundvars _) = "<boundvars>";
	showsi (YYNTcalt _) = "<calt>";
	showsi (YYNTcalts _) = "<calts>";
	showsi (YYNTccontext _) = "<ccontext>";
	showsi (YYNTclassdef _) = "<classdef>";
	showsi (YYNTcommata _) = "<commata>";
	showsi (YYNTconfld _) = "<confld>";
	showsi (YYNTconflds _) = "<conflds>";
	showsi (YYNTcontypes _) = "<contypes>";
	showsi (YYNTdalt _) = "<dalt>";
	showsi (YYNTdalts _) = "<dalts>";
	showsi (YYNTdatadef _) = "<datadef>";
	showsi (YYNTdatainit _) = "<datainit>";
	showsi (YYNTdefinition _) = "<definition>";
	showsi (YYNTdefinitions _) = "<definitions>";
	showsi (YYNTderivedef _) = "<derivedef>";
	showsi (YYNTdocs _) = "<docs>";
	showsi (YYNTdocumentation _) = "<documentation>";
	showsi (YYNTdodefs _) = "<dodefs>";
	showsi (YYNTdplocaldef _) = "<dplocaldef>";
	showsi (YYNTdvars _) = "<dvars>";
	showsi (YYNTelsex _) = "<elsex>";
	showsi (YYNTexpr _) = "<expr>";
	showsi (YYNTexprSC _) = "<exprSC>";
	showsi (YYNTexprSS _) = "<exprSS>";
	showsi (YYNTfield _) = "<field>";
	showsi (YYNTfields _) = "<fields>";
	showsi (YYNTfixity _) = "<fixity>";
	showsi (YYNTfldid _) = "<fldid>";
	showsi (YYNTfldids _) = "<fldids>";
	showsi (YYNTforall _) = "<forall>";
	showsi (YYNTfundef _) = "<fundef>";
	showsi (YYNTfunhead _) = "<funhead>";
	showsi (YYNTgetfield _) = "<getfield>";
	showsi (YYNTgetfields _) = "<getfields>";
	showsi (YYNTgqual _) = "<gqual>";
	showsi (YYNTgquals _) = "<gquals>";
	showsi (YYNTguard _) = "<guard>";
	showsi (YYNTguards _) = "<guards>";
	showsi (YYNTicontext _) = "<icontext>";
	showsi (YYNTimport _) = "<import>";
	showsi (YYNTimportitem _) = "<importitem>";
	showsi (YYNTimportliste _) = "<importliste>";
	showsi (YYNTimportspec _) = "<importspec>";
	showsi (YYNTimportspecs _) = "<importspecs>";
	showsi (YYNTimpurenativedef _) = "<impurenativedef>";
	showsi (YYNTinfix _) = "<infix>";
	showsi (YYNTinstdef _) = "<instdef>";
	showsi (YYNTinsthead _) = "<insthead>";
	showsi (YYNTinterfaces _) = "<interfaces>";
	showsi (YYNTjtoken _) = "<jtoken>";
	showsi (YYNTjtokens _) = "<jtokens>";
	showsi (YYNTkind _) = "<kind>";
	showsi (YYNTlambda _) = "<lambda>";
	showsi (YYNTlambdabody _) = "<lambdabody>";
	showsi (YYNTlcqual _) = "<lcqual>";
	showsi (YYNTlcquals _) = "<lcquals>";
	showsi (YYNTletdef _) = "<letdef>";
	showsi (YYNTletdefs _) = "<letdefs>";
	showsi (YYNTliteral _) = "<literal>";
	showsi (YYNTlocaldef _) = "<localdef>";
	showsi (YYNTlocaldefs _) = "<localdefs>";
	showsi (YYNTmbdot _) = "<mbdot>";
	showsi (YYNTmemspec _) = "<memspec>";
	showsi (YYNTmemspecs _) = "<memspecs>";
	showsi (YYNTmoduledefinition _) = "<moduledefinition>";
	showsi (YYNTnativedef _) = "<nativedef>";
	showsi (YYNTnativename _) = "<nativename>";
	showsi (YYNTnativepur _) = "<nativepur>";
	showsi (YYNTnativestart _) = "<nativestart>";
	showsi (YYNToperator _) = "<operator>";
	showsi (YYNToperators _) = "<operators>";
	showsi (YYNTopstring _) = "<opstring>";
	showsi (YYNTpackage _) = "<package>";
	showsi (YYNTpackageclause _) = "<packageclause>";
	showsi (YYNTpackagename _) = "<packagename>";
	showsi (YYNTpackagename1 _) = "<packagename1>";
	showsi (YYNTpattern _) = "<pattern>";
	showsi (YYNTplainfldid _) = "<plainfldid>";
	showsi (YYNTplocaldef _) = "<plocaldef>";
	showsi (YYNTprimary _) = "<primary>";
	showsi (YYNTpublicdefinition _) = "<publicdefinition>";
	showsi (YYNTqconid _) = "<qconid>";
	showsi (YYNTqualifiers _) = "<qualifiers>";
	showsi (YYNTqvarid _) = "<qvarid>";
	showsi (YYNTqvarids _) = "<qvarids>";
	showsi (YYNTqvarop _) = "<qvarop>";
	showsi (YYNTrho _) = "<rho>";
	showsi (YYNTrhofun _) = "<rhofun>";
	showsi (YYNTscontext _) = "<scontext>";
	showsi (YYNTscontexts _) = "<scontexts>";
	showsi (YYNTscript _) = "<script>";
	showsi (YYNTsemicoli _) = "<semicoli>";
	showsi (YYNTsicontext _) = "<sicontext>";
	showsi (YYNTsicontexts _) = "<sicontexts>";
	showsi (YYNTsigex _) = "<sigex>";
	showsi (YYNTsigexs _) = "<sigexs>";
	showsi (YYNTsigma _) = "<sigma>";
	showsi (YYNTsimpledalt _) = "<simpledalt>";
	showsi (YYNTsimplekind _) = "<simplekind>";
	showsi (YYNTsimpletype _) = "<simpletype>";
	showsi (YYNTsimpletypes _) = "<simpletypes>";
	showsi (YYNTstrictdalt _) = "<strictdalt>";
	showsi (YYNTstrictfldid _) = "<strictfldid>";
	showsi (YYNTtapp _) = "<tapp>";
	showsi (YYNTtau _) = "<tau>";
	showsi (YYNTtauSB _) = "<tauSB>";
	showsi (YYNTtauSC _) = "<tauSC>";
	showsi (YYNTterm _) = "<term>";
	showsi (YYNTthenx _) = "<thenx>";
	showsi (YYNTtopdefinition _) = "<topdefinition>";
	showsi (YYNTtopex _) = "<topex>";
	showsi (YYNTtyname _) = "<tyname>";
	showsi (YYNTtypeclause _) = "<typeclause>";
	showsi (YYNTtypedef _) = "<typedef>";
	showsi (YYNTtyvar _) = "<tyvar>";
	showsi (YYNTunex _) = "<unex>";
	showsi (YYNTunop _) = "<unop>";
	showsi (YYNTvarid _) = "<varid>";
	showsi (YYNTvaridkw _) = "<varidkw>";
	showsi (YYNTvarop _) = "<varop>";
	showsi (YYNTvisdalt _) = "<visdalt>";
	showsi (YYNTvisibledefinition _) = "<visibledefinition>";
	showsi (YYNTwheredef _) = "<wheredef>";
	showsi (YYNTwherelet _) = "<wherelet>";
	showsi (YYNTwheretokens _) = "<wheretokens>";
	showsi (YYNTword _) = "<word>";
	showsi (YYNTwords _) = "<words>";
showst st = joined " " (map (\(_,si) -> showsi si) (reverse st));
!yydebug = (maybe "" id (System.getenv "YYDEBUG")).toLowerCase ~ Â´(1|yes|true|on)Â´;
yytrace s = (if yydebug then trace s else false) `seq` ();
yydbgAccept  s t = yytrace ("in state " ++ show s ++ " accept  " ++ show t ++  "\n" );
private yyaction0 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    PACKAGE -> YYAction 2;
    PROTECTED -> YYAction 3;
    INTERPRET -> YYAction 4;
    _ -> (YYAction yyErr);
  };
private yyaction1 t =   case yychar t of {
  ';' -> YYAction 8;
  '?' -> YYAction (-14);
  '!' -> YYAction (-14);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-14);
    PACKAGE -> YYAction (-14);
    PRIVATE -> YYAction (-14);
    PROTECTED -> YYAction (-14);
    PUBLIC -> YYAction (-14);
    _ -> (YYAction yyErr);
  };
};
private yyaction2 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction3 t =   case yytoken t of {
    PACKAGE -> YYAction 23;
    _ -> (YYAction yyErr);
  };
private yyaction4 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
yyaccept  (yyvals@((5, (YYNTpackage yy1)):_), yytoks) = yydbgAccept 5 (showst (take 1 yyvals)) `seq`
	([(5, YYAcc yy1)], yytoks);
yyaccept (yyvs,_) = yybadprod 5 yyvs;
private yyaction5 t = (YYAction yyErr);
private yyaction6 t =   case yychar t of {
  ';' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 62;
    WHERE -> YYAction 63;
    _ -> (YYAction yyErr);
  };
};
private yyaction7 t =   case yytoken t of {
    PACKAGE -> YYAction 67;
    PROTECTED -> YYAction 68;
    _ -> (YYAction yyErr);
  };
private yyaction8 t =   case yychar t of {
  ';' -> YYAction 8;
  '-' -> YYAction (-25);
  '}' -> YYAction (-25);
  '(' -> YYAction (-25);
  '[' -> YYAction (-25);
  '?' -> YYAction (-25);
  '!' -> YYAction (-25);
  '\\' -> YYAction (-25);
  '_' -> YYAction (-25);
  _ ->   case yytoken t of {
    VARID -> YYAction (-25);
    CONID -> YYAction (-25);
    QUALIFIER -> YYAction (-25);
    DOCUMENTATION -> YYAction (-25);
    IMPORT -> YYAction (-25);
    INFIX -> YYAction (-25);
    INFIXR -> YYAction (-25);
    INFIXL -> YYAction (-25);
    NATIVE -> YYAction (-25);
    DATA -> YYAction (-25);
    CLASS -> YYAction (-25);
    INSTANCE -> YYAction (-25);
    ABSTRACT -> YYAction (-25);
    TYPE -> YYAction (-25);
    TRUE -> YYAction (-25);
    FALSE -> YYAction (-25);
    IF -> YYAction (-25);
    CASE -> YYAction (-25);
    DERIVE -> YYAction (-25);
    LET -> YYAction (-25);
    DO -> YYAction (-25);
    PRIVATE -> YYAction (-25);
    PROTECTED -> YYAction (-25);
    PUBLIC -> YYAction (-25);
    PURE -> YYAction (-25);
    INTCONST -> YYAction (-25);
    STRCONST -> YYAction (-25);
    LONGCONST -> YYAction (-25);
    FLTCONST -> YYAction (-25);
    DBLCONST -> YYAction (-25);
    CHRCONST -> YYAction (-25);
    REGEXP -> YYAction (-25);
    BIGCONST -> YYAction (-25);
    _ -> (YYAction yyErr);
  };
};
private yyaction9 t = YYAction (-15);
private yyaction10 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    _ -> (YYAction yyErr);
  };
private yyaction11 t = YYAction (-172);
private yyaction12 t = YYAction (-10);
private yyaction13 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction14 t = YYAction (-177);
private yyaction15 t = YYAction (-178);
private yyaction16 t = YYAction (-175);
private yyaction17 t = YYAction (-173);
private yyaction18 t = YYAction (-174);
private yyaction19 t = YYAction (-176);
private yyaction20 t = YYAction (-13);
private yyaction21 t =   case yychar t of {
  '.' -> YYAction 72;
  _ -> (YYAction yyErr);
};
private yyaction22 t = YYAction (-18);
private yyaction23 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction24 t = YYAction (-183);
private yyaction25 t = YYAction (-186);
private yyaction26 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '{' -> YYAction (-397);
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 76;
    _ -> (YYAction yyErr);
  };
};
private yyaction27 t = YYAction (-337);
private yyaction28 t = YYAction (-338);
private yyaction29 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction30 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction31 t =   case yychar t of {
  '{' -> YYAction 81;
  _ -> (YYAction yyErr);
};
private yyaction32 t =   case yychar t of {
  '{' -> YYAction 82;
  _ -> (YYAction yyErr);
};
private yyaction33 t = YYAction (-341);
private yyaction34 t = YYAction (-340);
private yyaction35 t = YYAction (-343);
private yyaction36 t = YYAction (-344);
private yyaction37 t = YYAction (-345);
private yyaction38 t = YYAction (-339);
private yyaction39 t = YYAction (-346);
private yyaction40 t = YYAction (-342);
private yyaction41 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction42 t =   case yychar t of {
  '-' -> YYAction 85;
  '(' -> YYAction 42;
  ')' -> YYAction 86;
  ',' -> YYAction 87;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction43 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  ']' -> YYAction 93;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction44 t = YYAction (-195);
private yyaction45 t = YYAction (-194);
private yyaction46 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction47 t = YYAction (-415);
private yyaction48 t = YYAction (-3);
private yyaction49 t = YYAction (-4);
private yyaction50 t = YYAction (-413);
private yyaction51 t =   case yychar t of {
  '{' -> YYAction 98;
  '-' -> YYAction (-416);
  ';' -> YYAction (-416);
  '}' -> YYAction (-416);
  '.' -> YYAction (-416);
  '(' -> YYAction (-416);
  ')' -> YYAction (-416);
  ',' -> YYAction (-416);
  '|' -> YYAction (-416);
  '[' -> YYAction (-416);
  ']' -> YYAction (-416);
  '?' -> YYAction (-416);
  '!' -> YYAction (-416);
  '=' -> YYAction (-416);
  '\\' -> YYAction (-416);
  '_' -> YYAction (-416);
  _ ->   case yytoken t of {
    VARID -> YYAction (-416);
    CONID -> YYAction (-416);
    QUALIFIER -> YYAction (-416);
    WHERE -> YYAction (-416);
    TRUE -> YYAction (-416);
    FALSE -> YYAction (-416);
    THEN -> YYAction (-416);
    ELSE -> YYAction (-416);
    OF -> YYAction (-416);
    DO -> YYAction (-416);
    INTCONST -> YYAction (-416);
    STRCONST -> YYAction (-416);
    LONGCONST -> YYAction (-416);
    FLTCONST -> YYAction (-416);
    DBLCONST -> YYAction (-416);
    CHRCONST -> YYAction (-416);
    REGEXP -> YYAction (-416);
    BIGCONST -> YYAction (-416);
    ARROW -> YYAction (-416);
    DCOLON -> YYAction (-416);
    GETS -> YYAction (-416);
    DOTDOT -> YYAction (-416);
    SOMEOP -> YYAction (-416);
    _ -> (YYAction yyErr);
  };
};
private yyaction52 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction53 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-377);
  '}' -> YYAction (-377);
  ')' -> YYAction (-377);
  ',' -> YYAction (-377);
  '|' -> YYAction (-377);
  ']' -> YYAction (-377);
  '=' -> YYAction (-377);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 100;
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-377);
    THEN -> YYAction (-377);
    ELSE -> YYAction (-377);
    OF -> YYAction (-377);
    ARROW -> YYAction (-377);
    GETS -> YYAction (-377);
    DOTDOT -> YYAction (-377);
    _ -> (YYAction yyErr);
  };
};
private yyaction54 t = YYAction (-414);
private yyaction55 t = YYAction (-389);
private yyaction56 t = YYAction (-385);
private yyaction57 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  '-' -> YYAction (-390);
  ';' -> YYAction (-390);
  '}' -> YYAction (-390);
  ')' -> YYAction (-390);
  ',' -> YYAction (-390);
  '|' -> YYAction (-390);
  ']' -> YYAction (-390);
  '=' -> YYAction (-390);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    WHERE -> YYAction (-390);
    THEN -> YYAction (-390);
    ELSE -> YYAction (-390);
    OF -> YYAction (-390);
    ARROW -> YYAction (-390);
    DCOLON -> YYAction (-390);
    GETS -> YYAction (-390);
    DOTDOT -> YYAction (-390);
    SOMEOP -> YYAction (-390);
    _ -> (YYAction yyErr);
  };
};
private yyaction58 t = YYAction (-391);
private yyaction59 t =   case yychar t of {
  '.' -> YYAction 104;
  '-' -> YYAction (-393);
  ';' -> YYAction (-393);
  '}' -> YYAction (-393);
  '(' -> YYAction (-393);
  ')' -> YYAction (-393);
  ',' -> YYAction (-393);
  '|' -> YYAction (-393);
  '[' -> YYAction (-393);
  ']' -> YYAction (-393);
  '?' -> YYAction (-393);
  '!' -> YYAction (-393);
  '=' -> YYAction (-393);
  '\\' -> YYAction (-393);
  '_' -> YYAction (-393);
  _ ->   case yytoken t of {
    VARID -> YYAction (-393);
    CONID -> YYAction (-393);
    QUALIFIER -> YYAction (-393);
    WHERE -> YYAction (-393);
    TRUE -> YYAction (-393);
    FALSE -> YYAction (-393);
    THEN -> YYAction (-393);
    ELSE -> YYAction (-393);
    OF -> YYAction (-393);
    DO -> YYAction (-393);
    INTCONST -> YYAction (-393);
    STRCONST -> YYAction (-393);
    LONGCONST -> YYAction (-393);
    FLTCONST -> YYAction (-393);
    DBLCONST -> YYAction (-393);
    CHRCONST -> YYAction (-393);
    REGEXP -> YYAction (-393);
    BIGCONST -> YYAction (-393);
    ARROW -> YYAction (-393);
    DCOLON -> YYAction (-393);
    GETS -> YYAction (-393);
    DOTDOT -> YYAction (-393);
    SOMEOP -> YYAction (-393);
    _ -> (YYAction yyErr);
  };
};
private yyaction60 t =   case yychar t of {
  '{' -> YYAction 105;
  _ -> (YYAction yyErr);
};
private yyaction61 t = YYAction (-399);
private yyaction62 t = YYAction (-22);
private yyaction63 t =   case yychar t of {
  '{' -> YYAction 106;
  _ -> (YYAction yyErr);
};
private yyaction64 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction65 t =   case yychar t of {
  '(' -> YYAction 152;
  _ -> (YYAction yyErr);
};
private yyaction66 t =   case yychar t of {
  '(' -> YYAction (-23);
  _ ->   case yytoken t of {
    VARID -> YYAction 62;
    _ -> (YYAction yyErr);
  };
};
private yyaction67 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction68 t =   case yytoken t of {
    PACKAGE -> YYAction 155;
    _ -> (YYAction yyErr);
  };
private yyaction69 t = YYAction (-26);
private yyaction70 t = YYAction (-16);
private yyaction71 t = YYAction (-12);
private yyaction72 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction73 t = YYAction (-20);
private yyaction74 t = YYAction (-187);
private yyaction75 t = YYAction (-185);
private yyaction76 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '{' -> YYAction (-398);
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
};
private yyaction77 t = YYAction (-188);
private yyaction78 t = YYAction (-182);
private yyaction79 t =   case yychar t of {
  ';' -> YYAction 160;
  _ ->   case yytoken t of {
    THEN -> YYAction 159;
    _ -> (YYAction yyErr);
  };
};
private yyaction80 t =   case yytoken t of {
    OF -> YYAction 162;
    _ -> (YYAction yyErr);
  };
private yyaction81 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction82 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction83 t = YYAction (-384);
private yyaction84 t = YYAction (-193);
private yyaction85 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 172;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction86 t = YYAction (-419);
private yyaction87 t =   case yychar t of {
  ',' -> YYAction 87;
  ')' -> YYAction (-435);
  _ -> (YYAction yyErr);
};
private yyaction88 t =   case yychar t of {
  ';' -> YYAction 174;
  ')' -> YYAction 175;
  ',' -> YYAction 176;
  _ -> (YYAction yyErr);
};
private yyaction89 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 177;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction90 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 179;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction91 t =   case yychar t of {
  ')' -> YYAction 180;
  _ -> (YYAction yyErr);
};
private yyaction92 t =   case yychar t of {
  '-' -> YYAction 182;
  ';' -> YYAction (-377);
  ')' -> YYAction (-377);
  ',' -> YYAction (-377);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 100;
    SOMEOP -> YYAction 181;
    _ -> (YYAction yyErr);
  };
};
private yyaction93 t = YYAction (-430);
private yyaction94 t =   case yychar t of {
  ',' -> YYAction 184;
  '|' -> YYAction 185;
  ']' -> YYAction (-448);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-448);
    _ -> (YYAction yyErr);
  };
};
private yyaction95 t =   case yychar t of {
  ']' -> YYAction 187;
  _ ->   case yytoken t of {
    DOTDOT -> YYAction 186;
    _ -> (YYAction yyErr);
  };
};
private yyaction96 t =   case yychar t of {
  '\\' -> YYAction 46;
  _ ->   case yytoken t of {
    ARROW -> YYAction 188;
    _ -> (YYAction yyErr);
  };
};
private yyaction97 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  '\\' -> YYAction (-395);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    ARROW -> YYAction (-395);
    _ -> (YYAction yyErr);
  };
};
private yyaction98 t =   case yychar t of {
  '}' -> YYAction 193;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction99 t = YYAction (-394);
private yyaction100 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction101 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction102 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction103 t = YYAction (-392);
private yyaction104 t =   case yychar t of {
  '{' -> YYAction 215;
  '[' -> YYAction 216;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 214;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction105 t =   case yytoken t of {
    VARID -> YYAction 219;
    _ -> (YYAction yyErr);
  };
private yyaction106 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction107 t =   case yychar t of {
  '-' -> YYAction (-183);
  '.' -> YYAction (-183);
  '(' -> YYAction (-183);
  ',' -> YYAction (-171);
  '|' -> YYAction (-183);
  '[' -> YYAction (-183);
  '?' -> YYAction (-183);
  '!' -> YYAction (-183);
  '=' -> YYAction (-183);
  '_' -> YYAction (-183);
  _ ->   case yytoken t of {
    VARID -> YYAction (-183);
    CONID -> YYAction (-183);
    QUALIFIER -> YYAction (-183);
    TRUE -> YYAction (-183);
    FALSE -> YYAction (-183);
    DO -> YYAction (-183);
    INTCONST -> YYAction (-183);
    STRCONST -> YYAction (-183);
    LONGCONST -> YYAction (-183);
    FLTCONST -> YYAction (-183);
    DBLCONST -> YYAction (-183);
    CHRCONST -> YYAction (-183);
    REGEXP -> YYAction (-183);
    BIGCONST -> YYAction (-183);
    DCOLON -> YYAction (-171);
    SOMEOP -> YYAction (-183);
    _ -> (YYAction yyErr);
  };
};
private yyaction108 t = YYAction (-117);
private yyaction109 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction110 t =   case yytoken t of {
    INTCONST -> YYAction 224;
    _ -> (YYAction yyErr);
  };
private yyaction111 t =   case yytoken t of {
    INTCONST -> YYAction 225;
    _ -> (YYAction yyErr);
  };
private yyaction112 t =   case yytoken t of {
    INTCONST -> YYAction 226;
    _ -> (YYAction yyErr);
  };
private yyaction113 t =   case yychar t of {
  '-' -> YYAction 228;
  '(' -> YYAction 229;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PACKAGE -> YYAction 227;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction114 t =   case yytoken t of {
    CONID -> YYAction 233;
    _ -> (YYAction yyErr);
  };
private yyaction115 t =   case yychar t of {
  '(' -> YYAction 234;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction116 t =   case yychar t of {
  '(' -> YYAction 238;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction117 t =   case yytoken t of {
    DATA -> YYAction 114;
    _ -> (YYAction yyErr);
  };
private yyaction118 t =   case yytoken t of {
    CONID -> YYAction 244;
    _ -> (YYAction yyErr);
  };
private yyaction119 t =   case yychar t of {
  '(' -> YYAction 238;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction120 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 246;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction121 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 246;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction122 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 246;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction123 t =   case yytoken t of {
    NATIVE -> YYAction 246;
    _ -> (YYAction yyErr);
  };
private yyaction124 t =   case yychar t of {
  '-' -> YYAction 251;
  '(' -> YYAction 42;
  ')' -> YYAction 86;
  ',' -> YYAction 87;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction125 t = YYAction (-1);
private yyaction126 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-27);
  _ -> (YYAction yyErr);
};
private yyaction127 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ';' -> YYAction (-30);
  '}' -> YYAction (-30);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction128 t = YYAction (-32);
private yyaction129 t = YYAction (-33);
private yyaction130 t = YYAction (-41);
private yyaction131 t = YYAction (-119);
private yyaction132 t = YYAction (-38);
private yyaction133 t = YYAction (-39);
private yyaction134 t = YYAction (-40);
private yyaction135 t = YYAction (-118);
private yyaction136 t = YYAction (-120);
private yyaction137 t = YYAction (-121);
private yyaction138 t = YYAction (-122);
private yyaction139 t = YYAction (-123);
private yyaction140 t = YYAction (-127);
private yyaction141 t = YYAction (-128);
private yyaction142 t =   case yychar t of {
  ';' -> YYAction (-129);
  '}' -> YYAction (-129);
  _ ->   case yytoken t of {
    WHERE -> YYAction 256;
    _ -> (YYAction yyErr);
  };
};
private yyaction143 t = YYAction (-206);
private yyaction144 t =   case yychar t of {
  '-' -> YYAction 259;
  _ ->   case yytoken t of {
    VARID -> YYAction 258;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction145 t =   case yytoken t of {
    DCOLON -> YYAction 263;
    _ -> (YYAction yyErr);
  };
private yyaction146 t =   case yychar t of {
  ',' -> YYAction 264;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-210);
    _ -> (YYAction yyErr);
  };
};
private yyaction147 t = YYAction (-213);
private yyaction148 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 265;
    CONID -> YYAction 266;
    QUALIFIER -> YYAction 267;
    STRCONST -> YYAction 268;
    DCOLON -> YYAction 269;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction149 t =   case yychar t of {
  ';' -> YYAction (-328);
  '}' -> YYAction (-328);
  _ ->   case yytoken t of {
    WHERE -> YYAction 273;
    _ -> (YYAction yyErr);
  };
};
private yyaction150 t =   case yychar t of {
  '|' -> YYAction 275;
  '=' -> YYAction 276;
  _ -> (YYAction yyErr);
};
private yyaction151 t =   case yychar t of {
  '-' -> YYAction 102;
  '|' -> YYAction (-336);
  '=' -> YYAction (-336);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    _ -> (YYAction yyErr);
  };
};
private yyaction152 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 279;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction153 t = YYAction (-24);
private yyaction154 t = YYAction (-17);
private yyaction155 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction156 t = YYAction (-11);
private yyaction157 t = YYAction (-184);
private yyaction158 t = YYAction (-181);
private yyaction159 t = YYAction (-379);
private yyaction160 t =   case yytoken t of {
    THEN -> YYAction 285;
    _ -> (YYAction yyErr);
  };
private yyaction161 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction162 t =   case yychar t of {
  '{' -> YYAction 287;
  _ -> (YYAction yyErr);
};
private yyaction163 t = YYAction (-137);
private yyaction164 t =   case yychar t of {
  ';' -> YYAction (-138);
  '}' -> YYAction (-138);
  _ ->   case yytoken t of {
    WHERE -> YYAction 256;
    _ -> (YYAction yyErr);
  };
};
private yyaction165 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-139);
  _ -> (YYAction yyErr);
};
private yyaction166 t =   case yychar t of {
  '}' -> YYAction 289;
  _ -> (YYAction yyErr);
};
private yyaction167 t =   case yychar t of {
  '{' -> YYAction 290;
  _ -> (YYAction yyErr);
};
private yyaction168 t =   case yychar t of {
  '=' -> YYAction 292;
  ';' -> YYAction (-359);
  '}' -> YYAction (-359);
  ',' -> YYAction (-359);
  ']' -> YYAction (-359);
  _ ->   case yytoken t of {
    GETS -> YYAction 291;
    _ -> (YYAction yyErr);
  };
};
private yyaction169 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-356);
  _ -> (YYAction yyErr);
};
private yyaction170 t = YYAction (-350);
private yyaction171 t =   case yychar t of {
  '}' -> YYAction 294;
  _ -> (YYAction yyErr);
};
private yyaction172 t = YYAction (-423);
private yyaction173 t = YYAction (-436);
private yyaction174 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction175 t = YYAction (-429);
private yyaction176 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction177 t = YYAction (-422);
private yyaction178 t =   case yychar t of {
  ')' -> YYAction 299;
  _ -> (YYAction yyErr);
};
private yyaction179 t = YYAction (-421);
private yyaction180 t = YYAction (-420);
private yyaction181 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-193);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction182 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 300;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction183 t =   case yychar t of {
  ')' -> YYAction 301;
  _ -> (YYAction yyErr);
};
private yyaction184 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-450);
  ']' -> YYAction (-450);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    DOTDOT -> YYAction (-450);
    _ -> (YYAction yyErr);
  };
};
private yyaction185 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction186 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  ']' -> YYAction 305;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction187 t = YYAction (-431);
private yyaction188 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction189 t = YYAction (-374);
private yyaction190 t = YYAction (-373);
private yyaction191 t = YYAction (-396);
private yyaction192 t = YYAction (-171);
private yyaction193 t = YYAction (-417);
private yyaction194 t =   case yychar t of {
  '=' -> YYAction 308;
  '}' -> YYAction (-447);
  ',' -> YYAction (-447);
  _ -> (YYAction yyErr);
};
private yyaction195 t =   case yychar t of {
  '}' -> YYAction 309;
  _ -> (YYAction yyErr);
};
private yyaction196 t =   case yychar t of {
  ',' -> YYAction 310;
  '}' -> YYAction (-437);
  _ -> (YYAction yyErr);
};
private yyaction197 t = YYAction (-252);
private yyaction198 t =   case yytoken t of {
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 311;
    _ -> (YYAction yyErr);
  };
private yyaction199 t =   case yytoken t of {
    VARID -> YYAction 312;
    _ -> (YYAction yyErr);
  };
private yyaction200 t =   case yychar t of {
  '(' -> YYAction 200;
  ')' -> YYAction 317;
  ',' -> YYAction 87;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 315;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    ARROW -> YYAction 316;
    _ -> (YYAction yyErr);
  };
};
private yyaction201 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  ']' -> YYAction 322;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction202 t = YYAction (-254);
private yyaction203 t = YYAction (-376);
private yyaction204 t = YYAction (-229);
private yyaction205 t = YYAction (-230);
private yyaction206 t =   case yychar t of {
  '-' -> YYAction (-236);
  ';' -> YYAction (-236);
  '}' -> YYAction (-236);
  ')' -> YYAction (-236);
  ',' -> YYAction (-236);
  '|' -> YYAction (-236);
  ']' -> YYAction (-236);
  '=' -> YYAction (-236);
  _ ->   case yytoken t of {
    ARROW -> YYAction 324;
    EARROW -> YYAction 325;
    DOCUMENTATION -> YYAction (-236);
    WHERE -> YYAction (-236);
    CLASS -> YYAction (-236);
    THEN -> YYAction (-236);
    ELSE -> YYAction (-236);
    OF -> YYAction (-236);
    THROWS -> YYAction (-236);
    DCOLON -> YYAction (-236);
    GETS -> YYAction (-236);
    DOTDOT -> YYAction (-236);
    SOMEOP -> YYAction (-236);
    _ -> (YYAction yyErr);
  };
};
private yyaction207 t = YYAction (-235);
private yyaction208 t = YYAction (-245);
private yyaction209 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  '-' -> YYAction (-308);
  ';' -> YYAction (-308);
  '}' -> YYAction (-308);
  ')' -> YYAction (-308);
  ',' -> YYAction (-308);
  '|' -> YYAction (-308);
  ']' -> YYAction (-308);
  '=' -> YYAction (-308);
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    DOCUMENTATION -> YYAction (-308);
    WHERE -> YYAction (-308);
    CLASS -> YYAction (-308);
    THEN -> YYAction (-308);
    ELSE -> YYAction (-308);
    OF -> YYAction (-308);
    THROWS -> YYAction (-308);
    ARROW -> YYAction (-308);
    DCOLON -> YYAction (-308);
    GETS -> YYAction (-308);
    EARROW -> YYAction (-308);
    DOTDOT -> YYAction (-308);
    SOMEOP -> YYAction (-308);
    _ -> (YYAction yyErr);
  };
};
private yyaction210 t = YYAction (-246);
private yyaction211 t = YYAction (-247);
private yyaction212 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-382);
  '}' -> YYAction (-382);
  ')' -> YYAction (-382);
  ',' -> YYAction (-382);
  '|' -> YYAction (-382);
  ']' -> YYAction (-382);
  '=' -> YYAction (-382);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-382);
    THEN -> YYAction (-382);
    ELSE -> YYAction (-382);
    OF -> YYAction (-382);
    ARROW -> YYAction (-382);
    DCOLON -> YYAction (-382);
    GETS -> YYAction (-382);
    DOTDOT -> YYAction (-382);
    _ -> (YYAction yyErr);
  };
};
private yyaction213 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-383);
  '}' -> YYAction (-383);
  ')' -> YYAction (-383);
  ',' -> YYAction (-383);
  '|' -> YYAction (-383);
  ']' -> YYAction (-383);
  '=' -> YYAction (-383);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-383);
    THEN -> YYAction (-383);
    ELSE -> YYAction (-383);
    OF -> YYAction (-383);
    ARROW -> YYAction (-383);
    DCOLON -> YYAction (-383);
    GETS -> YYAction (-383);
    DOTDOT -> YYAction (-383);
    _ -> (YYAction yyErr);
  };
};
private yyaction214 t = YYAction (-401);
private yyaction215 t =   case yytoken t of {
    VARID -> YYAction 327;
    _ -> (YYAction yyErr);
  };
private yyaction216 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction217 t = YYAction (-402);
private yyaction218 t = YYAction (-403);
private yyaction219 t =   case yychar t of {
  '?' -> YYAction 331;
  '=' -> YYAction 332;
  '}' -> YYAction (-445);
  ',' -> YYAction (-445);
  _ ->   case yytoken t of {
    GETS -> YYAction 330;
    _ -> (YYAction yyErr);
  };
};
private yyaction220 t =   case yychar t of {
  '}' -> YYAction 333;
  _ -> (YYAction yyErr);
};
private yyaction221 t =   case yychar t of {
  ',' -> YYAction 334;
  '}' -> YYAction (-440);
  _ -> (YYAction yyErr);
};
private yyaction222 t =   case yychar t of {
  '}' -> YYAction 335;
  _ -> (YYAction yyErr);
};
private yyaction223 t =   case yychar t of {
  '(' -> YYAction 339;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 336;
    CONID -> YYAction 337;
    PUBLIC -> YYAction 338;
    _ -> (YYAction yyErr);
  };
};
private yyaction224 t = YYAction (-196);
private yyaction225 t = YYAction (-198);
private yyaction226 t = YYAction (-197);
private yyaction227 t =   case yytoken t of {
    TYPE -> YYAction 342;
    WHERE -> YYAction (-43);
    CLASS -> YYAction (-43);
    _ -> (YYAction yyErr);
  };
private yyaction228 t = YYAction (-217);
private yyaction229 t =   case yychar t of {
  '-' -> YYAction 344;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction230 t = YYAction (-215);
private yyaction231 t = YYAction (-216);
private yyaction232 t = YYAction (-214);
private yyaction233 t =   case yychar t of {
  '(' -> YYAction 347;
  '=' -> YYAction 348;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction234 t =   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
private yyaction235 t =   case yychar t of {
  '(' -> YYAction 347;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction236 t = YYAction (-268);
private yyaction237 t =   case yychar t of {
  ';' -> YYAction (-328);
  '}' -> YYAction (-328);
  _ ->   case yytoken t of {
    WHERE -> YYAction 273;
    EARROW -> YYAction 354;
    _ -> (YYAction yyErr);
  };
};
private yyaction238 t =   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
private yyaction239 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction240 t = YYAction (-276);
private yyaction241 t =   case yychar t of {
  ';' -> YYAction (-279);
  '}' -> YYAction (-279);
  _ ->   case yytoken t of {
    EARROW -> YYAction 359;
    WHERE -> YYAction (-279);
    _ -> (YYAction yyErr);
  };
};
private yyaction242 t =   case yychar t of {
  ';' -> YYAction (-328);
  '}' -> YYAction (-328);
  _ ->   case yytoken t of {
    WHERE -> YYAction 273;
    _ -> (YYAction yyErr);
  };
};
private yyaction243 t = YYAction (-37);
private yyaction244 t =   case yychar t of {
  '(' -> YYAction 347;
  '=' -> YYAction 361;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction245 t = YYAction (-281);
private yyaction246 t =   case yychar t of {
  '-' -> YYAction 228;
  '(' -> YYAction 229;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction247 t = YYAction (-34);
private yyaction248 t = YYAction (-35);
private yyaction249 t = YYAction (-36);
private yyaction250 t = YYAction (-212);
private yyaction251 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 363;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction252 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 364;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction253 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 365;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction254 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-28);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction255 t = YYAction (-31);
private yyaction256 t =   case yychar t of {
  '{' -> YYAction 367;
  _ -> (YYAction yyErr);
};
private yyaction257 t = YYAction (-335);
private yyaction258 t = YYAction (-200);
private yyaction259 t = YYAction (-201);
private yyaction260 t = YYAction (-199);
private yyaction261 t =   case yychar t of {
  '-' -> YYAction 259;
  ';' -> YYAction (-202);
  '}' -> YYAction (-202);
  _ ->   case yytoken t of {
    VARID -> YYAction 258;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction262 t = YYAction (-204);
private yyaction263 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction264 t =   case yychar t of {
  '(' -> YYAction 229;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction265 t =   case yychar t of {
  '.' -> YYAction 371;
  ';' -> YYAction (-5);
  '}' -> YYAction (-5);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-5);
    DCOLON -> YYAction (-5);
    _ -> (YYAction yyErr);
  };
};
private yyaction266 t = YYAction (-6);
private yyaction267 t =   case yytoken t of {
    VARID -> YYAction 265;
    CONID -> YYAction 266;
    QUALIFIER -> YYAction 267;
    STRCONST -> YYAction 268;
    _ -> (YYAction yyErr);
  };
private yyaction268 t = YYAction (-9);
private yyaction269 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction270 t =   case yytoken t of {
    DCOLON -> YYAction 376;
    _ -> (YYAction yyErr);
  };
private yyaction271 t =   case yytoken t of {
    DCOLON -> YYAction 377;
    _ -> (YYAction yyErr);
  };
private yyaction272 t =   case yytoken t of {
    DCOLON -> YYAction 378;
    _ -> (YYAction yyErr);
  };
private yyaction273 t =   case yychar t of {
  '{' -> YYAction 379;
  _ -> (YYAction yyErr);
};
private yyaction274 t = YYAction (-282);
private yyaction275 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction276 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction277 t = YYAction (-334);
private yyaction278 t =   case yychar t of {
  '|' -> YYAction 275;
  ';' -> YYAction (-365);
  '}' -> YYAction (-365);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-365);
    _ -> (YYAction yyErr);
  };
};
private yyaction279 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 385;
    _ -> (YYAction yyErr);
  };
};
private yyaction280 t =   case yychar t of {
  ')' -> YYAction 387;
  _ -> (YYAction yyErr);
};
private yyaction281 t = YYAction (-192);
private yyaction282 t =   case yychar t of {
  ',' -> YYAction 388;
  ')' -> YYAction (-179);
  _ -> (YYAction yyErr);
};
private yyaction283 t = YYAction (-191);
private yyaction284 t = YYAction (-19);
private yyaction285 t = YYAction (-378);
private yyaction286 t =   case yychar t of {
  ';' -> YYAction 390;
  _ ->   case yytoken t of {
    ELSE -> YYAction 389;
    _ -> (YYAction yyErr);
  };
};
private yyaction287 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction288 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-140);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction289 t =   case yytoken t of {
    IN -> YYAction 397;
    _ -> (YYAction yyErr);
  };
private yyaction290 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction291 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction292 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction293 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-357);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction294 t = YYAction (-400);
private yyaction295 t =   case yychar t of {
  ';' -> YYAction 402;
  ')' -> YYAction (-451);
  _ -> (YYAction yyErr);
};
private yyaction296 t =   case yychar t of {
  ')' -> YYAction 403;
  _ -> (YYAction yyErr);
};
private yyaction297 t =   case yychar t of {
  ',' -> YYAction 184;
  ')' -> YYAction (-448);
  ']' -> YYAction (-448);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-448);
    _ -> (YYAction yyErr);
  };
};
private yyaction298 t =   case yychar t of {
  ')' -> YYAction 404;
  _ -> (YYAction yyErr);
};
private yyaction299 t = YYAction (-424);
private yyaction300 t = YYAction (-426);
private yyaction301 t = YYAction (-425);
private yyaction302 t = YYAction (-449);
private yyaction303 t =   case yychar t of {
  ',' -> YYAction 405;
  ']' -> YYAction (-353);
  _ -> (YYAction yyErr);
};
private yyaction304 t =   case yychar t of {
  ']' -> YYAction 406;
  _ -> (YYAction yyErr);
};
private yyaction305 t = YYAction (-432);
private yyaction306 t =   case yychar t of {
  ']' -> YYAction 407;
  _ -> (YYAction yyErr);
};
private yyaction307 t = YYAction (-375);
private yyaction308 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction309 t = YYAction (-418);
private yyaction310 t =   case yychar t of {
  '}' -> YYAction (-439);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction311 t =   case yytoken t of {
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
private yyaction312 t = YYAction (-228);
private yyaction313 t =   case yychar t of {
  '.' -> YYAction 411;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 410;
    _ -> (YYAction yyErr);
  };
};
private yyaction314 t =   case yychar t of {
  '.' -> YYAction (-226);
  _ ->   case yytoken t of {
    VARID -> YYAction 312;
    SOMEOP -> YYAction (-226);
    _ -> (YYAction yyErr);
  };
};
private yyaction315 t =   case yychar t of {
  '(' -> YYAction (-252);
  ')' -> YYAction (-252);
  ',' -> YYAction (-252);
  '|' -> YYAction (-252);
  '[' -> YYAction (-252);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 414;
    VARID -> YYAction (-252);
    CONID -> YYAction (-252);
    QUALIFIER -> YYAction (-252);
    ARROW -> YYAction (-252);
    _ -> (YYAction yyErr);
  };
};
private yyaction316 t =   case yychar t of {
  ')' -> YYAction 415;
  _ -> (YYAction yyErr);
};
private yyaction317 t = YYAction (-256);
private yyaction318 t =   case yychar t of {
  ')' -> YYAction 416;
  ',' -> YYAction 417;
  '|' -> YYAction 418;
  _ -> (YYAction yyErr);
};
private yyaction319 t = YYAction (-239);
private yyaction320 t =   case yychar t of {
  ';' -> YYAction (-238);
  '}' -> YYAction (-238);
  ')' -> YYAction (-238);
  ',' -> YYAction (-238);
  '|' -> YYAction (-238);
  ']' -> YYAction (-238);
  _ ->   case yytoken t of {
    ARROW -> YYAction 419;
    WHERE -> YYAction (-238);
    CLASS -> YYAction (-238);
    _ -> (YYAction yyErr);
  };
};
private yyaction321 t =   case yychar t of {
  ')' -> YYAction 420;
  _ -> (YYAction yyErr);
};
private yyaction322 t = YYAction (-255);
private yyaction323 t =   case yychar t of {
  ']' -> YYAction 421;
  _ -> (YYAction yyErr);
};
private yyaction324 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction325 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction326 t = YYAction (-309);
private yyaction327 t =   case yychar t of {
  '?' -> YYAction 426;
  '=' -> YYAction 427;
  '}' -> YYAction (-445);
  ',' -> YYAction (-445);
  _ ->   case yytoken t of {
    GETS -> YYAction 425;
    _ -> (YYAction yyErr);
  };
};
private yyaction328 t =   case yychar t of {
  '}' -> YYAction 428;
  _ -> (YYAction yyErr);
};
private yyaction329 t =   case yychar t of {
  ']' -> YYAction 429;
  _ -> (YYAction yyErr);
};
private yyaction330 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 430;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction331 t =   case yychar t of {
  '}' -> YYAction 432;
  _ -> (YYAction yyErr);
};
private yyaction332 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 433;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction333 t = YYAction (-407);
private yyaction334 t =   case yychar t of {
  '}' -> YYAction (-442);
  _ ->   case yytoken t of {
    VARID -> YYAction 435;
    _ -> (YYAction yyErr);
  };
};
private yyaction335 t = YYAction (-2);
private yyaction336 t =   case yychar t of {
  '(' -> YYAction (-171);
  _ ->   case yytoken t of {
    CONID -> YYAction 437;
    _ -> (YYAction yyErr);
  };
};
private yyaction337 t =   case yychar t of {
  '(' -> YYAction 339;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PUBLIC -> YYAction 338;
    _ -> (YYAction yyErr);
  };
};
private yyaction338 t =   case yychar t of {
  '(' -> YYAction 339;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PUBLIC -> YYAction 338;
    _ -> (YYAction yyErr);
  };
};
private yyaction339 t =   case yychar t of {
  ')' -> YYAction 443;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 440;
    QUALIFIER -> YYAction 441;
    PUBLIC -> YYAction 442;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction340 t = YYAction (-142);
private yyaction341 t =   case yychar t of {
  '(' -> YYAction 451;
  _ -> (YYAction yyErr);
};
private yyaction342 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction343 t =   case yytoken t of {
    CLASS -> YYAction 453;
    WHERE -> YYAction (-45);
    _ -> (YYAction yyErr);
  };
private yyaction344 t =   case yychar t of {
  ')' -> YYAction 455;
  _ -> (YYAction yyErr);
};
private yyaction345 t =   case yychar t of {
  ')' -> YYAction 456;
  _ -> (YYAction yyErr);
};
private yyaction346 t =   case yychar t of {
  ')' -> YYAction 457;
  _ -> (YYAction yyErr);
};
private yyaction347 t =   case yytoken t of {
    VARID -> YYAction 458;
    _ -> (YYAction yyErr);
  };
private yyaction348 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    DOCUMENTATION -> YYAction 460;
    NATIVE -> YYAction 461;
    PRIVATE -> YYAction 462;
    PROTECTED -> YYAction 463;
    PUBLIC -> YYAction 464;
    PURE -> YYAction 465;
    MUTABLE -> YYAction 466;
    _ -> (YYAction yyErr);
  };
};
private yyaction349 t =   case yychar t of {
  '(' -> YYAction 347;
  '=' -> YYAction (-290);
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction350 t =   case yychar t of {
  '=' -> YYAction 476;
  _ -> (YYAction yyErr);
};
private yyaction351 t =   case yychar t of {
  ',' -> YYAction 477;
  ')' -> YYAction (-265);
  _ -> (YYAction yyErr);
};
private yyaction352 t =   case yychar t of {
  ')' -> YYAction 478;
  _ -> (YYAction yyErr);
};
private yyaction353 t = YYAction (-264);
private yyaction354 t =   case yytoken t of {
    CONID -> YYAction 479;
    _ -> (YYAction yyErr);
  };
private yyaction355 t = YYAction (-271);
private yyaction356 t =   case yychar t of {
  ',' -> YYAction 480;
  ')' -> YYAction (-273);
  _ -> (YYAction yyErr);
};
private yyaction357 t =   case yychar t of {
  ')' -> YYAction 481;
  _ -> (YYAction yyErr);
};
private yyaction358 t = YYAction (-272);
private yyaction359 t =   case yychar t of {
  '(' -> YYAction 482;
  '[' -> YYAction 483;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction360 t = YYAction (-280);
private yyaction361 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction362 t =   case yychar t of {
  '=' -> YYAction 486;
  _ -> (YYAction yyErr);
};
private yyaction363 t =   case yychar t of {
  '-' -> YYAction (-423);
  '.' -> YYAction (-423);
  '(' -> YYAction (-423);
  ',' -> YYAction (-209);
  '|' -> YYAction (-423);
  '[' -> YYAction (-423);
  '?' -> YYAction (-423);
  '!' -> YYAction (-423);
  '=' -> YYAction (-423);
  '_' -> YYAction (-423);
  _ ->   case yytoken t of {
    VARID -> YYAction (-423);
    CONID -> YYAction (-423);
    QUALIFIER -> YYAction (-423);
    TRUE -> YYAction (-423);
    FALSE -> YYAction (-423);
    DO -> YYAction (-423);
    INTCONST -> YYAction (-423);
    STRCONST -> YYAction (-423);
    LONGCONST -> YYAction (-423);
    FLTCONST -> YYAction (-423);
    DBLCONST -> YYAction (-423);
    CHRCONST -> YYAction (-423);
    REGEXP -> YYAction (-423);
    BIGCONST -> YYAction (-423);
    DCOLON -> YYAction (-209);
    SOMEOP -> YYAction (-423);
    _ -> (YYAction yyErr);
  };
};
private yyaction364 t =   case yychar t of {
  '-' -> YYAction (-422);
  '.' -> YYAction (-422);
  '(' -> YYAction (-422);
  ',' -> YYAction (-207);
  '|' -> YYAction (-422);
  '[' -> YYAction (-422);
  '?' -> YYAction (-422);
  '!' -> YYAction (-422);
  '=' -> YYAction (-422);
  '_' -> YYAction (-422);
  _ ->   case yytoken t of {
    VARID -> YYAction (-422);
    CONID -> YYAction (-422);
    QUALIFIER -> YYAction (-422);
    TRUE -> YYAction (-422);
    FALSE -> YYAction (-422);
    DO -> YYAction (-422);
    INTCONST -> YYAction (-422);
    STRCONST -> YYAction (-422);
    LONGCONST -> YYAction (-422);
    FLTCONST -> YYAction (-422);
    DBLCONST -> YYAction (-422);
    CHRCONST -> YYAction (-422);
    REGEXP -> YYAction (-422);
    BIGCONST -> YYAction (-422);
    DCOLON -> YYAction (-207);
    SOMEOP -> YYAction (-422);
    _ -> (YYAction yyErr);
  };
};
private yyaction365 t =   case yychar t of {
  '-' -> YYAction (-421);
  '.' -> YYAction (-421);
  '(' -> YYAction (-421);
  ',' -> YYAction (-208);
  '|' -> YYAction (-421);
  '[' -> YYAction (-421);
  '?' -> YYAction (-421);
  '!' -> YYAction (-421);
  '=' -> YYAction (-421);
  '_' -> YYAction (-421);
  _ ->   case yytoken t of {
    VARID -> YYAction (-421);
    CONID -> YYAction (-421);
    QUALIFIER -> YYAction (-421);
    TRUE -> YYAction (-421);
    FALSE -> YYAction (-421);
    DO -> YYAction (-421);
    INTCONST -> YYAction (-421);
    STRCONST -> YYAction (-421);
    LONGCONST -> YYAction (-421);
    FLTCONST -> YYAction (-421);
    DBLCONST -> YYAction (-421);
    CHRCONST -> YYAction (-421);
    REGEXP -> YYAction (-421);
    BIGCONST -> YYAction (-421);
    DCOLON -> YYAction (-208);
    SOMEOP -> YYAction (-421);
    _ -> (YYAction yyErr);
  };
};
private yyaction366 t = YYAction (-29);
private yyaction367 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 487;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction368 t = YYAction (-203);
private yyaction369 t = YYAction (-205);
private yyaction370 t = YYAction (-211);
private yyaction371 t =   case yytoken t of {
    VARID -> YYAction 265;
    CONID -> YYAction 266;
    QUALIFIER -> YYAction 267;
    STRCONST -> YYAction 268;
    _ -> (YYAction yyErr);
  };
private yyaction372 t = YYAction (-8);
private yyaction373 t =   case yychar t of {
  ';' -> YYAction (-219);
  '}' -> YYAction (-219);
  '|' -> YYAction (-219);
  _ ->   case yytoken t of {
    THROWS -> YYAction 490;
    _ -> (YYAction yyErr);
  };
};
private yyaction374 t =   case yychar t of {
  '|' -> YYAction 491;
  ';' -> YYAction (-220);
  '}' -> YYAction (-220);
  _ -> (YYAction yyErr);
};
private yyaction375 t = YYAction (-222);
private yyaction376 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction377 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction378 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction379 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 498;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 246;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 495;
    PROTECTED -> YYAction 496;
    PUBLIC -> YYAction 497;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction380 t =   case yychar t of {
  ',' -> YYAction (-359);
  '=' -> YYAction (-359);
  _ ->   case yytoken t of {
    GETS -> YYAction 291;
    ARROW -> YYAction (-359);
    _ -> (YYAction yyErr);
  };
};
private yyaction381 t =   case yychar t of {
  ',' -> YYAction 504;
  '=' -> YYAction (-361);
  _ ->   case yytoken t of {
    ARROW -> YYAction (-361);
    _ -> (YYAction yyErr);
  };
};
private yyaction382 t =   case yychar t of {
  '=' -> YYAction 506;
  _ ->   case yytoken t of {
    ARROW -> YYAction 505;
    _ -> (YYAction yyErr);
  };
};
private yyaction383 t = YYAction (-333);
private yyaction384 t = YYAction (-366);
private yyaction385 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    _ -> (YYAction yyErr);
  };
};
private yyaction386 t = YYAction (-190);
private yyaction387 t = YYAction (-21);
private yyaction388 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 279;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction389 t = YYAction (-381);
private yyaction390 t =   case yytoken t of {
    ELSE -> YYAction 510;
    _ -> (YYAction yyErr);
  };
private yyaction391 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction392 t = YYAction (-347);
private yyaction393 t =   case yychar t of {
  '|' -> YYAction 275;
  '=' -> YYAction 506;
  _ ->   case yytoken t of {
    ARROW -> YYAction 505;
    _ -> (YYAction yyErr);
  };
};
private yyaction394 t =   case yychar t of {
  ';' -> YYAction 514;
  '}' -> YYAction (-370);
  _ ->   case yytoken t of {
    WHERE -> YYAction 256;
    _ -> (YYAction yyErr);
  };
};
private yyaction395 t =   case yychar t of {
  '}' -> YYAction 516;
  _ -> (YYAction yyErr);
};
private yyaction396 t = YYAction (-141);
private yyaction397 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction398 t =   case yychar t of {
  '}' -> YYAction 518;
  _ -> (YYAction yyErr);
};
private yyaction399 t = YYAction (-360);
private yyaction400 t = YYAction (-351);
private yyaction401 t = YYAction (-358);
private yyaction402 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-453);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction403 t = YYAction (-428);
private yyaction404 t = YYAction (-427);
private yyaction405 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ']' -> YYAction (-355);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction406 t = YYAction (-434);
private yyaction407 t = YYAction (-433);
private yyaction408 t = YYAction (-446);
private yyaction409 t = YYAction (-438);
private yyaction410 t = YYAction (-233);
private yyaction411 t = YYAction (-232);
private yyaction412 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction413 t = YYAction (-227);
private yyaction414 t =   case yychar t of {
  '(' -> YYAction 524;
  _ ->   case yytoken t of {
    VARID -> YYAction 522;
    SOMEOP -> YYAction 523;
    _ -> (YYAction yyErr);
  };
};
private yyaction415 t = YYAction (-258);
private yyaction416 t = YYAction (-248);
private yyaction417 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction418 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction419 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction420 t = YYAction (-257);
private yyaction421 t = YYAction (-251);
private yyaction422 t =   case yychar t of {
  '-' -> YYAction (-236);
  ';' -> YYAction (-236);
  '}' -> YYAction (-236);
  ')' -> YYAction (-236);
  ',' -> YYAction (-236);
  '|' -> YYAction (-236);
  ']' -> YYAction (-236);
  '=' -> YYAction (-236);
  _ ->   case yytoken t of {
    ARROW -> YYAction 324;
    DOCUMENTATION -> YYAction (-236);
    WHERE -> YYAction (-236);
    CLASS -> YYAction (-236);
    THEN -> YYAction (-236);
    ELSE -> YYAction (-236);
    OF -> YYAction (-236);
    THROWS -> YYAction (-236);
    DCOLON -> YYAction (-236);
    GETS -> YYAction (-236);
    DOTDOT -> YYAction (-236);
    SOMEOP -> YYAction (-236);
    _ -> (YYAction yyErr);
  };
};
private yyaction423 t = YYAction (-237);
private yyaction424 t = YYAction (-234);
private yyaction425 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 532;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction426 t =   case yychar t of {
  '}' -> YYAction 533;
  _ -> (YYAction yyErr);
};
private yyaction427 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 534;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction428 t = YYAction (-411);
private yyaction429 t = YYAction (-412);
private yyaction430 t = YYAction (-406);
private yyaction431 t = YYAction (-443);
private yyaction432 t = YYAction (-404);
private yyaction433 t = YYAction (-405);
private yyaction434 t = YYAction (-444);
private yyaction435 t =   case yychar t of {
  '=' -> YYAction 536;
  '}' -> YYAction (-445);
  ',' -> YYAction (-445);
  _ ->   case yytoken t of {
    GETS -> YYAction 535;
    _ -> (YYAction yyErr);
  };
};
private yyaction436 t = YYAction (-441);
private yyaction437 t =   case yychar t of {
  '(' -> YYAction 339;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PUBLIC -> YYAction 338;
    _ -> (YYAction yyErr);
  };
};
private yyaction438 t = YYAction (-144);
private yyaction439 t = YYAction (-149);
private yyaction440 t =   case yychar t of {
  '(' -> YYAction 538;
  ')' -> YYAction (-186);
  ',' -> YYAction (-186);
  _ ->   case yytoken t of {
    VARID -> YYAction (-186);
    CONID -> YYAction (-186);
    SOMEOP -> YYAction (-186);
    _ -> (YYAction yyErr);
  };
};
private yyaction441 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 539;
    _ -> (YYAction yyErr);
  };
};
private yyaction442 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 440;
    QUALIFIER -> YYAction 441;
    PUBLIC -> YYAction 442;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction443 t = YYAction (-147);
private yyaction444 t =   case yychar t of {
  ')' -> YYAction 541;
  _ -> (YYAction yyErr);
};
private yyaction445 t =   case yychar t of {
  ',' -> YYAction 542;
  ')' -> YYAction (-150);
  _ -> (YYAction yyErr);
};
private yyaction446 t =   case yychar t of {
  ')' -> YYAction (-159);
  ',' -> YYAction (-159);
  _ ->   case yytoken t of {
    VARID -> YYAction 543;
    CONID -> YYAction 544;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction447 t = YYAction (-153);
private yyaction448 t = YYAction (-156);
private yyaction449 t = YYAction (-157);
private yyaction450 t = YYAction (-158);
private yyaction451 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 440;
    QUALIFIER -> YYAction 441;
    PUBLIC -> YYAction 442;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction452 t = YYAction (-44);
private yyaction453 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction454 t =   case yytoken t of {
    WHERE -> YYAction 549;
    _ -> (YYAction yyErr);
  };
private yyaction455 t = YYAction (-209);
private yyaction456 t = YYAction (-207);
private yyaction457 t = YYAction (-208);
private yyaction458 t =   case yytoken t of {
    DCOLON -> YYAction 414;
    _ -> (YYAction yyErr);
  };
private yyaction459 t =   case yychar t of {
  '{' -> YYAction 551;
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  ';' -> YYAction (-304);
  '}' -> YYAction (-304);
  '|' -> YYAction (-304);
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    DOCUMENTATION -> YYAction (-304);
    WHERE -> YYAction (-304);
    _ -> (YYAction yyErr);
  };
};
private yyaction460 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    PRIVATE -> YYAction 462;
    PROTECTED -> YYAction 463;
    PUBLIC -> YYAction 464;
    _ -> (YYAction yyErr);
  };
};
private yyaction461 t = YYAction (-285);
private yyaction462 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    _ -> (YYAction yyErr);
  };
};
private yyaction463 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    _ -> (YYAction yyErr);
  };
};
private yyaction464 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    _ -> (YYAction yyErr);
  };
};
private yyaction465 t =   case yytoken t of {
    NATIVE -> YYAction 558;
    _ -> (YYAction yyErr);
  };
private yyaction466 t =   case yytoken t of {
    NATIVE -> YYAction 559;
    _ -> (YYAction yyErr);
  };
private yyaction467 t =   case yytoken t of {
    CONID -> YYAction 459;
    _ -> (YYAction yyErr);
  };
private yyaction468 t =   case yytoken t of {
    CONID -> YYAction 459;
    _ -> (YYAction yyErr);
  };
private yyaction469 t =   case yytoken t of {
    VARID -> YYAction 265;
    CONID -> YYAction 266;
    QUALIFIER -> YYAction 267;
    STRCONST -> YYAction 268;
    _ -> (YYAction yyErr);
  };
private yyaction470 t = YYAction (-289);
private yyaction471 t =   case yychar t of {
  '|' -> YYAction 563;
  ';' -> YYAction (-292);
  '}' -> YYAction (-292);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-292);
    _ -> (YYAction yyErr);
  };
};
private yyaction472 t =   case yychar t of {
  ';' -> YYAction (-294);
  '}' -> YYAction (-294);
  '|' -> YYAction (-294);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 564;
    WHERE -> YYAction (-294);
    _ -> (YYAction yyErr);
  };
};
private yyaction473 t = YYAction (-297);
private yyaction474 t = YYAction (-303);
private yyaction475 t = YYAction (-291);
private yyaction476 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    DOCUMENTATION -> YYAction 460;
    NATIVE -> YYAction 461;
    PRIVATE -> YYAction 462;
    PROTECTED -> YYAction 463;
    PUBLIC -> YYAction 464;
    PURE -> YYAction 465;
    MUTABLE -> YYAction 466;
    _ -> (YYAction yyErr);
  };
};
private yyaction477 t =   case yychar t of {
  ')' -> YYAction (-266);
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction478 t = YYAction (-269);
private yyaction479 t =   case yychar t of {
  '(' -> YYAction 347;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction480 t =   case yychar t of {
  ')' -> YYAction (-274);
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction481 t = YYAction (-277);
private yyaction482 t =   case yychar t of {
  ')' -> YYAction 317;
  ',' -> YYAction 87;
  _ ->   case yytoken t of {
    ARROW -> YYAction 316;
    _ -> (YYAction yyErr);
  };
};
private yyaction483 t =   case yychar t of {
  ']' -> YYAction 322;
  _ -> (YYAction yyErr);
};
private yyaction484 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction485 t = YYAction (-326);
private yyaction486 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction487 t = YYAction (-331);
private yyaction488 t =   case yychar t of {
  '}' -> YYAction 572;
  _ -> (YYAction yyErr);
};
private yyaction489 t = YYAction (-7);
private yyaction490 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction491 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction492 t = YYAction (-223);
private yyaction493 t = YYAction (-224);
private yyaction494 t = YYAction (-225);
private yyaction495 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 246;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction496 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 246;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction497 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 246;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction498 t = YYAction (-329);
private yyaction499 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ';' -> YYAction (-134);
  '}' -> YYAction (-134);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 246;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 495;
    PROTECTED -> YYAction 496;
    PUBLIC -> YYAction 497;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction500 t = YYAction (-130);
private yyaction501 t =   case yychar t of {
  '}' -> YYAction 579;
  _ -> (YYAction yyErr);
};
private yyaction502 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-124);
  _ -> (YYAction yyErr);
};
private yyaction503 t = YYAction (-136);
private yyaction504 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '=' -> YYAction (-363);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    ARROW -> YYAction (-363);
    _ -> (YYAction yyErr);
  };
};
private yyaction505 t = YYAction (-348);
private yyaction506 t = YYAction (-349);
private yyaction507 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction508 t = YYAction (-189);
private yyaction509 t = YYAction (-180);
private yyaction510 t = YYAction (-380);
private yyaction511 t = YYAction (-386);
private yyaction512 t = YYAction (-368);
private yyaction513 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction514 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-372);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction515 t = YYAction (-369);
private yyaction516 t = YYAction (-387);
private yyaction517 t = YYAction (-388);
private yyaction518 t =   case yychar t of {
  ';' -> YYAction (-352);
  '}' -> YYAction (-352);
  ',' -> YYAction (-352);
  ']' -> YYAction (-352);
  _ ->   case yytoken t of {
    IN -> YYAction 397;
    _ -> (YYAction yyErr);
  };
};
private yyaction519 t = YYAction (-452);
private yyaction520 t = YYAction (-354);
private yyaction521 t = YYAction (-231);
private yyaction522 t = YYAction (-262);
private yyaction523 t = YYAction (-261);
private yyaction524 t =   case yychar t of {
  '(' -> YYAction 524;
  _ ->   case yytoken t of {
    VARID -> YYAction 522;
    SOMEOP -> YYAction 523;
    _ -> (YYAction yyErr);
  };
};
private yyaction525 t =   case yychar t of {
  ')' -> YYAction 586;
  _ -> (YYAction yyErr);
};
private yyaction526 t =   case yychar t of {
  ')' -> YYAction (-260);
  _ ->   case yytoken t of {
    ARROW -> YYAction 587;
    _ -> (YYAction yyErr);
  };
};
private yyaction527 t =   case yychar t of {
  ',' -> YYAction 588;
  ';' -> YYAction (-241);
  '}' -> YYAction (-241);
  ')' -> YYAction (-241);
  '|' -> YYAction (-241);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-241);
    _ -> (YYAction yyErr);
  };
};
private yyaction528 t =   case yychar t of {
  ')' -> YYAction 589;
  _ -> (YYAction yyErr);
};
private yyaction529 t =   case yychar t of {
  '|' -> YYAction 590;
  ')' -> YYAction (-243);
  _ -> (YYAction yyErr);
};
private yyaction530 t =   case yychar t of {
  ')' -> YYAction 591;
  _ -> (YYAction yyErr);
};
private yyaction531 t = YYAction (-240);
private yyaction532 t = YYAction (-410);
private yyaction533 t = YYAction (-408);
private yyaction534 t = YYAction (-409);
private yyaction535 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction536 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction537 t = YYAction (-143);
private yyaction538 t =   case yychar t of {
  ')' -> YYAction 593;
  _ ->   case yytoken t of {
    VARID -> YYAction 543;
    CONID -> YYAction 544;
    PUBLIC -> YYAction 592;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction539 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
};
private yyaction540 t = YYAction (-161);
private yyaction541 t = YYAction (-148);
private yyaction542 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  ')' -> YYAction (-151);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 440;
    QUALIFIER -> YYAction 441;
    PUBLIC -> YYAction 442;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction543 t = YYAction (-168);
private yyaction544 t = YYAction (-169);
private yyaction545 t = YYAction (-170);
private yyaction546 t = YYAction (-160);
private yyaction547 t =   case yychar t of {
  ')' -> YYAction 598;
  _ -> (YYAction yyErr);
};
private yyaction548 t = YYAction (-46);
private yyaction549 t =   case yychar t of {
  '{' -> YYAction 599;
  _ -> (YYAction yyErr);
};
private yyaction550 t = YYAction (-42);
private yyaction551 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 600;
    PUBLIC -> YYAction 601;
    _ -> (YYAction yyErr);
  };
};
private yyaction552 t = YYAction (-307);
private yyaction553 t = YYAction (-306);
private yyaction554 t = YYAction (-296);
private yyaction555 t = YYAction (-299);
private yyaction556 t = YYAction (-300);
private yyaction557 t = YYAction (-298);
private yyaction558 t = YYAction (-283);
private yyaction559 t = YYAction (-284);
private yyaction560 t = YYAction (-302);
private yyaction561 t = YYAction (-301);
private yyaction562 t = YYAction (-286);
private yyaction563 t =   case yychar t of {
  '?' -> YYAction 467;
  '!' -> YYAction 468;
  _ ->   case yytoken t of {
    CONID -> YYAction 459;
    DOCUMENTATION -> YYAction 460;
    PRIVATE -> YYAction 462;
    PROTECTED -> YYAction 463;
    PUBLIC -> YYAction 464;
    _ -> (YYAction yyErr);
  };
};
private yyaction564 t = YYAction (-295);
private yyaction565 t =   case yytoken t of {
    VARID -> YYAction 265;
    CONID -> YYAction 266;
    QUALIFIER -> YYAction 267;
    STRCONST -> YYAction 268;
    _ -> (YYAction yyErr);
  };
private yyaction566 t = YYAction (-288);
private yyaction567 t = YYAction (-267);
private yyaction568 t =   case yychar t of {
  ';' -> YYAction (-328);
  '}' -> YYAction (-328);
  _ ->   case yytoken t of {
    WHERE -> YYAction 273;
    _ -> (YYAction yyErr);
  };
};
private yyaction569 t = YYAction (-275);
private yyaction570 t = YYAction (-278);
private yyaction571 t = YYAction (-327);
private yyaction572 t = YYAction (-332);
private yyaction573 t = YYAction (-218);
private yyaction574 t = YYAction (-221);
private yyaction575 t = YYAction (-131);
private yyaction576 t = YYAction (-132);
private yyaction577 t = YYAction (-133);
private yyaction578 t = YYAction (-135);
private yyaction579 t = YYAction (-330);
private yyaction580 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-125);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 246;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 495;
    PROTECTED -> YYAction 496;
    PUBLIC -> YYAction 497;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction581 t = YYAction (-362);
private yyaction582 t = YYAction (-364);
private yyaction583 t = YYAction (-367);
private yyaction584 t = YYAction (-371);
private yyaction585 t =   case yychar t of {
  ')' -> YYAction 616;
  _ -> (YYAction yyErr);
};
private yyaction586 t = YYAction (-253);
private yyaction587 t =   case yychar t of {
  '(' -> YYAction 524;
  _ ->   case yytoken t of {
    VARID -> YYAction 522;
    SOMEOP -> YYAction 523;
    _ -> (YYAction yyErr);
  };
};
private yyaction588 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction589 t = YYAction (-249);
private yyaction590 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction591 t = YYAction (-250);
private yyaction592 t =   case yytoken t of {
    VARID -> YYAction 543;
    CONID -> YYAction 544;
    PUBLIC -> YYAction 592;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
private yyaction593 t = YYAction (-155);
private yyaction594 t =   case yychar t of {
  ')' -> YYAction 621;
  _ -> (YYAction yyErr);
};
private yyaction595 t =   case yychar t of {
  ')' -> YYAction (-162);
  ',' -> YYAction (-162);
  _ ->   case yytoken t of {
    VARID -> YYAction 543;
    CONID -> YYAction 544;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction596 t =   case yychar t of {
  ',' -> YYAction 623;
  ')' -> YYAction (-165);
  _ -> (YYAction yyErr);
};
private yyaction597 t = YYAction (-152);
private yyaction598 t = YYAction (-146);
private yyaction599 t =   case yychar t of {
  '-' -> YYAction 673;
  ';' -> YYAction 674;
  '{' -> YYAction 675;
  '}' -> YYAction 676;
  '.' -> YYAction 677;
  '(' -> YYAction 678;
  ')' -> YYAction 679;
  ',' -> YYAction 680;
  '|' -> YYAction 681;
  '[' -> YYAction 682;
  ']' -> YYAction 683;
  '?' -> YYAction 684;
  '!' -> YYAction 685;
  '=' -> YYAction 686;
  '\\' -> YYAction 687;
  _ ->   case yytoken t of {
    VARID -> YYAction 624;
    CONID -> YYAction 625;
    QVARID -> YYAction 626;
    QCONID -> YYAction 627;
    QUALIFIER -> YYAction 628;
    DOCUMENTATION -> YYAction 629;
    PACKAGE -> YYAction 630;
    IMPORT -> YYAction 631;
    INFIX -> YYAction 632;
    INFIXR -> YYAction 633;
    INFIXL -> YYAction 634;
    NATIVE -> YYAction 635;
    DATA -> YYAction 636;
    WHERE -> YYAction 637;
    CLASS -> YYAction 638;
    INSTANCE -> YYAction 639;
    ABSTRACT -> YYAction 640;
    TYPE -> YYAction 641;
    TRUE -> YYAction 642;
    FALSE -> YYAction 643;
    IF -> YYAction 644;
    THEN -> YYAction 645;
    ELSE -> YYAction 646;
    CASE -> YYAction 647;
    OF -> YYAction 648;
    DERIVE -> YYAction 649;
    LET -> YYAction 650;
    IN -> YYAction 651;
    DO -> YYAction 652;
    FORALL -> YYAction 653;
    PRIVATE -> YYAction 654;
    PROTECTED -> YYAction 655;
    PUBLIC -> YYAction 656;
    PURE -> YYAction 657;
    THROWS -> YYAction 658;
    MUTABLE -> YYAction 659;
    INTCONST -> YYAction 660;
    STRCONST -> YYAction 661;
    LONGCONST -> YYAction 662;
    FLTCONST -> YYAction 663;
    DBLCONST -> YYAction 664;
    CHRCONST -> YYAction 665;
    ARROW -> YYAction 666;
    DCOLON -> YYAction 667;
    GETS -> YYAction 668;
    EARROW -> YYAction 669;
    DOTDOT -> YYAction 670;
    SOMEOP -> YYAction 671;
    INTERPRET -> YYAction 672;
    _ -> (YYAction yyErr);
  };
};
private yyaction600 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction601 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction602 t =   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
private yyaction603 t =   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
private yyaction604 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PRIVATE -> YYAction 600;
    PUBLIC -> YYAction 601;
    _ -> (YYAction yyErr);
  };
};
private yyaction605 t = YYAction (-325);
private yyaction606 t =   case yychar t of {
  '}' -> YYAction 695;
  _ -> (YYAction yyErr);
};
private yyaction607 t =   case yychar t of {
  ',' -> YYAction 697;
  '}' -> YYAction (-310);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 696;
    _ -> (YYAction yyErr);
  };
};
private yyaction608 t =   case yytoken t of {
    DCOLON -> YYAction 698;
    _ -> (YYAction yyErr);
  };
private yyaction609 t =   case yychar t of {
  ',' -> YYAction 699;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-317);
    _ -> (YYAction yyErr);
  };
};
private yyaction610 t = YYAction (-319);
private yyaction611 t = YYAction (-322);
private yyaction612 t = YYAction (-293);
private yyaction613 t = YYAction (-287);
private yyaction614 t = YYAction (-270);
private yyaction615 t = YYAction (-126);
private yyaction616 t = YYAction (-263);
private yyaction617 t = YYAction (-259);
private yyaction618 t = YYAction (-242);
private yyaction619 t = YYAction (-244);
private yyaction620 t = YYAction (-164);
private yyaction621 t = YYAction (-154);
private yyaction622 t = YYAction (-163);
private yyaction623 t =   case yychar t of {
  ')' -> YYAction (-166);
  _ ->   case yytoken t of {
    VARID -> YYAction 543;
    CONID -> YYAction 544;
    PUBLIC -> YYAction 592;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction624 t = YYAction (-49);
private yyaction625 t = YYAction (-50);
private yyaction626 t = YYAction (-51);
private yyaction627 t = YYAction (-52);
private yyaction628 t = YYAction (-53);
private yyaction629 t = YYAction (-54);
private yyaction630 t = YYAction (-55);
private yyaction631 t = YYAction (-56);
private yyaction632 t = YYAction (-57);
private yyaction633 t = YYAction (-58);
private yyaction634 t = YYAction (-59);
private yyaction635 t = YYAction (-60);
private yyaction636 t = YYAction (-61);
private yyaction637 t = YYAction (-62);
private yyaction638 t = YYAction (-63);
private yyaction639 t = YYAction (-64);
private yyaction640 t = YYAction (-65);
private yyaction641 t = YYAction (-66);
private yyaction642 t = YYAction (-67);
private yyaction643 t = YYAction (-68);
private yyaction644 t = YYAction (-69);
private yyaction645 t = YYAction (-70);
private yyaction646 t = YYAction (-71);
private yyaction647 t = YYAction (-72);
private yyaction648 t = YYAction (-73);
private yyaction649 t = YYAction (-74);
private yyaction650 t = YYAction (-75);
private yyaction651 t = YYAction (-76);
private yyaction652 t = YYAction (-77);
private yyaction653 t = YYAction (-78);
private yyaction654 t = YYAction (-79);
private yyaction655 t = YYAction (-80);
private yyaction656 t = YYAction (-81);
private yyaction657 t = YYAction (-82);
private yyaction658 t = YYAction (-83);
private yyaction659 t = YYAction (-84);
private yyaction660 t = YYAction (-85);
private yyaction661 t = YYAction (-86);
private yyaction662 t = YYAction (-87);
private yyaction663 t = YYAction (-88);
private yyaction664 t = YYAction (-89);
private yyaction665 t = YYAction (-90);
private yyaction666 t = YYAction (-91);
private yyaction667 t = YYAction (-92);
private yyaction668 t = YYAction (-93);
private yyaction669 t = YYAction (-94);
private yyaction670 t = YYAction (-95);
private yyaction671 t = YYAction (-96);
private yyaction672 t = YYAction (-97);
private yyaction673 t = YYAction (-106);
private yyaction674 t = YYAction (-107);
private yyaction675 t =   case yychar t of {
  '-' -> YYAction 673;
  ';' -> YYAction 674;
  '{' -> YYAction 675;
  '}' -> YYAction 701;
  '.' -> YYAction 677;
  '(' -> YYAction 678;
  ')' -> YYAction 679;
  ',' -> YYAction 680;
  '|' -> YYAction 681;
  '[' -> YYAction 682;
  ']' -> YYAction 683;
  '?' -> YYAction 684;
  '!' -> YYAction 685;
  '=' -> YYAction 686;
  '\\' -> YYAction 687;
  _ ->   case yytoken t of {
    VARID -> YYAction 624;
    CONID -> YYAction 625;
    QVARID -> YYAction 626;
    QCONID -> YYAction 627;
    QUALIFIER -> YYAction 628;
    DOCUMENTATION -> YYAction 629;
    PACKAGE -> YYAction 630;
    IMPORT -> YYAction 631;
    INFIX -> YYAction 632;
    INFIXR -> YYAction 633;
    INFIXL -> YYAction 634;
    NATIVE -> YYAction 635;
    DATA -> YYAction 636;
    WHERE -> YYAction 637;
    CLASS -> YYAction 638;
    INSTANCE -> YYAction 639;
    ABSTRACT -> YYAction 640;
    TYPE -> YYAction 641;
    TRUE -> YYAction 642;
    FALSE -> YYAction 643;
    IF -> YYAction 644;
    THEN -> YYAction 645;
    ELSE -> YYAction 646;
    CASE -> YYAction 647;
    OF -> YYAction 648;
    DERIVE -> YYAction 649;
    LET -> YYAction 650;
    IN -> YYAction 651;
    DO -> YYAction 652;
    FORALL -> YYAction 653;
    PRIVATE -> YYAction 654;
    PROTECTED -> YYAction 655;
    PUBLIC -> YYAction 656;
    PURE -> YYAction 657;
    THROWS -> YYAction 658;
    MUTABLE -> YYAction 659;
    INTCONST -> YYAction 660;
    STRCONST -> YYAction 661;
    LONGCONST -> YYAction 662;
    FLTCONST -> YYAction 663;
    DBLCONST -> YYAction 664;
    CHRCONST -> YYAction 665;
    ARROW -> YYAction 666;
    DCOLON -> YYAction 667;
    GETS -> YYAction 668;
    EARROW -> YYAction 669;
    DOTDOT -> YYAction 670;
    SOMEOP -> YYAction 671;
    INTERPRET -> YYAction 672;
    _ -> (YYAction yyErr);
  };
};
private yyaction676 t = YYAction (-48);
private yyaction677 t = YYAction (-104);
private yyaction678 t = YYAction (-102);
private yyaction679 t = YYAction (-103);
private yyaction680 t = YYAction (-98);
private yyaction681 t = YYAction (-99);
private yyaction682 t = YYAction (-100);
private yyaction683 t = YYAction (-101);
private yyaction684 t = YYAction (-105);
private yyaction685 t = YYAction (-108);
private yyaction686 t = YYAction (-109);
private yyaction687 t = YYAction (-110);
private yyaction688 t =   case yychar t of {
  '}' -> YYAction 703;
  _ -> (YYAction yyErr);
};
private yyaction689 t =   case yychar t of {
  '-' -> YYAction 673;
  ';' -> YYAction 674;
  '{' -> YYAction 675;
  '.' -> YYAction 677;
  '(' -> YYAction 678;
  ')' -> YYAction 679;
  ',' -> YYAction 680;
  '|' -> YYAction 681;
  '[' -> YYAction 682;
  ']' -> YYAction 683;
  '?' -> YYAction 684;
  '!' -> YYAction 685;
  '=' -> YYAction 686;
  '\\' -> YYAction 687;
  '}' -> YYAction (-111);
  _ ->   case yytoken t of {
    VARID -> YYAction 624;
    CONID -> YYAction 625;
    QVARID -> YYAction 626;
    QCONID -> YYAction 627;
    QUALIFIER -> YYAction 628;
    DOCUMENTATION -> YYAction 629;
    PACKAGE -> YYAction 630;
    IMPORT -> YYAction 631;
    INFIX -> YYAction 632;
    INFIXR -> YYAction 633;
    INFIXL -> YYAction 634;
    NATIVE -> YYAction 635;
    DATA -> YYAction 636;
    WHERE -> YYAction 637;
    CLASS -> YYAction 638;
    INSTANCE -> YYAction 639;
    ABSTRACT -> YYAction 640;
    TYPE -> YYAction 641;
    TRUE -> YYAction 642;
    FALSE -> YYAction 643;
    IF -> YYAction 644;
    THEN -> YYAction 645;
    ELSE -> YYAction 646;
    CASE -> YYAction 647;
    OF -> YYAction 648;
    DERIVE -> YYAction 649;
    LET -> YYAction 650;
    IN -> YYAction 651;
    DO -> YYAction 652;
    FORALL -> YYAction 653;
    PRIVATE -> YYAction 654;
    PROTECTED -> YYAction 655;
    PUBLIC -> YYAction 656;
    PURE -> YYAction 657;
    THROWS -> YYAction 658;
    MUTABLE -> YYAction 659;
    INTCONST -> YYAction 660;
    STRCONST -> YYAction 661;
    LONGCONST -> YYAction 662;
    FLTCONST -> YYAction 663;
    DBLCONST -> YYAction 664;
    CHRCONST -> YYAction 665;
    ARROW -> YYAction 666;
    DCOLON -> YYAction 667;
    GETS -> YYAction 668;
    EARROW -> YYAction 669;
    DOTDOT -> YYAction 670;
    SOMEOP -> YYAction 671;
    INTERPRET -> YYAction 672;
    _ -> (YYAction yyErr);
  };
};
private yyaction690 t = YYAction (-321);
private yyaction691 t = YYAction (-320);
private yyaction692 t = YYAction (-324);
private yyaction693 t = YYAction (-323);
private yyaction694 t =   case yytoken t of {
    DCOLON -> YYAction 705;
    _ -> (YYAction yyErr);
  };
private yyaction695 t = YYAction (-305);
private yyaction696 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  '}' -> YYAction (-312);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 600;
    PUBLIC -> YYAction 601;
    _ -> (YYAction yyErr);
  };
};
private yyaction697 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  '}' -> YYAction (-311);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 600;
    PUBLIC -> YYAction 601;
    _ -> (YYAction yyErr);
  };
};
private yyaction698 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction699 t =   case yychar t of {
  '?' -> YYAction 602;
  '!' -> YYAction 603;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PRIVATE -> YYAction 600;
    PUBLIC -> YYAction 601;
    _ -> (YYAction yyErr);
  };
};
private yyaction700 t = YYAction (-167);
private yyaction701 t =   case yychar t of {
  '-' -> YYAction 673;
  ';' -> YYAction 674;
  '{' -> YYAction 675;
  '.' -> YYAction 677;
  '(' -> YYAction 678;
  ')' -> YYAction 679;
  ',' -> YYAction 680;
  '|' -> YYAction 681;
  '[' -> YYAction 682;
  ']' -> YYAction 683;
  '?' -> YYAction 684;
  '!' -> YYAction 685;
  '=' -> YYAction 686;
  '\\' -> YYAction 687;
  '}' -> YYAction (-115);
  _ ->   case yytoken t of {
    VARID -> YYAction 624;
    CONID -> YYAction 625;
    QVARID -> YYAction 626;
    QCONID -> YYAction 627;
    QUALIFIER -> YYAction 628;
    DOCUMENTATION -> YYAction 629;
    PACKAGE -> YYAction 630;
    IMPORT -> YYAction 631;
    INFIX -> YYAction 632;
    INFIXR -> YYAction 633;
    INFIXL -> YYAction 634;
    NATIVE -> YYAction 635;
    DATA -> YYAction 636;
    WHERE -> YYAction 637;
    CLASS -> YYAction 638;
    INSTANCE -> YYAction 639;
    ABSTRACT -> YYAction 640;
    TYPE -> YYAction 641;
    TRUE -> YYAction 642;
    FALSE -> YYAction 643;
    IF -> YYAction 644;
    THEN -> YYAction 645;
    ELSE -> YYAction 646;
    CASE -> YYAction 647;
    OF -> YYAction 648;
    DERIVE -> YYAction 649;
    LET -> YYAction 650;
    IN -> YYAction 651;
    DO -> YYAction 652;
    FORALL -> YYAction 653;
    PRIVATE -> YYAction 654;
    PROTECTED -> YYAction 655;
    PUBLIC -> YYAction 656;
    PURE -> YYAction 657;
    THROWS -> YYAction 658;
    MUTABLE -> YYAction 659;
    INTCONST -> YYAction 660;
    STRCONST -> YYAction 661;
    LONGCONST -> YYAction 662;
    FLTCONST -> YYAction 663;
    DBLCONST -> YYAction 664;
    CHRCONST -> YYAction 665;
    ARROW -> YYAction 666;
    DCOLON -> YYAction 667;
    GETS -> YYAction 668;
    EARROW -> YYAction 669;
    DOTDOT -> YYAction 670;
    SOMEOP -> YYAction 671;
    INTERPRET -> YYAction 672;
    _ -> (YYAction yyErr);
  };
};
private yyaction702 t =   case yychar t of {
  '}' -> YYAction 711;
  _ -> (YYAction yyErr);
};
private yyaction703 t = YYAction (-47);
private yyaction704 t = YYAction (-112);
private yyaction705 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction706 t = YYAction (-314);
private yyaction707 t = YYAction (-313);
private yyaction708 t = YYAction (-315);
private yyaction709 t = YYAction (-318);
private yyaction710 t = YYAction (-116);
private yyaction711 t =   case yychar t of {
  '-' -> YYAction 673;
  ';' -> YYAction 674;
  '{' -> YYAction 675;
  '.' -> YYAction 677;
  '(' -> YYAction 678;
  ')' -> YYAction 679;
  ',' -> YYAction 680;
  '|' -> YYAction 681;
  '[' -> YYAction 682;
  ']' -> YYAction 683;
  '?' -> YYAction 684;
  '!' -> YYAction 685;
  '=' -> YYAction 686;
  '\\' -> YYAction 687;
  '}' -> YYAction (-113);
  _ ->   case yytoken t of {
    VARID -> YYAction 624;
    CONID -> YYAction 625;
    QVARID -> YYAction 626;
    QCONID -> YYAction 627;
    QUALIFIER -> YYAction 628;
    DOCUMENTATION -> YYAction 629;
    PACKAGE -> YYAction 630;
    IMPORT -> YYAction 631;
    INFIX -> YYAction 632;
    INFIXR -> YYAction 633;
    INFIXL -> YYAction 634;
    NATIVE -> YYAction 635;
    DATA -> YYAction 636;
    WHERE -> YYAction 637;
    CLASS -> YYAction 638;
    INSTANCE -> YYAction 639;
    ABSTRACT -> YYAction 640;
    TYPE -> YYAction 641;
    TRUE -> YYAction 642;
    FALSE -> YYAction 643;
    IF -> YYAction 644;
    THEN -> YYAction 645;
    ELSE -> YYAction 646;
    CASE -> YYAction 647;
    OF -> YYAction 648;
    DERIVE -> YYAction 649;
    LET -> YYAction 650;
    IN -> YYAction 651;
    DO -> YYAction 652;
    FORALL -> YYAction 653;
    PRIVATE -> YYAction 654;
    PROTECTED -> YYAction 655;
    PUBLIC -> YYAction 656;
    PURE -> YYAction 657;
    THROWS -> YYAction 658;
    MUTABLE -> YYAction 659;
    INTCONST -> YYAction 660;
    STRCONST -> YYAction 661;
    LONGCONST -> YYAction 662;
    FLTCONST -> YYAction 663;
    DBLCONST -> YYAction 664;
    CHRCONST -> YYAction 665;
    ARROW -> YYAction 666;
    DCOLON -> YYAction 667;
    GETS -> YYAction 668;
    EARROW -> YYAction 669;
    DOTDOT -> YYAction 670;
    SOMEOP -> YYAction 671;
    INTERPRET -> YYAction 672;
    _ -> (YYAction yyErr);
  };
};
private yyaction712 t = YYAction (-316);
private yyaction713 t = YYAction (-114);
private reduce1 =  \(a,d,p)\w\b     -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.return $ Program.Module (a,b,d) }
;
private reduce2 =  \(a,d,p)\w\_\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.return $ Program.Module (a,b,d) }
;
private reduce3 = \_\d -> d
;
private reduce4 = \e -> do {
                                YYM.return $ Program.Expression e}
;
private reduce5 =  \t -> Token.value t 
;
private reduce6 =  \t -> Token.value t 
;
private reduce7 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce8 =  \a\c   -> Token.value a ++ "." ++ c 
;
private reduce9 =  \x -> let s = Token.value x; i = length s - 1 in substr s 1 i 
;
private reduce10 =  \t     -> do {
                                                changeST Global.{sub <- SubSt.{
                                                    idKind <- insert (KeyTk t) (Left())}};
                                                YYM.return (Token.value t, yyline t) }
;
private reduce11 =  \a\_\(c,p) -> (repljavakws (Token.value a) ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce12 =  \a\(c,p)   -> (Token.value a ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce13 =  \(nm, pos) -> (magicPack nm, pos) 
;
private reduce14 =  Token.value 
;
private reduce15 =  \b\a   -> (Token.value b ++ "\n" ++ a) 
;
private reduce16 =  \b\_\a -> (Token.value b ++ "\n" ++ a) 
;
private reduce17 =  \docu\p\b   -> (fst b, Just docu, snd b) 
;
private reduce18 =  \p\b        -> (fst b, Nothing, snd b) 
;
private reduce19 =  \docu\p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.return (fst b, Just docu, snd b) }
;
private reduce20 =  \p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.return (fst b, Nothing, snd b) }
;
private reduce21 =  \p\vs\v\qs\_ -> do {
                                                     g <- getST;
                                                     let {clause = unwords vs};
                                                     let {expected = ["inline" , "inline candidates"]};
                                                     when (clause `notElem` expected) do {
                                                        yyerror (yyline v) (show (head expected) ++ " expected instead of " ++ show clause)
                                                     };
                                                     changeST Global.{sub <- SubSt.{
                                                            toExport = qs}};
                                                     YYM.return p;}
                                                 
;
private reduce22 =  Token.value 
;
private reduce23 =  single 
;
private reduce24 =  (:) 
;
private reduce25 =  const 1 
;
private reduce26 =  \_\n -> 1+n
;
private reduce28 =  const 
;
private reduce29 =  \a\_\b -> a ++ b 
;
private reduce30 =  single 
;
private reduce31 =  (:) 
;
private reduce34 =  \_\ds -> map (updVis Private) ds 
;
private reduce35 =  \_\ds -> map (updVis Protected) ds 
;
private reduce36 =  \_\ds -> map (updVis Public) ds 
;
private reduce37 =  \_\(d::Def) -> [d.{ctrs <- map updCtr}] 
;
private reduce38 =  single 
;
private reduce39 =  single 
;
private reduce40 =  single 
;
private reduce42 =  \_\m\t\i\js -> ModDcl {pos = yyline m, extends=t, implements=i, code=js }
;
private reduce43 =  Nothing 
;
private reduce44 =  \a\b -> Just b 
;
private reduce45 =  [] 
;
private reduce46 =  \_\taus -> taus 
;
private reduce47 =  \_\_\c\_ -> c  
;
private reduce48 =  \_\_\_   -> [] 
;
private reduce111 =  single 
;
private reduce112 =  (:) 
;
private reduce113 =  \a\b\c -> a:(b++[c]) 
;
private reduce114 =  \a\b\c\d -> (a:b)++(c:d) 
;
private reduce115 =  \a\b -> [a,b] 
;
private reduce116 =  \a\b\cs -> a:b:cs 
;
private reduce117 =  \t -> DocDcl {pos = yyline t, text = t.value}
;
private reduce118 =  single 
;
private reduce119 =  single 
;
private reduce120 =  single 
;
private reduce121 =  single 
;
private reduce122 =  single 
;
private reduce125 =  const 
;
private reduce126 =  \d\_\ds -> d ++ ds 
;
private reduce128 =  single 
;
private reduce131 =  \_\ds -> map (updVis Private) ds 
;
private reduce132 =  \_\ds -> map (updVis Protected) ds 
;
private reduce133 =  \_\ds -> map (updVis Public) ds 
;
private reduce134 =  single 
;
private reduce135 =  (:) 
;
private reduce140 =  const 
;
private reduce141 =  \ds1\_\ds2 -> ds1 ++ ds2 
;
private reduce142 =  \i\b\c -> ImpDcl {pos=snd b, pack=fst b, imports=c, as=Nothing} 
;
private reduce143 =  \i\p\a\c\l -> do
            when (Token.value a != "as") do
                yyerror (yyline a) (show "as" ++ " expected instead of " ++ show (Token.value a))
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.return ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce144 =  \i\p\c\l -> do
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.return ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce145 =  linkAll 
;
private reduce146 =  \v\_\is\_ -> do
            when ( v.value `notElem` [ "except", "excluding", "without", "auÃer", "ohne", "hiding" ]) do
                yyerror (yyline v) (show "hiding" ++ " expected instead of " ++ show v.value)
            YYM.return linkAll.{items=is}
        
;
private reduce147 =  \_\_    -> linkNone 
;
private reduce148 =  \_\is\_ -> linkNone.{items = is}  
;
private reduce149 =  \_\il   -> ImportList.{publik = true} il 
;
private reduce150 =  single 
;
private reduce151 =  \s\_ -> [s] 
;
private reduce152 =  liste  
;
private reduce153 =  \v        -> protoItem.{ name = v } 
;
private reduce154 =  \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} 
;
private reduce155 =  \v\_\_    -> protoItem.{ name = Simple v, members = Just []} 
;
private reduce156 =  \v        -> protoItem.{ name = v } 
;
private reduce157 =  \t        -> protoItem.{ name = opSname t } 
;
private reduce158 =  \v        -> protoItem.{ name = Simple v} 
;
private reduce159 =  \s      -> ImportItem.{alias = (enclosed . Token.value . SName.id . ImportItem.name) s} s
;
private reduce160 =  \s\a    -> ImportItem.{alias = enclosed (Token.value a)} s 
;
private reduce161 =  \_\s    -> ImportItem.export s 
;
private reduce162 =  \v     -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value v)} 
;
private reduce163 =  \v\a   -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value a)} 
;
private reduce164 =  \_\s   -> ImportItem.export s 
;
private reduce165 =  single 
;
private reduce166 =  \s\_ -> [s] 
;
private reduce167 =  liste  
;
private reduce170 =  \v -> do { op <- unqualified v; return op }
;
private reduce173 =  Token.{tokid = VARID} 
;
private reduce174 =  Token.{tokid = VARID} 
;
private reduce175 =  Token.{tokid = VARID} 
;
private reduce176 =  Token.{tokid = VARID} 
;
private reduce177 =  Token.{tokid = VARID} 
;
private reduce178 =  Token.{tokid = VARID} 
;
private reduce179 =  single 
;
private reduce180 =  liste  
;
private reduce181 =  \n\t\v     -> With2 n t v
;
private reduce182 =  \t\v       -> With1 t v
;
private reduce183 =  \v         -> Simple v 
;
private reduce184 =  \n\t\v     -> With2 n t v
;
private reduce185 =  \t\v       -> With1 t v
;
private reduce186 =  \v         -> Simple v 
;
private reduce189 =  \n\t\v     -> With2 n t v
;
private reduce190 =  \t\v       -> With1 t v
;
private reduce191 =  Simple  
;
private reduce192 =  opSname 
;
private reduce196 =  \f\i -> do
                                    t <- infixop (yyline i) NOP1 (Token.value i)
                                    YYM.return (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce197 =  \f\i -> do
                                    t <- infixop (yyline i) LOP1 (Token.value i)
                                    YYM.return (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce198 =  \f\i -> do
                                    t <- infixop (yyline i) ROP1 (Token.value i)
                                    YYM.return (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce199 =  Token.value 
;
private reduce200 =  Token.value 
;
private reduce201 =  Token.value 
;
private reduce202 =  single  
;
private reduce203 =  (:) 
;
private reduce204 =  \(def::Def)\o -> def.{ops = o}
;
private reduce205 =  \as\_\s -> map (annotation s) as 
;
private reduce207 =  \_\a\_ -> do unqualified a 
;
private reduce208 =  \_\a\_ -> a 
;
private reduce209 =  \_\a\_ -> a 
;
private reduce210 =  single   
;
private reduce211 =  liste    
;
private reduce212 =  \_\(d::Def) -> d.{isPure = true} 
;
private reduce214 =  flip const 
;
private reduce215 =  \_\b  -> do unqualified b 
;
private reduce216 =  \_\b  -> b 
;
private reduce217 =  \_\b  -> b 
;
private reduce218 =  \a\_\c -> (a, c) 
;
private reduce219 =  \a -> (a, [])    
;
private reduce220 =  single 
;
private reduce221 =  liste 
;
private reduce222 =  \item\col\t -> NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=item.value, txs=t, isPure=false, 
                                                doc=Nothing}
;
private reduce223 =  \item\j\col\t -> NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=j, txs=t, isPure=false, 
                                                doc=Nothing}
;
private reduce224 =  \item\o\col\t -> do {
                            o <- unqualified o;
                            YYM.return (NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=o.value, txs=t, isPure=false, 
                                                doc=Nothing})}
;
private reduce225 =  \item\o\col\t -> NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=Token.value o, txs=t, isPure=false, 
                                                doc=Nothing}
;
private reduce226 =  single 
;
private reduce227 =  (:)    
;
private reduce228 =  Token.value 
;
private reduce230 =  ForAll [] 
;
private reduce231 =  \_\bs\_\r      -> ForAll  [ (b,KVar) | b <- bs ]  r 
;
private reduce233 =  \dot -> do
                                        when (Token.value dot != "â¢") do
                                            yyerror (yyline dot)
                                                ("'.' expected instead of " ++ show dot.value)
                                        YYM.return dot
                                    
;
private reduce234 =  \tau\t\rho -> do
                                        context <- tauToCtx tau
                                        YYM.return (Rho.{context} rho)
                                     
;
private reduce236 =  RhoTau [] 
;
private reduce237 =  \a\_\b     -> case a of
                                            TSig s -> RhoFun [] s b 
                                            _ -> RhoFun [] (ForAll [] (RhoTau [] a)) b 
;
private reduce239 =  TSig 
;
private reduce240 =  \a\f\b ->  case a of
                            TSig s -> TSig (ForAll [] (RhoFun [] s (RhoTau [] b))) 
                            _      -> TApp (TApp (TCon (yyline f) (fromBase f.{tokid=CONID, value="->"})) a) b 
                         
;
private reduce241 =  single 
;
private reduce242 =  liste  
;
private reduce243 =  single 
;
private reduce244 =  liste  
;
private reduce245 =  \taus -> Tau.mkapp (head taus) (tail taus) 
;
private reduce247 =  \(tn::SName) -> TCon (yyline tn.id) tn
;
private reduce248 =  \_\t\_ -> t 
;
private reduce249 = \_\t\(c::Token)\ts\_ ->
                            let
                                tus = t:ts;
                                i = length tus;
                                tname = fromBase c.{tokid=CONID, value=tuple i}
                            in  (TCon (yyline c) tname).mkapp tus
                        
;
private reduce250 =  \_\t\e\ts\_ -> mkEither (yyline e) t ts 
;
private reduce251 = \a\t\_ -> TApp (TCon (yyline a)
                                             (fromBase a.{tokid=CONID, value="[]"}))
                                        t 
;
private reduce252 =  \n         -> TVar (yyline n) KVar (Token.value n)  
;
private reduce253 =  \_\n\_\k\_ -> TVar (yyline n) k    (Token.value n)  
;
private reduce255 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="[]"} 
;
private reduce256 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="()"} 
;
private reduce257 =  \(z::Token)\n\_ -> fromBase z.{tokid=CONID, value=tuple (n+1)} 
;
private reduce258 =  \_\(a::Token)\_ -> fromBase a.{tokid=CONID, value="->"} 
;
private reduce259 =  \a\_\c -> KApp a c 
;
private reduce261 =  \star -> do
                                let w = Token.value star
                                when  (w != "*") do
                                    yyerror (yyline star) 
                                            ("expected `*`, found `" ++ w ++ "`") 
                                return KType
                            
;
private reduce262 =  \v -> do
                                let w = Token.value v
                                if w == "generic" then return KGen
                                else do
                                    yyerror (yyline v) 
                                            ("expected `generic` instead of `" ++ w ++ "`")
                                    return KType
                            
;
private reduce263 =  \_\b\_ -> b 
;
private reduce264 =  \c\v -> Ctx {pos=Pos (SName.id c) v.pos.last, cname=c, tau=v} 
;
private reduce265 =  single 
;
private reduce266 =  \c\_ -> [c] 
;
private reduce267 =  liste  
;
private reduce268 =  single 
;
private reduce269 =  \_\x\_ -> x 
;
private reduce270 = 
        \_\ctxs\_\c\v\defs -> do
            sups <- classContext (Token.value c) ctxs (v::TauS).var
            return ClaDcl{
                    pos = yyline c, 
                    vis = Public,
                    name = Token.value c,
                    clvar = v,
                    supers = sups,
                    defs,
                    doc = Nothing}
    
;
private reduce271 = 
        \kw\ctxs\defs -> case ctxs of
            Ctx{pos,cname,tau}:rest -> do
                unless (null rest) 
                    (yyerror (yyline kw) "classname missing after contexts")
                when (SName.{ty?} cname)
                    (yyerror (yyline cname.id) "classname must not be qualified") 
                return ClaDcl {pos, vis = Public, name=cname.id.value,
                               clvar = tau, supers = [],
                               defs, doc = Nothing}
            _ -> Prelude.error "fatal: empty ccontext (cannot happen)" 
    
;
private reduce272 =  \c\t -> Ctx {pos=Pos (SName.id c) t.getpos.last, cname=c, tau=t} 
;
private reduce273 =  single 
;
private reduce274 =  \c\_ -> [c] 
;
private reduce275 =  liste  
;
private reduce276 =  single 
;
private reduce277 =  \_\x\_ -> x 
;
private reduce278 = 
        \ctxs\ea\cls\tau -> InsDcl {
            pos = yyline ea,
            vis = Public,
            clas = cls,
            typ = ForAll [] (RhoTau ctxs tau),
            defs = [],
            doc = Nothing}
    
;
private reduce279 = 
        \ctxs -> case ctxs of
            Ctx{pos, cname, tau}:rest -> do
                unless (null rest) 
                        (yyerror pos "classname missing after instance contexts")
                return InsDcl {
                    pos, vis = Public, clas = cname,
                    typ = ForAll [] (RhoTau [] tau),
                    defs = [],
                    doc = Nothing,
                    }
            _ -> Prelude.error "fatal: empty instance context"
    
;
private reduce280 = 
        \ins\head\defs -> (head::Def).{defs, pos = yyline ins}
    
;
private reduce281 =  
        \d\(i::Def) -> DrvDcl {pos = yyline d, vis = Public, clas=i.clas, typ=i.typ, doc=Nothing}
    
;
private reduce282 =  \def\defs -> (def::Def).{defs = defs} 
;
private reduce283 =  \_\_ -> (true, false)  
;
private reduce284 =  \_\_ -> (false, true)  
;
private reduce285 =  \_   -> (false, false) 
;
private reduce286 = 
        \dat\d\docu\pur\jt -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=[], defs=[], 
                                    isPure = fst pur, isMutable = snd pur, 
                                    doc=Nothing}
    
;
private reduce287 = 
        \dat\d\ds\docu\pur\jt -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=ds, defs=[], 
                                    isPure = fst pur, isMutable = snd pur,
                                    doc=Nothing}
    
;
private reduce288 = 
        \dat\d\ds\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                       vars=ds, ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce289 = 
        \dat\d\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    vars=[], ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce290 =  single 
;
private reduce291 =  (:) 
;
private reduce292 =  single 
;
private reduce293 =  liste  
;
private reduce295 =  \dc\doc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce296 =  \doc\dc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce298 =  \_\dc -> (dc::DConS).{vis = Public}    
;
private reduce299 =  \_\dc -> (dc::DConS).{vis = Private}   
;
private reduce300 =  \_\dc -> (dc::DConS).{vis = Protected} 
;
private reduce301 =  \_\dcon ->  DCon.{ -- strict=true,
                                                    flds <-map ConField.{strict=true}}  dcon 
;
private reduce302 =  \_\dcon ->  DCon.{ -- strict=false,
                                                    flds <-map ConField.{strict=false}} dcon 
;
private reduce304 =  \c        -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=[], doc=Nothing } 
;
private reduce305 =  \c\_\fs\_ -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce306 =  \c\fs     -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce307 =  \taus -> do
                                    g <- getST
                                    let field  = Field Position.null Nothing Nothing Public false
                                                    â¢ toSig
                                        toSig (TSig s) = s
                                        toSig tau      = (ForAll [] . RhoTau []) tau
                                    return (map field taus)
                                
;
private reduce308 =  single 
;
private reduce309 =  (:) 
;
private reduce311 =  const 
;
private reduce312 =  \cs\(d::Token) -> map ConField.{doc <- addDoc d.value} cs 
;
private reduce313 =  \as\c\ls -> as ++ ls 
;
private reduce314 =  \as\(d::Token)\ls -> map ConField.{doc <- addDoc d.value} as ++ ls 
;
private reduce315 =  \vs\_\t -> [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce316 =  \(d::String)\vs\_\t ->
                                        map ConField.{doc=Just d}
                                            [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce317 =  single 
;
private reduce318 =  liste  
;
private reduce320 =  \_ \(pos,name,vis,strict) -> (pos,name,Public, strict) 
;
private reduce321 =  \_ \(pos,name,vis,strict) -> (pos,name,Private,strict) 
;
private reduce323 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, true) 
;
private reduce324 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, false) 
;
private reduce325 =  \v -> do
                                    g <- getST
                                    return (yyline v, v.value, Public, false)
                                
;
private reduce326 =  \t\i   \_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=[], 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce327 =  \t\i\vs\_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=vs, 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce328 =  [] 
;
private reduce329 =  \_\_\_ -> []
;
private reduce330 =  \_\_\defs\_ -> defs
;
private reduce331 =  \_\_\_ -> []
;
private reduce332 =  \_\_\defs\_ -> defs
;
private reduce333 =  \(ex,pats)\eq\expr -> fundef ex pats expr 
;
private reduce334 =  \(ex,pats)\gds -> fungds ex pats gds 
;
private reduce335 =  \fdefs\defs ->
        case fdefs of
            [fd@FunDcl {expr=x}] -> YYM.return [fd.{expr = nx}] where
                                nx = Let defs x
            _ -> do
                yyerror (head fdefs).pos ("illegal function definition, where { ... } after annotation?")
                YYM.return fdefs
    
;
private reduce336 =  \x -> do
                                            x <- funhead x
                                            YYM.return x
                                    
;
private reduce337 =  \x ->  Lit (yyline x) LBool "true" 
;
private reduce338 =  \x ->  Lit (yyline x) LBool "false"
;
private reduce339 =  \x ->  do litchar x 
;
private reduce340 =  \x ->  Lit (yyline x) LString (Token.value x) 
;
private reduce341 =  \x ->  Lit (yyline x) LInt    (Token.value x) 
;
private reduce342 =  \x ->  Lit (yyline x) LBig    (bignum x)      
;
private reduce343 =  \x ->  Lit (yyline x) LLong   (Token.value x) 
;
private reduce344 =  \x ->  Lit (yyline x) LFloat  (Token.value x) 
;
private reduce345 =  \x ->  Lit (yyline x) LDouble (Token.value x) 
;
private reduce346 =  \x ->  do litregexp x 
;
private reduce351 =  \e\t\x -> do { (ex,pat) <- funhead e; YYM.return (Right (fundef ex pat x)) }
;
private reduce352 =  \_\_\ds\_ -> Right ds 
;
private reduce353 =  single 
;
private reduce354 =  liste  
;
private reduce355 =  (const . single) 
;
private reduce356 =  single 
;
private reduce357 =  (const . single) 
;
private reduce358 =  liste 
;
private reduce359 =  \e     ->  Left (Nothing, e) 
;
private reduce360 =  \p\g\e ->  Left (Just p,  e) 
;
private reduce361 =  single 
;
private reduce362 =  liste  
;
private reduce363 =  (const . single) 
;
private reduce364 =  \a\qs\_\x  -> (yyline a, qs, x) 
;
private reduce365 =  single 
;
private reduce366 =  (:) 
;
private reduce367 =  \p\a\e ->
                                        CAlt {pat=p, ex=e}
;
private reduce368 =  \p\gs -> guardedalt p gs
;
private reduce369 = \(calt::CAltS)\defs ->
                                        let
                                            nx = Let defs calt.ex;
                                        in calt.{ ex = nx } 
;
private reduce370 =  single 
;
private reduce371 =  liste  
;
private reduce372 =  \a\_    ->  [a] 
;
private reduce373 =  \_\ps\b  -> foldr (\p\x -> Lam p x false) b ps 
;
private reduce375 =  \_\x -> x 
;
private reduce376 =  \x\_\t  -> Ann {ex = x, typ=t} 
;
private reduce378 =  flip const 
;
private reduce380 =  flip const 
;
private reduce382 =  mkapp 
;
private reduce383 =  mkapp 
;
private reduce384 =  \m\x -> nApp (Vbl (contextName m "negate")) x
;
private reduce386 =  \_\c\_\t\_\e  -> Ifte c t e
;
private reduce387 =  \_\e\_\_\as\_ -> Case CNormal e as
;
private reduce388 =  \_\_\ds\_\_\e -> Let ds e
;
private reduce390 =  underscore 
;
private reduce392 =  nApp 
;
private reduce394 =  \u\p -> nApp (Vbl {name=Simple u}) p
;
private reduce395 =  single 
;
private reduce396 =  (:) 
;
private reduce397 =  With1 
;
private reduce398 =  With2 
;
private reduce400 =  \d\_\defs\_   -> do mkMonad (yyline d) defs 
;
private reduce401 =  \p\_\(v::Token) -> umem p v id
;
private reduce402 =  \p\_\v -> do {v <- unqualified v;
                                                    YYM.return (umem p v id)}
;
private reduce403 =  \p\_\v -> umem p v id
;
private reduce404 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("has$" ++)}) 
;
private reduce405 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("upd$" ++)}) 
;
private reduce406 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("chg$" ++)}) 
;
private reduce407 =  \q\(p::Token)\fs\_ -> let {
                        -- n   = Simple q;
                        flp = Vbl (wellKnown p "flip");
                        bul = Vbl (contextName p "â¢");
                        c []     = undefined;
                        c (f:fs) = fold cex (chup f) fs where {
                            cex x f = bul `nApp` x `nApp` chup f;
                            chup :: (Token, Bool, Exp) -> Exp;
                            chup (r, true, e)  = flp `nApp` Vbl  (q r.{value <- ("chg$"++)}) `nApp` e;
                            chup (r, false, e) = flp `nApp` Vbl  (q r.{value <- ("upd$"++)}) `nApp` e;
                                      }} in c fs 
;
private reduce408 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id
;
private reduce409 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id
;
private reduce410 = \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id
;
private reduce411 =  \x\(p::Token)\_\fs\_ ->
                                let {
                        u x [] = x;
                        u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                        u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                } in u x fs
;
private reduce412 =  \p\t\_\v\_  ->
                                        let elem = t.{tokid = VARID, value = "elemAt"}
                                        in Vbl {name=Simple elem}
                                            `nApp` p
                                            `nApp` v
;
private reduce413 =  \x   -> Vbl {name=x} 
;
private reduce415 =  \t   -> Vbl {name = Simple t.{tokid=VARID, value="_"}} 
;
private reduce416 =  \qc  -> Con {name=qc} 
;
private reduce417 =  \qc\_\z    -> ConFS {name=qc, fields=[]}
;
private reduce418 =  \qc\_\fs\z -> ConFS {name=qc, fields=fs}
;
private reduce419 =  \z\_   -> Con (fromBase z.{tokid=CONID, value="()"})
;
private reduce420 =  \z\n\_ -> Con (fromBase z.{tokid=CONID, value=tuple (n+1)})
;
private reduce421 =  \_\x\_ -> Vbl {name=Simple x} 
;
private reduce422 =  \_\o\_ -> (varcon o) (opSname o)
;
private reduce423 =  \_\m\_ -> (Vbl (fromBase m)) 
;
private reduce424 =  \z\o\x\_ ->  let -- (+1) --> flip (+) 1
                                        flp = Vbl (contextName z "flip") 
                                        op  = (varcon o) (opSname o)
                                        ex = nApp (nApp flp op) x
                                    in ex
;
private reduce425 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (opSname o)) x
;
private reduce426 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (Simple o)) x
;
private reduce427 =  \a\e\x\es\_ -> fold nApp (Con 
                                                                   (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
;
private reduce428 =  \a\e\(x::Token)\es\_ -> fold nApp (Vbl 
                                                                   (fromBase x.{tokid=VARID, value="strictTuple" ++ show (1+length es)})
                                                                    )
                                                              (e:es)
;
private reduce429 =  \_\x\_ -> Term x 
;
private reduce430 =  \a\z ->  Con (fromBase z.{tokid=CONID, value="[]"})
;
private reduce431 =  \b\es\z -> 
                                                foldr (\a\as -> nApp (nApp (Con (fromBase b.{tokid=CONID, value=":"})) a) as)
                                                       (Con (fromBase z.{tokid=CONID, value="[]"}))
                                                       es
;
private reduce432 =  \a\b\c\d   -> do mkEnumFrom   a b c d
;
private reduce433 =  \a\b\c\d\e -> do mkEnumFromTo a b c d e
;
private reduce434 =  \(a::Token)\e\b\qs\(z::Token) -> do {
                let {nil = z.{tokid=CONID, value="[]"}};
                listComprehension (yyline b) e qs
                                            (Con {name = fromBase nil})
                                    }
;
private reduce435 =  const 1 
;
private reduce436 =  ((+) . const 1) 
;
private reduce437 =  single 
;
private reduce438 =  \a\c\ls ->
                                        if elemBy (using fst) a ls then do {
                                                E.warn (yyline c) (msgdoc ("field `" ++ fst a
                                                    ++ "` should appear only once."));
                                                YYM.return ls
                                            } else
                                                YYM.return (a:ls)
                                    
;
private reduce439 =  (const . single) 
;
private reduce440 =  single 
;
private reduce441 =  liste  
;
private reduce442 =  (const . single) 
;
private reduce443 =  \s\_\x ->  (s, true,  x) 
;
private reduce444 =  \s\_\x ->  (s, false, x) 
;
private reduce445 =  \s     ->  (s, false, Vbl (Simple s)) 
;
private reduce446 =  \s\_\x ->  (Token.value s, x) 
;
private reduce447 =  \s     ->  (s.value, Vbl (Simple s)) 
;
private reduce448 =  single 
;
private reduce449 =  liste  
;
private reduce450 =  (const . single) 
;
private reduce451 =  single 
;
private reduce452 =  liste 
;
private reduce453 =  (const . single) 
;
yyrule 1 = "package: packageclause ';' definitions";
yyrule 2 = "package: packageclause WHERE '{' definitions '}'";
yyrule 3 = "package: INTERPRET script";
yyrule 4 = "script: expr";
yyrule 5 = "nativename: VARID";
yyrule 6 = "nativename: CONID";
yyrule 7 = "nativename: VARID '.' nativename";
yyrule 8 = "nativename: QUALIFIER nativename";
yyrule 9 = "nativename: STRCONST";
yyrule 10 = "packagename1: CONID";
yyrule 11 = "packagename1: varidkw '.' packagename1";
yyrule 12 = "packagename1: QUALIFIER packagename1";
yyrule 13 = "packagename: packagename1";
yyrule 14 = "docs: DOCUMENTATION";
yyrule 15 = "docs: DOCUMENTATION docs";
yyrule 16 = "docs: DOCUMENTATION semicoli docs";
yyrule 17 = "packageclause: docs PACKAGE packagename";
yyrule 18 = "packageclause: PACKAGE packagename";
yyrule 19 = "packageclause: docs PROTECTED PACKAGE packagename";
yyrule 20 = "packageclause: PROTECTED PACKAGE packagename";
yyrule 21 = "packageclause: packageclause words '(' qvarids ')'";
yyrule 22 = "word: VARID";
yyrule 23 = "words: word";
yyrule 24 = "words: word words";
yyrule 25 = "semicoli: ';'";
yyrule 26 = "semicoli: ';' semicoli";
yyrule 27 = "definitions: definition";
yyrule 28 = "definitions: definition semicoli";
yyrule 29 = "definitions: definition semicoli definitions";
yyrule 30 = "definition: documentation";
yyrule 31 = "definition: documentation definition";
yyrule 32 = "definition: topdefinition";
yyrule 33 = "definition: visibledefinition";
yyrule 34 = "visibledefinition: PRIVATE publicdefinition";
yyrule 35 = "visibledefinition: PROTECTED publicdefinition";
yyrule 36 = "visibledefinition: PUBLIC publicdefinition";
yyrule 37 = "visibledefinition: ABSTRACT datadef";
yyrule 38 = "topdefinition: import";
yyrule 39 = "topdefinition: infix";
yyrule 40 = "topdefinition: moduledefinition";
yyrule 41 = "topdefinition: publicdefinition";
yyrule 42 = "moduledefinition: NATIVE PACKAGE typeclause interfaces wheretokens";
yyrule 43 = "typeclause: <empty>";
yyrule 44 = "typeclause: TYPE tau";
yyrule 45 = "interfaces: <empty>";
yyrule 46 = "interfaces: CLASS tauSC";
yyrule 47 = "wheretokens: WHERE '{' jtokens '}'";
yyrule 48 = "wheretokens: WHERE '{' '}'";
yyrule 49 = "jtoken: VARID";
yyrule 50 = "jtoken: CONID";
yyrule 51 = "jtoken: QVARID";
yyrule 52 = "jtoken: QCONID";
yyrule 53 = "jtoken: QUALIFIER";
yyrule 54 = "jtoken: DOCUMENTATION";
yyrule 55 = "jtoken: PACKAGE";
yyrule 56 = "jtoken: IMPORT";
yyrule 57 = "jtoken: INFIX";
yyrule 58 = "jtoken: INFIXR";
yyrule 59 = "jtoken: INFIXL";
yyrule 60 = "jtoken: NATIVE";
yyrule 61 = "jtoken: DATA";
yyrule 62 = "jtoken: WHERE";
yyrule 63 = "jtoken: CLASS";
yyrule 64 = "jtoken: INSTANCE";
yyrule 65 = "jtoken: ABSTRACT";
yyrule 66 = "jtoken: TYPE";
yyrule 67 = "jtoken: TRUE";
yyrule 68 = "jtoken: FALSE";
yyrule 69 = "jtoken: IF";
yyrule 70 = "jtoken: THEN";
yyrule 71 = "jtoken: ELSE";
yyrule 72 = "jtoken: CASE";
yyrule 73 = "jtoken: OF";
yyrule 74 = "jtoken: DERIVE";
yyrule 75 = "jtoken: LET";
yyrule 76 = "jtoken: IN";
yyrule 77 = "jtoken: DO";
yyrule 78 = "jtoken: FORALL";
yyrule 79 = "jtoken: PRIVATE";
yyrule 80 = "jtoken: PROTECTED";
yyrule 81 = "jtoken: PUBLIC";
yyrule 82 = "jtoken: PURE";
yyrule 83 = "jtoken: THROWS";
yyrule 84 = "jtoken: MUTABLE";
yyrule 85 = "jtoken: INTCONST";
yyrule 86 = "jtoken: STRCONST";
yyrule 87 = "jtoken: LONGCONST";
yyrule 88 = "jtoken: FLTCONST";
yyrule 89 = "jtoken: DBLCONST";
yyrule 90 = "jtoken: CHRCONST";
yyrule 91 = "jtoken: ARROW";
yyrule 92 = "jtoken: DCOLON";
yyrule 93 = "jtoken: GETS";
yyrule 94 = "jtoken: EARROW";
yyrule 95 = "jtoken: DOTDOT";
yyrule 96 = "jtoken: SOMEOP";
yyrule 97 = "jtoken: INTERPRET";
yyrule 98 = "jtoken: ','";
yyrule 99 = "jtoken: '|'";
yyrule 100 = "jtoken: '['";
yyrule 101 = "jtoken: ']'";
yyrule 102 = "jtoken: '('";
yyrule 103 = "jtoken: ')'";
yyrule 104 = "jtoken: '.'";
yyrule 105 = "jtoken: '?'";
yyrule 106 = "jtoken: '-'";
yyrule 107 = "jtoken: ';'";
yyrule 108 = "jtoken: '!'";
yyrule 109 = "jtoken: '='";
yyrule 110 = "jtoken: '\\'";
yyrule 111 = "jtokens: jtoken";
yyrule 112 = "jtokens: jtoken jtokens";
yyrule 113 = "jtokens: '{' jtokens '}'";
yyrule 114 = "jtokens: '{' jtokens '}' jtokens";
yyrule 115 = "jtokens: '{' '}'";
yyrule 116 = "jtokens: '{' '}' jtokens";
yyrule 117 = "documentation: DOCUMENTATION";
yyrule 118 = "publicdefinition: typedef";
yyrule 119 = "publicdefinition: datadef";
yyrule 120 = "publicdefinition: classdef";
yyrule 121 = "publicdefinition: instdef";
yyrule 122 = "publicdefinition: derivedef";
yyrule 123 = "publicdefinition: localdef";
yyrule 124 = "localdefs: dplocaldef";
yyrule 125 = "localdefs: dplocaldef semicoli";
yyrule 126 = "localdefs: dplocaldef semicoli localdefs";
yyrule 127 = "localdef: annotation";
yyrule 128 = "localdef: nativedef";
yyrule 129 = "localdef: fundef";
yyrule 130 = "plocaldef: localdef";
yyrule 131 = "plocaldef: PRIVATE localdef";
yyrule 132 = "plocaldef: PROTECTED localdef";
yyrule 133 = "plocaldef: PUBLIC localdef";
yyrule 134 = "dplocaldef: documentation";
yyrule 135 = "dplocaldef: documentation dplocaldef";
yyrule 136 = "dplocaldef: plocaldef";
yyrule 137 = "letdef: annotation";
yyrule 138 = "letdef: fundef";
yyrule 139 = "letdefs: letdef";
yyrule 140 = "letdefs: letdef semicoli";
yyrule 141 = "letdefs: letdef semicoli letdefs";
yyrule 142 = "import: IMPORT packagename importliste";
yyrule 143 = "import: IMPORT packagename VARID CONID importliste";
yyrule 144 = "import: IMPORT packagename CONID importliste";
yyrule 145 = "importliste: <empty>";
yyrule 146 = "importliste: varid '(' importspecs ')'";
yyrule 147 = "importliste: '(' ')'";
yyrule 148 = "importliste: '(' importspecs ')'";
yyrule 149 = "importliste: PUBLIC importliste";
yyrule 150 = "importspecs: importspec";
yyrule 151 = "importspecs: importspec ','";
yyrule 152 = "importspecs: importspec ',' importspecs";
yyrule 153 = "importitem: qvarid";
yyrule 154 = "importitem: CONID '(' memspecs ')'";
yyrule 155 = "importitem: CONID '(' ')'";
yyrule 156 = "importitem: qconid";
yyrule 157 = "importitem: operator";
yyrule 158 = "importitem: unop";
yyrule 159 = "importspec: importitem";
yyrule 160 = "importspec: importitem alias";
yyrule 161 = "importspec: PUBLIC importspec";
yyrule 162 = "memspec: alias";
yyrule 163 = "memspec: alias alias";
yyrule 164 = "memspec: PUBLIC memspec";
yyrule 165 = "memspecs: memspec";
yyrule 166 = "memspecs: memspec ','";
yyrule 167 = "memspecs: memspec ',' memspecs";
yyrule 168 = "alias: VARID";
yyrule 169 = "alias: CONID";
yyrule 170 = "alias: operator";
yyrule 171 = "varid: VARID";
yyrule 172 = "varidkw: VARID";
yyrule 173 = "varidkw: DATA";
yyrule 174 = "varidkw: TYPE";
yyrule 175 = "varidkw: NATIVE";
yyrule 176 = "varidkw: PURE";
yyrule 177 = "varidkw: PACKAGE";
yyrule 178 = "varidkw: IMPORT";
yyrule 179 = "qvarids: qvarop";
yyrule 180 = "qvarids: qvarop ',' qvarids";
yyrule 181 = "qvarid: QUALIFIER QUALIFIER varop";
yyrule 182 = "qvarid: QUALIFIER varop";
yyrule 183 = "qvarid: VARID";
yyrule 184 = "qconid: QUALIFIER QUALIFIER CONID";
yyrule 185 = "qconid: QUALIFIER CONID";
yyrule 186 = "qconid: CONID";
yyrule 187 = "varop: VARID";
yyrule 188 = "varop: unop";
yyrule 189 = "qvarop: QUALIFIER QUALIFIER varop";
yyrule 190 = "qvarop: QUALIFIER varop";
yyrule 191 = "qvarop: varop";
yyrule 192 = "qvarop: operator";
yyrule 193 = "operator: SOMEOP";
yyrule 194 = "unop: '!'";
yyrule 195 = "unop: '?'";
yyrule 196 = "fixity: INFIX INTCONST";
yyrule 197 = "fixity: INFIXL INTCONST";
yyrule 198 = "fixity: INFIXR INTCONST";
yyrule 199 = "opstring: operator";
yyrule 200 = "opstring: VARID";
yyrule 201 = "opstring: '-'";
yyrule 202 = "operators: opstring";
yyrule 203 = "operators: opstring operators";
yyrule 204 = "infix: fixity operators";
yyrule 205 = "annotation: annoitems DCOLON sigma";
yyrule 206 = "annoitem: varid";
yyrule 207 = "annoitem: '(' operator ')'";
yyrule 208 = "annoitem: '(' unop ')'";
yyrule 209 = "annoitem: '(' '-' ')'";
yyrule 210 = "annoitems: annoitem";
yyrule 211 = "annoitems: annoitem ',' annoitems";
yyrule 212 = "nativedef: PURE impurenativedef";
yyrule 213 = "nativedef: impurenativedef";
yyrule 214 = "nativestart: NATIVE annoitem";
yyrule 215 = "nativestart: NATIVE operator";
yyrule 216 = "nativestart: NATIVE unop";
yyrule 217 = "nativestart: NATIVE '-'";
yyrule 218 = "sigex: sigma THROWS tauSC";
yyrule 219 = "sigex: sigma";
yyrule 220 = "sigexs: sigex";
yyrule 221 = "sigexs: sigex '|' sigexs";
yyrule 222 = "impurenativedef: nativestart DCOLON sigexs";
yyrule 223 = "impurenativedef: nativestart nativename DCOLON sigexs";
yyrule 224 = "impurenativedef: nativestart operator DCOLON sigexs";
yyrule 225 = "impurenativedef: nativestart unop DCOLON sigexs";
yyrule 226 = "boundvars: boundvar";
yyrule 227 = "boundvars: boundvar boundvars";
yyrule 228 = "boundvar: VARID";
yyrule 229 = "sigma: forall";
yyrule 230 = "sigma: rho";
yyrule 231 = "forall: FORALL boundvars mbdot rho";
yyrule 232 = "mbdot: '.'";
yyrule 233 = "mbdot: SOMEOP";
yyrule 234 = "rho: tapp EARROW rhofun";
yyrule 235 = "rho: rhofun";
yyrule 236 = "rhofun: tapp";
yyrule 237 = "rhofun: tapp ARROW rhofun";
yyrule 238 = "tau: tapp";
yyrule 239 = "tau: forall";
yyrule 240 = "tau: tapp ARROW tau";
yyrule 241 = "tauSC: tau";
yyrule 242 = "tauSC: tau ',' tauSC";
yyrule 243 = "tauSB: tau";
yyrule 244 = "tauSB: tau '|' tauSB";
yyrule 245 = "tapp: simpletypes";
yyrule 246 = "simpletype: tyvar";
yyrule 247 = "simpletype: tyname";
yyrule 248 = "simpletype: '(' tau ')'";
yyrule 249 = "simpletype: '(' tau ',' tauSC ')'";
yyrule 250 = "simpletype: '(' tau '|' tauSB ')'";
yyrule 251 = "simpletype: '[' tau ']'";
yyrule 252 = "tyvar: VARID";
yyrule 253 = "tyvar: '(' VARID DCOLON kind ')'";
yyrule 254 = "tyname: qconid";
yyrule 255 = "tyname: '[' ']'";
yyrule 256 = "tyname: '(' ')'";
yyrule 257 = "tyname: '(' commata ')'";
yyrule 258 = "tyname: '(' ARROW ')'";
yyrule 259 = "kind: simplekind ARROW kind";
yyrule 260 = "kind: simplekind";
yyrule 261 = "simplekind: SOMEOP";
yyrule 262 = "simplekind: VARID";
yyrule 263 = "simplekind: '(' kind ')'";
yyrule 264 = "scontext: qconid tyvar";
yyrule 265 = "scontexts: scontext";
yyrule 266 = "scontexts: scontext ','";
yyrule 267 = "scontexts: scontext ',' scontexts";
yyrule 268 = "ccontext: scontext";
yyrule 269 = "ccontext: '(' scontexts ')'";
yyrule 270 = "classdef: CLASS ccontext EARROW CONID tyvar wheredef";
yyrule 271 = "classdef: CLASS ccontext wheredef";
yyrule 272 = "sicontext: qconid simpletype";
yyrule 273 = "sicontexts: sicontext";
yyrule 274 = "sicontexts: sicontext ','";
yyrule 275 = "sicontexts: sicontext ',' sicontexts";
yyrule 276 = "icontext: sicontext";
yyrule 277 = "icontext: '(' sicontexts ')'";
yyrule 278 = "insthead: icontext EARROW tyname simpletype";
yyrule 279 = "insthead: icontext";
yyrule 280 = "instdef: INSTANCE insthead wheredef";
yyrule 281 = "derivedef: DERIVE insthead";
yyrule 282 = "datadef: datainit wheredef";
yyrule 283 = "nativepur: PURE NATIVE";
yyrule 284 = "nativepur: MUTABLE NATIVE";
yyrule 285 = "nativepur: NATIVE";
yyrule 286 = "datainit: DATA CONID '=' nativepur nativename";
yyrule 287 = "datainit: DATA CONID dvars '=' nativepur nativename";
yyrule 288 = "datainit: DATA CONID dvars '=' dalts";
yyrule 289 = "datainit: DATA CONID '=' dalts";
yyrule 290 = "dvars: tyvar";
yyrule 291 = "dvars: tyvar dvars";
yyrule 292 = "dalts: dalt";
yyrule 293 = "dalts: dalt '|' dalts";
yyrule 294 = "dalt: visdalt";
yyrule 295 = "dalt: visdalt DOCUMENTATION";
yyrule 296 = "dalt: DOCUMENTATION visdalt";
yyrule 297 = "visdalt: strictdalt";
yyrule 298 = "visdalt: PUBLIC strictdalt";
yyrule 299 = "visdalt: PRIVATE strictdalt";
yyrule 300 = "visdalt: PROTECTED strictdalt";
yyrule 301 = "strictdalt: '!' simpledalt";
yyrule 302 = "strictdalt: '?' simpledalt";
yyrule 303 = "strictdalt: simpledalt";
yyrule 304 = "simpledalt: CONID";
yyrule 305 = "simpledalt: CONID '{' conflds '}'";
yyrule 306 = "simpledalt: CONID contypes";
yyrule 307 = "contypes: simpletypes";
yyrule 308 = "simpletypes: simpletype";
yyrule 309 = "simpletypes: simpletype simpletypes";
yyrule 310 = "conflds: confld";
yyrule 311 = "conflds: confld ','";
yyrule 312 = "conflds: confld DOCUMENTATION";
yyrule 313 = "conflds: confld ',' conflds";
yyrule 314 = "conflds: confld DOCUMENTATION conflds";
yyrule 315 = "confld: fldids DCOLON sigma";
yyrule 316 = "confld: docs fldids DCOLON sigma";
yyrule 317 = "fldids: fldid";
yyrule 318 = "fldids: fldid ',' fldids";
yyrule 319 = "fldid: strictfldid";
yyrule 320 = "fldid: PUBLIC strictfldid";
yyrule 321 = "fldid: PRIVATE strictfldid";
yyrule 322 = "strictfldid: plainfldid";
yyrule 323 = "strictfldid: '!' plainfldid";
yyrule 324 = "strictfldid: '?' plainfldid";
yyrule 325 = "plainfldid: varid";
yyrule 326 = "typedef: TYPE CONID '=' sigma";
yyrule 327 = "typedef: TYPE CONID dvars '=' sigma";
yyrule 328 = "wheredef: <empty>";
yyrule 329 = "wheredef: WHERE '{' '}'";
yyrule 330 = "wheredef: WHERE '{' localdefs '}'";
yyrule 331 = "wherelet: WHERE '{' '}'";
yyrule 332 = "wherelet: WHERE '{' letdefs '}'";
yyrule 333 = "fundef: funhead '=' expr";
yyrule 334 = "fundef: funhead guards";
yyrule 335 = "fundef: fundef wherelet";
yyrule 336 = "funhead: binex";
yyrule 337 = "literal: TRUE";
yyrule 338 = "literal: FALSE";
yyrule 339 = "literal: CHRCONST";
yyrule 340 = "literal: STRCONST";
yyrule 341 = "literal: INTCONST";
yyrule 342 = "literal: BIGCONST";
yyrule 343 = "literal: LONGCONST";
yyrule 344 = "literal: FLTCONST";
yyrule 345 = "literal: DBLCONST";
yyrule 346 = "literal: REGEXP";
yyrule 347 = "pattern: expr";
yyrule 348 = "aeq: ARROW";
yyrule 349 = "aeq: '='";
yyrule 350 = "lcqual: gqual";
yyrule 351 = "lcqual: expr '=' expr";
yyrule 352 = "lcqual: LET '{' letdefs '}'";
yyrule 353 = "lcquals: lcqual";
yyrule 354 = "lcquals: lcqual ',' lcquals";
yyrule 355 = "lcquals: lcqual ','";
yyrule 356 = "dodefs: lcqual";
yyrule 357 = "dodefs: lcqual semicoli";
yyrule 358 = "dodefs: lcqual semicoli dodefs";
yyrule 359 = "gqual: expr";
yyrule 360 = "gqual: expr GETS expr";
yyrule 361 = "gquals: gqual";
yyrule 362 = "gquals: gqual ',' gquals";
yyrule 363 = "gquals: gqual ','";
yyrule 364 = "guard: '|' gquals aeq expr";
yyrule 365 = "guards: guard";
yyrule 366 = "guards: guard guards";
yyrule 367 = "calt: pattern aeq expr";
yyrule 368 = "calt: pattern guards";
yyrule 369 = "calt: calt wherelet";
yyrule 370 = "calts: calt";
yyrule 371 = "calts: calt ';' calts";
yyrule 372 = "calts: calt ';'";
yyrule 373 = "lambda: '\\' apats lambdabody";
yyrule 374 = "lambdabody: lambda";
yyrule 375 = "lambdabody: ARROW expr";
yyrule 376 = "expr: binex DCOLON sigma";
yyrule 377 = "expr: binex";
yyrule 378 = "thenx: ';' THEN";
yyrule 379 = "thenx: THEN";
yyrule 380 = "elsex: ';' ELSE";
yyrule 381 = "elsex: ELSE";
yyrule 382 = "binex: binex SOMEOP binex";
yyrule 383 = "binex: binex '-' binex";
yyrule 384 = "binex: '-' topex";
yyrule 385 = "binex: topex";
yyrule 386 = "topex: IF expr thenx expr elsex expr";
yyrule 387 = "topex: CASE expr OF '{' calts '}'";
yyrule 388 = "topex: LET '{' letdefs '}' IN expr";
yyrule 389 = "topex: lambda";
yyrule 390 = "topex: appex";
yyrule 391 = "appex: unex";
yyrule 392 = "appex: appex unex";
yyrule 393 = "unex: primary";
yyrule 394 = "unex: unop unex";
yyrule 395 = "apats: unex";
yyrule 396 = "apats: unex apats";
yyrule 397 = "qualifiers: QUALIFIER";
yyrule 398 = "qualifiers: QUALIFIER QUALIFIER";
yyrule 399 = "primary: term";
yyrule 400 = "primary: DO '{' dodefs '}'";
yyrule 401 = "primary: primary '.' VARID";
yyrule 402 = "primary: primary '.' operator";
yyrule 403 = "primary: primary '.' unop";
yyrule 404 = "primary: qualifiers '{' VARID '?' '}'";
yyrule 405 = "primary: qualifiers '{' VARID '=' '}'";
yyrule 406 = "primary: qualifiers '{' VARID GETS '}'";
yyrule 407 = "primary: qualifiers '{' getfields '}'";
yyrule 408 = "primary: primary '.' '{' VARID '?' '}'";
yyrule 409 = "primary: primary '.' '{' VARID '=' '}'";
yyrule 410 = "primary: primary '.' '{' VARID GETS '}'";
yyrule 411 = "primary: primary '.' '{' getfields '}'";
yyrule 412 = "primary: primary '.' '[' expr ']'";
yyrule 413 = "term: qvarid";
yyrule 414 = "term: literal";
yyrule 415 = "term: '_'";
yyrule 416 = "term: qconid";
yyrule 417 = "term: qconid '{' '}'";
yyrule 418 = "term: qconid '{' fields '}'";
yyrule 419 = "term: '(' ')'";
yyrule 420 = "term: '(' commata ')'";
yyrule 421 = "term: '(' unop ')'";
yyrule 422 = "term: '(' operator ')'";
yyrule 423 = "term: '(' '-' ')'";
yyrule 424 = "term: '(' operator expr ')'";
yyrule 425 = "term: '(' binex operator ')'";
yyrule 426 = "term: '(' binex '-' ')'";
yyrule 427 = "term: '(' expr ',' exprSC ')'";
yyrule 428 = "term: '(' expr ';' exprSS ')'";
yyrule 429 = "term: '(' expr ')'";
yyrule 430 = "term: '[' ']'";
yyrule 431 = "term: '[' exprSC ']'";
yyrule 432 = "term: '[' exprSC DOTDOT ']'";
yyrule 433 = "term: '[' exprSC DOTDOT expr ']'";
yyrule 434 = "term: '[' expr '|' lcquals ']'";
yyrule 435 = "commata: ','";
yyrule 436 = "commata: ',' commata";
yyrule 437 = "fields: field";
yyrule 438 = "fields: field ',' fields";
yyrule 439 = "fields: field ','";
yyrule 440 = "getfields: getfield";
yyrule 441 = "getfields: getfield ',' getfields";
yyrule 442 = "getfields: getfield ','";
yyrule 443 = "getfield: VARID GETS expr";
yyrule 444 = "getfield: VARID '=' expr";
yyrule 445 = "getfield: VARID";
yyrule 446 = "field: varid '=' expr";
yyrule 447 = "field: varid";
yyrule 448 = "exprSC: expr";
yyrule 449 = "exprSC: expr ',' exprSC";
yyrule 450 = "exprSC: expr ','";
yyrule 451 = "exprSS: expr";
yyrule 452 = "exprSS: expr ';' exprSS";
yyrule 453 = "exprSS: expr ';'";
yyrule _ = "<unknown rule>";

private yyprod1 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce1 yy1 yy2 yy3 ;YYM.return (YYNTpackage yyr, yyvs)};
private yyprod1 yyvals = yybadprod 1 yyvals;
private yyprod2 ((_, (YYTok yy5)):(_, (YYNTdefinitions yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce2 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTpackage yyr, yyvs)};
private yyprod2 yyvals = yybadprod 2 yyvals;
private yyprod3 ((_, (YYNTscript yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce3 yy1 yy2}; YYM.return (YYNTpackage yyr, yyvs)};
private yyprod3 yyvals = yybadprod 3 yyvals;
private yyprod4 ((_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce4 yy1 ;YYM.return (YYNTscript yyr, yyvs)};
private yyprod4 yyvals = yybadprod 4 yyvals;
private yyprod5 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce5 yy1}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod5 yyvals = yybadprod 5 yyvals;
private yyprod6 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce6 yy1}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod6 yyvals = yybadprod 6 yyvals;
private yyprod7 ((_, (YYNTnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce7 yy1 yy2 yy3}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod7 yyvals = yybadprod 7 yyvals;
private yyprod8 ((_, (YYNTnativename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce8 yy1 yy2}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod8 yyvals = yybadprod 8 yyvals;
private yyprod9 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce9 yy1}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod9 yyvals = yybadprod 9 yyvals;
private yyprod10 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce10 yy1 ;YYM.return (YYNTpackagename1 yyr, yyvs)};
private yyprod10 yyvals = yybadprod 10 yyvals;
private yyprod11 ((_, (YYNTpackagename1 yy3)):(_, (YYTok yy2)):(_, (YYNTvaridkw yy1)):yyvs) =  do { let {!yyr = reduce11 yy1 yy2 yy3}; YYM.return (YYNTpackagename1 yyr, yyvs)};
private yyprod11 yyvals = yybadprod 11 yyvals;
private yyprod12 ((_, (YYNTpackagename1 yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce12 yy1 yy2}; YYM.return (YYNTpackagename1 yyr, yyvs)};
private yyprod12 yyvals = yybadprod 12 yyvals;
private yyprod13 ((_, (YYNTpackagename1 yy1)):yyvs) =  do { let {!yyr = reduce13 yy1}; YYM.return (YYNTpackagename yyr, yyvs)};
private yyprod13 yyvals = yybadprod 13 yyvals;
private yyprod14 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce14 yy1}; YYM.return (YYNTdocs yyr, yyvs)};
private yyprod14 yyvals = yybadprod 14 yyvals;
private yyprod15 ((_, (YYNTdocs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce15 yy1 yy2}; YYM.return (YYNTdocs yyr, yyvs)};
private yyprod15 yyvals = yybadprod 15 yyvals;
private yyprod16 ((_, (YYNTdocs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce16 yy1 yy2 yy3}; YYM.return (YYNTdocs yyr, yyvs)};
private yyprod16 yyvals = yybadprod 16 yyvals;
private yyprod17 ((_, (YYNTpackagename yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce17 yy1 yy2 yy3}; YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod17 yyvals = yybadprod 17 yyvals;
private yyprod18 ((_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce18 yy1 yy2}; YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod18 yyvals = yybadprod 18 yyvals;
private yyprod19 ((_, (YYNTpackagename yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { yyr <- reduce19 yy1 yy2 yy3 yy4 ;YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod19 yyvals = yybadprod 19 yyvals;
private yyprod20 ((_, (YYNTpackagename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce20 yy1 yy2 yy3 ;YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod20 yyvals = yybadprod 20 yyvals;
private yyprod21 ((_, (YYTok yy5)):(_, (YYNTqvarids yy4)):(_, (YYTok yy3)):(_, (YYNTwords yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce21 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod21 yyvals = yybadprod 21 yyvals;
private yyprod22 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce22 yy1}; YYM.return (YYNTword yyr, yyvs)};
private yyprod22 yyvals = yybadprod 22 yyvals;
private yyprod23 ((_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce23 yy1}; YYM.return (YYNTwords yyr, yyvs)};
private yyprod23 yyvals = yybadprod 23 yyvals;
private yyprod24 ((_, (YYNTwords yy2)):(_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce24 yy1 yy2}; YYM.return (YYNTwords yyr, yyvs)};
private yyprod24 yyvals = yybadprod 24 yyvals;
private yyprod25 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce25 yy1}; YYM.return (YYNTsemicoli yyr, yyvs)};
private yyprod25 yyvals = yybadprod 25 yyvals;
private yyprod26 ((_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce26 yy1 yy2}; YYM.return (YYNTsemicoli yyr, yyvs)};
private yyprod26 yyvals = yybadprod 26 yyvals;
private yyprod27 ((_, (YYNTdefinition yy1)):yyvs) = YYM.return (YYNTdefinitions (yy1), yyvs);
private yyprod27 yyvals = yybadprod 27 yyvals;
private yyprod28 ((_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce28 yy1 yy2}; YYM.return (YYNTdefinitions yyr, yyvs)};
private yyprod28 yyvals = yybadprod 28 yyvals;
private yyprod29 ((_, (YYNTdefinitions yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce29 yy1 yy2 yy3}; YYM.return (YYNTdefinitions yyr, yyvs)};
private yyprod29 yyvals = yybadprod 29 yyvals;
private yyprod30 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce30 yy1}; YYM.return (YYNTdefinition yyr, yyvs)};
private yyprod30 yyvals = yybadprod 30 yyvals;
private yyprod31 ((_, (YYNTdefinition yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce31 yy1 yy2}; YYM.return (YYNTdefinition yyr, yyvs)};
private yyprod31 yyvals = yybadprod 31 yyvals;
private yyprod32 ((_, (YYNTtopdefinition yy1)):yyvs) = YYM.return (YYNTdefinition (yy1), yyvs);
private yyprod32 yyvals = yybadprod 32 yyvals;
private yyprod33 ((_, (YYNTvisibledefinition yy1)):yyvs) = YYM.return (YYNTdefinition (yy1), yyvs);
private yyprod33 yyvals = yybadprod 33 yyvals;
private yyprod34 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce34 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod34 yyvals = yybadprod 34 yyvals;
private yyprod35 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce35 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod35 yyvals = yybadprod 35 yyvals;
private yyprod36 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce36 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod36 yyvals = yybadprod 36 yyvals;
private yyprod37 ((_, (YYNTdatadef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce37 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod37 yyvals = yybadprod 37 yyvals;
private yyprod38 ((_, (YYNTimport yy1)):yyvs) =  do { let {!yyr = reduce38 yy1}; YYM.return (YYNTtopdefinition yyr, yyvs)};
private yyprod38 yyvals = yybadprod 38 yyvals;
private yyprod39 ((_, (YYNTinfix yy1)):yyvs) =  do { let {!yyr = reduce39 yy1}; YYM.return (YYNTtopdefinition yyr, yyvs)};
private yyprod39 yyvals = yybadprod 39 yyvals;
private yyprod40 ((_, (YYNTmoduledefinition yy1)):yyvs) =  do { let {!yyr = reduce40 yy1}; YYM.return (YYNTtopdefinition yyr, yyvs)};
private yyprod40 yyvals = yybadprod 40 yyvals;
private yyprod41 ((_, (YYNTpublicdefinition yy1)):yyvs) = YYM.return (YYNTtopdefinition (yy1), yyvs);
private yyprod41 yyvals = yybadprod 41 yyvals;
private yyprod42 ((_, (YYNTwheretokens yy5)):(_, (YYNTinterfaces yy4)):(_, (YYNTtypeclause yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce42 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTmoduledefinition yyr, yyvs)};
private yyprod42 yyvals = yybadprod 42 yyvals;
private yyprod43 yyvs =  do { let {!yyr = reduce43 }; YYM.return (YYNTtypeclause yyr, yyvs)};
private yyprod44 ((_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce44 yy1 yy2}; YYM.return (YYNTtypeclause yyr, yyvs)};
private yyprod44 yyvals = yybadprod 44 yyvals;
private yyprod45 yyvs =  do { let {!yyr = reduce45 }; YYM.return (YYNTinterfaces yyr, yyvs)};
private yyprod46 ((_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce46 yy1 yy2}; YYM.return (YYNTinterfaces yyr, yyvs)};
private yyprod46 yyvals = yybadprod 46 yyvals;
private yyprod47 ((_, (YYTok yy4)):(_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce47 yy1 yy2 yy3 yy4}; YYM.return (YYNTwheretokens yyr, yyvs)};
private yyprod47 yyvals = yybadprod 47 yyvals;
private yyprod48 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce48 yy1 yy2 yy3}; YYM.return (YYNTwheretokens yyr, yyvs)};
private yyprod48 yyvals = yybadprod 48 yyvals;
private yyprod49 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod49 yyvals = yybadprod 49 yyvals;
private yyprod50 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod50 yyvals = yybadprod 50 yyvals;
private yyprod51 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod51 yyvals = yybadprod 51 yyvals;
private yyprod52 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod52 yyvals = yybadprod 52 yyvals;
private yyprod53 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod53 yyvals = yybadprod 53 yyvals;
private yyprod54 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod54 yyvals = yybadprod 54 yyvals;
private yyprod55 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod55 yyvals = yybadprod 55 yyvals;
private yyprod56 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod56 yyvals = yybadprod 56 yyvals;
private yyprod57 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod57 yyvals = yybadprod 57 yyvals;
private yyprod58 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod58 yyvals = yybadprod 58 yyvals;
private yyprod59 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod59 yyvals = yybadprod 59 yyvals;
private yyprod60 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod60 yyvals = yybadprod 60 yyvals;
private yyprod61 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod61 yyvals = yybadprod 61 yyvals;
private yyprod62 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod62 yyvals = yybadprod 62 yyvals;
private yyprod63 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod63 yyvals = yybadprod 63 yyvals;
private yyprod64 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod64 yyvals = yybadprod 64 yyvals;
private yyprod65 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod65 yyvals = yybadprod 65 yyvals;
private yyprod66 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod66 yyvals = yybadprod 66 yyvals;
private yyprod67 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod67 yyvals = yybadprod 67 yyvals;
private yyprod68 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod68 yyvals = yybadprod 68 yyvals;
private yyprod69 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod69 yyvals = yybadprod 69 yyvals;
private yyprod70 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod70 yyvals = yybadprod 70 yyvals;
private yyprod71 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod71 yyvals = yybadprod 71 yyvals;
private yyprod72 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod72 yyvals = yybadprod 72 yyvals;
private yyprod73 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod73 yyvals = yybadprod 73 yyvals;
private yyprod74 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod74 yyvals = yybadprod 74 yyvals;
private yyprod75 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod75 yyvals = yybadprod 75 yyvals;
private yyprod76 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod76 yyvals = yybadprod 76 yyvals;
private yyprod77 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod77 yyvals = yybadprod 77 yyvals;
private yyprod78 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod78 yyvals = yybadprod 78 yyvals;
private yyprod79 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod79 yyvals = yybadprod 79 yyvals;
private yyprod80 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod80 yyvals = yybadprod 80 yyvals;
private yyprod81 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod81 yyvals = yybadprod 81 yyvals;
private yyprod82 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod82 yyvals = yybadprod 82 yyvals;
private yyprod83 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod83 yyvals = yybadprod 83 yyvals;
private yyprod84 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod84 yyvals = yybadprod 84 yyvals;
private yyprod85 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod85 yyvals = yybadprod 85 yyvals;
private yyprod86 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod86 yyvals = yybadprod 86 yyvals;
private yyprod87 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod87 yyvals = yybadprod 87 yyvals;
private yyprod88 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod88 yyvals = yybadprod 88 yyvals;
private yyprod89 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod89 yyvals = yybadprod 89 yyvals;
private yyprod90 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod90 yyvals = yybadprod 90 yyvals;
private yyprod91 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod91 yyvals = yybadprod 91 yyvals;
private yyprod92 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod92 yyvals = yybadprod 92 yyvals;
private yyprod93 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod93 yyvals = yybadprod 93 yyvals;
private yyprod94 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod94 yyvals = yybadprod 94 yyvals;
private yyprod95 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod95 yyvals = yybadprod 95 yyvals;
private yyprod96 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod96 yyvals = yybadprod 96 yyvals;
private yyprod97 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod97 yyvals = yybadprod 97 yyvals;
private yyprod98 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod98 yyvals = yybadprod 98 yyvals;
private yyprod99 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod99 yyvals = yybadprod 99 yyvals;
private yyprod100 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod100 yyvals = yybadprod 100 yyvals;
private yyprod101 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod101 yyvals = yybadprod 101 yyvals;
private yyprod102 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod102 yyvals = yybadprod 102 yyvals;
private yyprod103 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod103 yyvals = yybadprod 103 yyvals;
private yyprod104 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod104 yyvals = yybadprod 104 yyvals;
private yyprod105 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod105 yyvals = yybadprod 105 yyvals;
private yyprod106 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod106 yyvals = yybadprod 106 yyvals;
private yyprod107 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod107 yyvals = yybadprod 107 yyvals;
private yyprod108 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod108 yyvals = yybadprod 108 yyvals;
private yyprod109 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod109 yyvals = yybadprod 109 yyvals;
private yyprod110 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod110 yyvals = yybadprod 110 yyvals;
private yyprod111 ((_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce111 yy1}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod111 yyvals = yybadprod 111 yyvals;
private yyprod112 ((_, (YYNTjtokens yy2)):(_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce112 yy1 yy2}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod112 yyvals = yybadprod 112 yyvals;
private yyprod113 ((_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce113 yy1 yy2 yy3}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod113 yyvals = yybadprod 113 yyvals;
private yyprod114 ((_, (YYNTjtokens yy4)):(_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce114 yy1 yy2 yy3 yy4}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod114 yyvals = yybadprod 114 yyvals;
private yyprod115 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce115 yy1 yy2}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod115 yyvals = yybadprod 115 yyvals;
private yyprod116 ((_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce116 yy1 yy2 yy3}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod116 yyvals = yybadprod 116 yyvals;
private yyprod117 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce117 yy1}; YYM.return (YYNTdocumentation yyr, yyvs)};
private yyprod117 yyvals = yybadprod 117 yyvals;
private yyprod118 ((_, (YYNTtypedef yy1)):yyvs) =  do { let {!yyr = reduce118 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod118 yyvals = yybadprod 118 yyvals;
private yyprod119 ((_, (YYNTdatadef yy1)):yyvs) =  do { let {!yyr = reduce119 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod119 yyvals = yybadprod 119 yyvals;
private yyprod120 ((_, (YYNTclassdef yy1)):yyvs) =  do { let {!yyr = reduce120 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod120 yyvals = yybadprod 120 yyvals;
private yyprod121 ((_, (YYNTinstdef yy1)):yyvs) =  do { let {!yyr = reduce121 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod121 yyvals = yybadprod 121 yyvals;
private yyprod122 ((_, (YYNTderivedef yy1)):yyvs) =  do { let {!yyr = reduce122 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod122 yyvals = yybadprod 122 yyvals;
private yyprod123 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.return (YYNTpublicdefinition (yy1), yyvs);
private yyprod123 yyvals = yybadprod 123 yyvals;
private yyprod124 ((_, (YYNTdplocaldef yy1)):yyvs) = YYM.return (YYNTlocaldefs (yy1), yyvs);
private yyprod124 yyvals = yybadprod 124 yyvals;
private yyprod125 ((_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce125 yy1 yy2}; YYM.return (YYNTlocaldefs yyr, yyvs)};
private yyprod125 yyvals = yybadprod 125 yyvals;
private yyprod126 ((_, (YYNTlocaldefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce126 yy1 yy2 yy3}; YYM.return (YYNTlocaldefs yyr, yyvs)};
private yyprod126 yyvals = yybadprod 126 yyvals;
private yyprod127 ((_, (YYNTannotation yy1)):yyvs) = YYM.return (YYNTlocaldef (yy1), yyvs);
private yyprod127 yyvals = yybadprod 127 yyvals;
private yyprod128 ((_, (YYNTnativedef yy1)):yyvs) =  do { let {!yyr = reduce128 yy1}; YYM.return (YYNTlocaldef yyr, yyvs)};
private yyprod128 yyvals = yybadprod 128 yyvals;
private yyprod129 ((_, (YYNTfundef yy1)):yyvs) = YYM.return (YYNTlocaldef (yy1), yyvs);
private yyprod129 yyvals = yybadprod 129 yyvals;
private yyprod130 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.return (YYNTplocaldef (yy1), yyvs);
private yyprod130 yyvals = yybadprod 130 yyvals;
private yyprod131 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce131 yy1 yy2}; YYM.return (YYNTplocaldef yyr, yyvs)};
private yyprod131 yyvals = yybadprod 131 yyvals;
private yyprod132 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce132 yy1 yy2}; YYM.return (YYNTplocaldef yyr, yyvs)};
private yyprod132 yyvals = yybadprod 132 yyvals;
private yyprod133 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce133 yy1 yy2}; YYM.return (YYNTplocaldef yyr, yyvs)};
private yyprod133 yyvals = yybadprod 133 yyvals;
private yyprod134 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce134 yy1}; YYM.return (YYNTdplocaldef yyr, yyvs)};
private yyprod134 yyvals = yybadprod 134 yyvals;
private yyprod135 ((_, (YYNTdplocaldef yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce135 yy1 yy2}; YYM.return (YYNTdplocaldef yyr, yyvs)};
private yyprod135 yyvals = yybadprod 135 yyvals;
private yyprod136 ((_, (YYNTplocaldef yy1)):yyvs) = YYM.return (YYNTdplocaldef (yy1), yyvs);
private yyprod136 yyvals = yybadprod 136 yyvals;
private yyprod137 ((_, (YYNTannotation yy1)):yyvs) = YYM.return (YYNTletdef (yy1), yyvs);
private yyprod137 yyvals = yybadprod 137 yyvals;
private yyprod138 ((_, (YYNTfundef yy1)):yyvs) = YYM.return (YYNTletdef (yy1), yyvs);
private yyprod138 yyvals = yybadprod 138 yyvals;
private yyprod139 ((_, (YYNTletdef yy1)):yyvs) = YYM.return (YYNTletdefs (yy1), yyvs);
private yyprod139 yyvals = yybadprod 139 yyvals;
private yyprod140 ((_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce140 yy1 yy2}; YYM.return (YYNTletdefs yyr, yyvs)};
private yyprod140 yyvals = yybadprod 140 yyvals;
private yyprod141 ((_, (YYNTletdefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce141 yy1 yy2 yy3}; YYM.return (YYNTletdefs yyr, yyvs)};
private yyprod141 yyvals = yybadprod 141 yyvals;
private yyprod142 ((_, (YYNTimportliste yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce142 yy1 yy2 yy3}; YYM.return (YYNTimport yyr, yyvs)};
private yyprod142 yyvals = yybadprod 142 yyvals;
private yyprod143 ((_, (YYNTimportliste yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce143 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTimport yyr, yyvs)};
private yyprod143 yyvals = yybadprod 143 yyvals;
private yyprod144 ((_, (YYNTimportliste yy4)):(_, (YYTok yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce144 yy1 yy2 yy3 yy4 ;YYM.return (YYNTimport yyr, yyvs)};
private yyprod144 yyvals = yybadprod 144 yyvals;
private yyprod145 yyvs =  do { let {!yyr = reduce145 }; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod146 ((_, (YYTok yy4)):(_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce146 yy1 yy2 yy3 yy4 ;YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod146 yyvals = yybadprod 146 yyvals;
private yyprod147 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce147 yy1 yy2}; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod147 yyvals = yybadprod 147 yyvals;
private yyprod148 ((_, (YYTok yy3)):(_, (YYNTimportspecs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce148 yy1 yy2 yy3}; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod148 yyvals = yybadprod 148 yyvals;
private yyprod149 ((_, (YYNTimportliste yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce149 yy1 yy2}; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod149 yyvals = yybadprod 149 yyvals;
private yyprod150 ((_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce150 yy1}; YYM.return (YYNTimportspecs yyr, yyvs)};
private yyprod150 yyvals = yybadprod 150 yyvals;
private yyprod151 ((_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce151 yy1 yy2}; YYM.return (YYNTimportspecs yyr, yyvs)};
private yyprod151 yyvals = yybadprod 151 yyvals;
private yyprod152 ((_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce152 yy1 yy2 yy3}; YYM.return (YYNTimportspecs yyr, yyvs)};
private yyprod152 yyvals = yybadprod 152 yyvals;
private yyprod153 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce153 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod153 yyvals = yybadprod 153 yyvals;
private yyprod154 ((_, (YYTok yy4)):(_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce154 yy1 yy2 yy3 yy4}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod154 yyvals = yybadprod 154 yyvals;
private yyprod155 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce155 yy1 yy2 yy3}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod155 yyvals = yybadprod 155 yyvals;
private yyprod156 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce156 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod156 yyvals = yybadprod 156 yyvals;
private yyprod157 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce157 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod157 yyvals = yybadprod 157 yyvals;
private yyprod158 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce158 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod158 yyvals = yybadprod 158 yyvals;
private yyprod159 ((_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce159 yy1}; YYM.return (YYNTimportspec yyr, yyvs)};
private yyprod159 yyvals = yybadprod 159 yyvals;
private yyprod160 ((_, (YYNTalias yy2)):(_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce160 yy1 yy2}; YYM.return (YYNTimportspec yyr, yyvs)};
private yyprod160 yyvals = yybadprod 160 yyvals;
private yyprod161 ((_, (YYNTimportspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce161 yy1 yy2}; YYM.return (YYNTimportspec yyr, yyvs)};
private yyprod161 yyvals = yybadprod 161 yyvals;
private yyprod162 ((_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce162 yy1}; YYM.return (YYNTmemspec yyr, yyvs)};
private yyprod162 yyvals = yybadprod 162 yyvals;
private yyprod163 ((_, (YYNTalias yy2)):(_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce163 yy1 yy2}; YYM.return (YYNTmemspec yyr, yyvs)};
private yyprod163 yyvals = yybadprod 163 yyvals;
private yyprod164 ((_, (YYNTmemspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce164 yy1 yy2}; YYM.return (YYNTmemspec yyr, yyvs)};
private yyprod164 yyvals = yybadprod 164 yyvals;
private yyprod165 ((_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce165 yy1}; YYM.return (YYNTmemspecs yyr, yyvs)};
private yyprod165 yyvals = yybadprod 165 yyvals;
private yyprod166 ((_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce166 yy1 yy2}; YYM.return (YYNTmemspecs yyr, yyvs)};
private yyprod166 yyvals = yybadprod 166 yyvals;
private yyprod167 ((_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce167 yy1 yy2 yy3}; YYM.return (YYNTmemspecs yyr, yyvs)};
private yyprod167 yyvals = yybadprod 167 yyvals;
private yyprod168 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTalias (yy1), yyvs);
private yyprod168 yyvals = yybadprod 168 yyvals;
private yyprod169 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTalias (yy1), yyvs);
private yyprod169 yyvals = yybadprod 169 yyvals;
private yyprod170 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce170 yy1 ;YYM.return (YYNTalias yyr, yyvs)};
private yyprod170 yyvals = yybadprod 170 yyvals;
private yyprod171 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTvarid (yy1), yyvs);
private yyprod171 yyvals = yybadprod 171 yyvals;
private yyprod172 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTvaridkw (yy1), yyvs);
private yyprod172 yyvals = yybadprod 172 yyvals;
private yyprod173 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce173 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod173 yyvals = yybadprod 173 yyvals;
private yyprod174 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce174 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod174 yyvals = yybadprod 174 yyvals;
private yyprod175 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce175 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod175 yyvals = yybadprod 175 yyvals;
private yyprod176 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce176 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod176 yyvals = yybadprod 176 yyvals;
private yyprod177 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce177 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod177 yyvals = yybadprod 177 yyvals;
private yyprod178 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce178 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod178 yyvals = yybadprod 178 yyvals;
private yyprod179 ((_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce179 yy1}; YYM.return (YYNTqvarids yyr, yyvs)};
private yyprod179 yyvals = yybadprod 179 yyvals;
private yyprod180 ((_, (YYNTqvarids yy3)):(_, (YYTok yy2)):(_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce180 yy1 yy2 yy3}; YYM.return (YYNTqvarids yyr, yyvs)};
private yyprod180 yyvals = yybadprod 180 yyvals;
private yyprod181 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce181 yy1 yy2 yy3}; YYM.return (YYNTqvarid yyr, yyvs)};
private yyprod181 yyvals = yybadprod 181 yyvals;
private yyprod182 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce182 yy1 yy2}; YYM.return (YYNTqvarid yyr, yyvs)};
private yyprod182 yyvals = yybadprod 182 yyvals;
private yyprod183 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce183 yy1}; YYM.return (YYNTqvarid yyr, yyvs)};
private yyprod183 yyvals = yybadprod 183 yyvals;
private yyprod184 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce184 yy1 yy2 yy3}; YYM.return (YYNTqconid yyr, yyvs)};
private yyprod184 yyvals = yybadprod 184 yyvals;
private yyprod185 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce185 yy1 yy2}; YYM.return (YYNTqconid yyr, yyvs)};
private yyprod185 yyvals = yybadprod 185 yyvals;
private yyprod186 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce186 yy1}; YYM.return (YYNTqconid yyr, yyvs)};
private yyprod186 yyvals = yybadprod 186 yyvals;
private yyprod187 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTvarop (yy1), yyvs);
private yyprod187 yyvals = yybadprod 187 yyvals;
private yyprod188 ((_, (YYNTunop yy1)):yyvs) = YYM.return (YYNTvarop (yy1), yyvs);
private yyprod188 yyvals = yybadprod 188 yyvals;
private yyprod189 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce189 yy1 yy2 yy3}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod189 yyvals = yybadprod 189 yyvals;
private yyprod190 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce190 yy1 yy2}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod190 yyvals = yybadprod 190 yyvals;
private yyprod191 ((_, (YYNTvarop yy1)):yyvs) =  do { let {!yyr = reduce191 yy1}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod191 yyvals = yybadprod 191 yyvals;
private yyprod192 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce192 yy1}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod192 yyvals = yybadprod 192 yyvals;
private yyprod193 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNToperator (yy1), yyvs);
private yyprod193 yyvals = yybadprod 193 yyvals;
private yyprod194 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTunop (yy1), yyvs);
private yyprod194 yyvals = yybadprod 194 yyvals;
private yyprod195 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTunop (yy1), yyvs);
private yyprod195 yyvals = yybadprod 195 yyvals;
private yyprod196 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce196 yy1 yy2 ;YYM.return (YYNTfixity yyr, yyvs)};
private yyprod196 yyvals = yybadprod 196 yyvals;
private yyprod197 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce197 yy1 yy2 ;YYM.return (YYNTfixity yyr, yyvs)};
private yyprod197 yyvals = yybadprod 197 yyvals;
private yyprod198 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce198 yy1 yy2 ;YYM.return (YYNTfixity yyr, yyvs)};
private yyprod198 yyvals = yybadprod 198 yyvals;
private yyprod199 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce199 yy1}; YYM.return (YYNTopstring yyr, yyvs)};
private yyprod199 yyvals = yybadprod 199 yyvals;
private yyprod200 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce200 yy1}; YYM.return (YYNTopstring yyr, yyvs)};
private yyprod200 yyvals = yybadprod 200 yyvals;
private yyprod201 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce201 yy1}; YYM.return (YYNTopstring yyr, yyvs)};
private yyprod201 yyvals = yybadprod 201 yyvals;
private yyprod202 ((_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce202 yy1}; YYM.return (YYNToperators yyr, yyvs)};
private yyprod202 yyvals = yybadprod 202 yyvals;
private yyprod203 ((_, (YYNToperators yy2)):(_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce203 yy1 yy2}; YYM.return (YYNToperators yyr, yyvs)};
private yyprod203 yyvals = yybadprod 203 yyvals;
private yyprod204 ((_, (YYNToperators yy2)):(_, (YYNTfixity yy1)):yyvs) =  do { let {!yyr = reduce204 yy1 yy2}; YYM.return (YYNTinfix yyr, yyvs)};
private yyprod204 yyvals = yybadprod 204 yyvals;
private yyprod205 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTannoitems yy1)):yyvs) =  do { let {!yyr = reduce205 yy1 yy2 yy3}; YYM.return (YYNTannotation yyr, yyvs)};
private yyprod205 yyvals = yybadprod 205 yyvals;
private yyprod206 ((_, (YYNTvarid yy1)):yyvs) = YYM.return (YYNTannoitem (yy1), yyvs);
private yyprod206 yyvals = yybadprod 206 yyvals;
private yyprod207 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce207 yy1 yy2 yy3 ;YYM.return (YYNTannoitem yyr, yyvs)};
private yyprod207 yyvals = yybadprod 207 yyvals;
private yyprod208 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce208 yy1 yy2 yy3}; YYM.return (YYNTannoitem yyr, yyvs)};
private yyprod208 yyvals = yybadprod 208 yyvals;
private yyprod209 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce209 yy1 yy2 yy3}; YYM.return (YYNTannoitem yyr, yyvs)};
private yyprod209 yyvals = yybadprod 209 yyvals;
private yyprod210 ((_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce210 yy1}; YYM.return (YYNTannoitems yyr, yyvs)};
private yyprod210 yyvals = yybadprod 210 yyvals;
private yyprod211 ((_, (YYNTannoitems yy3)):(_, (YYTok yy2)):(_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce211 yy1 yy2 yy3}; YYM.return (YYNTannoitems yyr, yyvs)};
private yyprod211 yyvals = yybadprod 211 yyvals;
private yyprod212 ((_, (YYNTimpurenativedef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce212 yy1 yy2}; YYM.return (YYNTnativedef yyr, yyvs)};
private yyprod212 yyvals = yybadprod 212 yyvals;
private yyprod213 ((_, (YYNTimpurenativedef yy1)):yyvs) = YYM.return (YYNTnativedef (yy1), yyvs);
private yyprod213 yyvals = yybadprod 213 yyvals;
private yyprod214 ((_, (YYNTannoitem yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce214 yy1 yy2}; YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod214 yyvals = yybadprod 214 yyvals;
private yyprod215 ((_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce215 yy1 yy2 ;YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod215 yyvals = yybadprod 215 yyvals;
private yyprod216 ((_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce216 yy1 yy2}; YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod216 yyvals = yybadprod 216 yyvals;
private yyprod217 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce217 yy1 yy2}; YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod217 yyvals = yybadprod 217 yyvals;
private yyprod218 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce218 yy1 yy2 yy3}; YYM.return (YYNTsigex yyr, yyvs)};
private yyprod218 yyvals = yybadprod 218 yyvals;
private yyprod219 ((_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce219 yy1}; YYM.return (YYNTsigex yyr, yyvs)};
private yyprod219 yyvals = yybadprod 219 yyvals;
private yyprod220 ((_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce220 yy1}; YYM.return (YYNTsigexs yyr, yyvs)};
private yyprod220 yyvals = yybadprod 220 yyvals;
private yyprod221 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce221 yy1 yy2 yy3}; YYM.return (YYNTsigexs yyr, yyvs)};
private yyprod221 yyvals = yybadprod 221 yyvals;
private yyprod222 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { let {!yyr = reduce222 yy1 yy2 yy3}; YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod222 yyvals = yybadprod 222 yyvals;
private yyprod223 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTnativename yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { let {!yyr = reduce223 yy1 yy2 yy3 yy4}; YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod223 yyvals = yybadprod 223 yyvals;
private yyprod224 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { yyr <- reduce224 yy1 yy2 yy3 yy4 ;YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod224 yyvals = yybadprod 224 yyvals;
private yyprod225 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { let {!yyr = reduce225 yy1 yy2 yy3 yy4}; YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod225 yyvals = yybadprod 225 yyvals;
private yyprod226 ((_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce226 yy1}; YYM.return (YYNTboundvars yyr, yyvs)};
private yyprod226 yyvals = yybadprod 226 yyvals;
private yyprod227 ((_, (YYNTboundvars yy2)):(_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce227 yy1 yy2}; YYM.return (YYNTboundvars yyr, yyvs)};
private yyprod227 yyvals = yybadprod 227 yyvals;
private yyprod228 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce228 yy1}; YYM.return (YYNTboundvar yyr, yyvs)};
private yyprod228 yyvals = yybadprod 228 yyvals;
private yyprod229 ((_, (YYNTforall yy1)):yyvs) = YYM.return (YYNTsigma (yy1), yyvs);
private yyprod229 yyvals = yybadprod 229 yyvals;
private yyprod230 ((_, (YYNTrho yy1)):yyvs) =  do { let {!yyr = reduce230 yy1}; YYM.return (YYNTsigma yyr, yyvs)};
private yyprod230 yyvals = yybadprod 230 yyvals;
private yyprod231 ((_, (YYNTrho yy4)):(_, (YYNTmbdot yy3)):(_, (YYNTboundvars yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce231 yy1 yy2 yy3 yy4}; YYM.return (YYNTforall yyr, yyvs)};
private yyprod231 yyvals = yybadprod 231 yyvals;
private yyprod232 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTmbdot (yy1), yyvs);
private yyprod232 yyvals = yybadprod 232 yyvals;
private yyprod233 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce233 yy1 ;YYM.return (YYNTmbdot yyr, yyvs)};
private yyprod233 yyvals = yybadprod 233 yyvals;
private yyprod234 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { yyr <- reduce234 yy1 yy2 yy3 ;YYM.return (YYNTrho yyr, yyvs)};
private yyprod234 yyvals = yybadprod 234 yyvals;
private yyprod235 ((_, (YYNTrhofun yy1)):yyvs) = YYM.return (YYNTrho (yy1), yyvs);
private yyprod235 yyvals = yybadprod 235 yyvals;
private yyprod236 ((_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce236 yy1}; YYM.return (YYNTrhofun yyr, yyvs)};
private yyprod236 yyvals = yybadprod 236 yyvals;
private yyprod237 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce237 yy1 yy2 yy3}; YYM.return (YYNTrhofun yyr, yyvs)};
private yyprod237 yyvals = yybadprod 237 yyvals;
private yyprod238 ((_, (YYNTtapp yy1)):yyvs) = YYM.return (YYNTtau (yy1), yyvs);
private yyprod238 yyvals = yybadprod 238 yyvals;
private yyprod239 ((_, (YYNTforall yy1)):yyvs) =  do { let {!yyr = reduce239 yy1}; YYM.return (YYNTtau yyr, yyvs)};
private yyprod239 yyvals = yybadprod 239 yyvals;
private yyprod240 ((_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce240 yy1 yy2 yy3}; YYM.return (YYNTtau yyr, yyvs)};
private yyprod240 yyvals = yybadprod 240 yyvals;
private yyprod241 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce241 yy1}; YYM.return (YYNTtauSC yyr, yyvs)};
private yyprod241 yyvals = yybadprod 241 yyvals;
private yyprod242 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce242 yy1 yy2 yy3}; YYM.return (YYNTtauSC yyr, yyvs)};
private yyprod242 yyvals = yybadprod 242 yyvals;
private yyprod243 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce243 yy1}; YYM.return (YYNTtauSB yyr, yyvs)};
private yyprod243 yyvals = yybadprod 243 yyvals;
private yyprod244 ((_, (YYNTtauSB yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce244 yy1 yy2 yy3}; YYM.return (YYNTtauSB yyr, yyvs)};
private yyprod244 yyvals = yybadprod 244 yyvals;
private yyprod245 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { let {!yyr = reduce245 yy1}; YYM.return (YYNTtapp yyr, yyvs)};
private yyprod245 yyvals = yybadprod 245 yyvals;
private yyprod246 ((_, (YYNTtyvar yy1)):yyvs) = YYM.return (YYNTsimpletype (yy1), yyvs);
private yyprod246 yyvals = yybadprod 246 yyvals;
private yyprod247 ((_, (YYNTtyname yy1)):yyvs) =  do { let {!yyr = reduce247 yy1}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod247 yyvals = yybadprod 247 yyvals;
private yyprod248 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce248 yy1 yy2 yy3}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod248 yyvals = yybadprod 248 yyvals;
private yyprod249 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce249 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod249 yyvals = yybadprod 249 yyvals;
private yyprod250 ((_, (YYTok yy5)):(_, (YYNTtauSB yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce250 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod250 yyvals = yybadprod 250 yyvals;
private yyprod251 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce251 yy1 yy2 yy3}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod251 yyvals = yybadprod 251 yyvals;
private yyprod252 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce252 yy1}; YYM.return (YYNTtyvar yyr, yyvs)};
private yyprod252 yyvals = yybadprod 252 yyvals;
private yyprod253 ((_, (YYTok yy5)):(_, (YYNTkind yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce253 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTtyvar yyr, yyvs)};
private yyprod253 yyvals = yybadprod 253 yyvals;
private yyprod254 ((_, (YYNTqconid yy1)):yyvs) = YYM.return (YYNTtyname (yy1), yyvs);
private yyprod254 yyvals = yybadprod 254 yyvals;
private yyprod255 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce255 yy1 yy2}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod255 yyvals = yybadprod 255 yyvals;
private yyprod256 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce256 yy1 yy2}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod256 yyvals = yybadprod 256 yyvals;
private yyprod257 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce257 yy1 yy2 yy3}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod257 yyvals = yybadprod 257 yyvals;
private yyprod258 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce258 yy1 yy2 yy3}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod258 yyvals = yybadprod 258 yyvals;
private yyprod259 ((_, (YYNTkind yy3)):(_, (YYTok yy2)):(_, (YYNTsimplekind yy1)):yyvs) =  do { let {!yyr = reduce259 yy1 yy2 yy3}; YYM.return (YYNTkind yyr, yyvs)};
private yyprod259 yyvals = yybadprod 259 yyvals;
private yyprod260 ((_, (YYNTsimplekind yy1)):yyvs) = YYM.return (YYNTkind (yy1), yyvs);
private yyprod260 yyvals = yybadprod 260 yyvals;
private yyprod261 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce261 yy1 ;YYM.return (YYNTsimplekind yyr, yyvs)};
private yyprod261 yyvals = yybadprod 261 yyvals;
private yyprod262 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce262 yy1 ;YYM.return (YYNTsimplekind yyr, yyvs)};
private yyprod262 yyvals = yybadprod 262 yyvals;
private yyprod263 ((_, (YYTok yy3)):(_, (YYNTkind yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce263 yy1 yy2 yy3}; YYM.return (YYNTsimplekind yyr, yyvs)};
private yyprod263 yyvals = yybadprod 263 yyvals;
private yyprod264 ((_, (YYNTtyvar yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce264 yy1 yy2}; YYM.return (YYNTscontext yyr, yyvs)};
private yyprod264 yyvals = yybadprod 264 yyvals;
private yyprod265 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce265 yy1}; YYM.return (YYNTscontexts yyr, yyvs)};
private yyprod265 yyvals = yybadprod 265 yyvals;
private yyprod266 ((_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce266 yy1 yy2}; YYM.return (YYNTscontexts yyr, yyvs)};
private yyprod266 yyvals = yybadprod 266 yyvals;
private yyprod267 ((_, (YYNTscontexts yy3)):(_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce267 yy1 yy2 yy3}; YYM.return (YYNTscontexts yyr, yyvs)};
private yyprod267 yyvals = yybadprod 267 yyvals;
private yyprod268 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce268 yy1}; YYM.return (YYNTccontext yyr, yyvs)};
private yyprod268 yyvals = yybadprod 268 yyvals;
private yyprod269 ((_, (YYTok yy3)):(_, (YYNTscontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce269 yy1 yy2 yy3}; YYM.return (YYNTccontext yyr, yyvs)};
private yyprod269 yyvals = yybadprod 269 yyvals;
private yyprod270 ((_, (YYNTwheredef yy6)):(_, (YYNTtyvar yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce270 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.return (YYNTclassdef yyr, yyvs)};
private yyprod270 yyvals = yybadprod 270 yyvals;
private yyprod271 ((_, (YYNTwheredef yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce271 yy1 yy2 yy3 ;YYM.return (YYNTclassdef yyr, yyvs)};
private yyprod271 yyvals = yybadprod 271 yyvals;
private yyprod272 ((_, (YYNTsimpletype yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce272 yy1 yy2}; YYM.return (YYNTsicontext yyr, yyvs)};
private yyprod272 yyvals = yybadprod 272 yyvals;
private yyprod273 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce273 yy1}; YYM.return (YYNTsicontexts yyr, yyvs)};
private yyprod273 yyvals = yybadprod 273 yyvals;
private yyprod274 ((_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce274 yy1 yy2}; YYM.return (YYNTsicontexts yyr, yyvs)};
private yyprod274 yyvals = yybadprod 274 yyvals;
private yyprod275 ((_, (YYNTsicontexts yy3)):(_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce275 yy1 yy2 yy3}; YYM.return (YYNTsicontexts yyr, yyvs)};
private yyprod275 yyvals = yybadprod 275 yyvals;
private yyprod276 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce276 yy1}; YYM.return (YYNTicontext yyr, yyvs)};
private yyprod276 yyvals = yybadprod 276 yyvals;
private yyprod277 ((_, (YYTok yy3)):(_, (YYNTsicontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce277 yy1 yy2 yy3}; YYM.return (YYNTicontext yyr, yyvs)};
private yyprod277 yyvals = yybadprod 277 yyvals;
private yyprod278 ((_, (YYNTsimpletype yy4)):(_, (YYNTtyname yy3)):(_, (YYTok yy2)):(_, (YYNTicontext yy1)):yyvs) =  do { let {!yyr = reduce278 yy1 yy2 yy3 yy4}; YYM.return (YYNTinsthead yyr, yyvs)};
private yyprod278 yyvals = yybadprod 278 yyvals;
private yyprod279 ((_, (YYNTicontext yy1)):yyvs) =  do { yyr <- reduce279 yy1 ;YYM.return (YYNTinsthead yyr, yyvs)};
private yyprod279 yyvals = yybadprod 279 yyvals;
private yyprod280 ((_, (YYNTwheredef yy3)):(_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce280 yy1 yy2 yy3}; YYM.return (YYNTinstdef yyr, yyvs)};
private yyprod280 yyvals = yybadprod 280 yyvals;
private yyprod281 ((_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce281 yy1 yy2}; YYM.return (YYNTderivedef yyr, yyvs)};
private yyprod281 yyvals = yybadprod 281 yyvals;
private yyprod282 ((_, (YYNTwheredef yy2)):(_, (YYNTdatainit yy1)):yyvs) =  do { let {!yyr = reduce282 yy1 yy2}; YYM.return (YYNTdatadef yyr, yyvs)};
private yyprod282 yyvals = yybadprod 282 yyvals;
private yyprod283 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce283 yy1 yy2}; YYM.return (YYNTnativepur yyr, yyvs)};
private yyprod283 yyvals = yybadprod 283 yyvals;
private yyprod284 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce284 yy1 yy2}; YYM.return (YYNTnativepur yyr, yyvs)};
private yyprod284 yyvals = yybadprod 284 yyvals;
private yyprod285 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce285 yy1}; YYM.return (YYNTnativepur yyr, yyvs)};
private yyprod285 yyvals = yybadprod 285 yyvals;
private yyprod286 ((_, (YYNTnativename yy5)):(_, (YYNTnativepur yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce286 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod286 yyvals = yybadprod 286 yyvals;
private yyprod287 ((_, (YYNTnativename yy6)):(_, (YYNTnativepur yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce287 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod287 yyvals = yybadprod 287 yyvals;
private yyprod288 ((_, (YYNTdalts yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce288 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod288 yyvals = yybadprod 288 yyvals;
private yyprod289 ((_, (YYNTdalts yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce289 yy1 yy2 yy3 yy4}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod289 yyvals = yybadprod 289 yyvals;
private yyprod290 ((_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce290 yy1}; YYM.return (YYNTdvars yyr, yyvs)};
private yyprod290 yyvals = yybadprod 290 yyvals;
private yyprod291 ((_, (YYNTdvars yy2)):(_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce291 yy1 yy2}; YYM.return (YYNTdvars yyr, yyvs)};
private yyprod291 yyvals = yybadprod 291 yyvals;
private yyprod292 ((_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce292 yy1}; YYM.return (YYNTdalts yyr, yyvs)};
private yyprod292 yyvals = yybadprod 292 yyvals;
private yyprod293 ((_, (YYNTdalts yy3)):(_, (YYTok yy2)):(_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce293 yy1 yy2 yy3}; YYM.return (YYNTdalts yyr, yyvs)};
private yyprod293 yyvals = yybadprod 293 yyvals;
private yyprod294 ((_, (YYNTvisdalt yy1)):yyvs) = YYM.return (YYNTdalt (yy1), yyvs);
private yyprod294 yyvals = yybadprod 294 yyvals;
private yyprod295 ((_, (YYTok yy2)):(_, (YYNTvisdalt yy1)):yyvs) =  do { let {!yyr = reduce295 yy1 yy2}; YYM.return (YYNTdalt yyr, yyvs)};
private yyprod295 yyvals = yybadprod 295 yyvals;
private yyprod296 ((_, (YYNTvisdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce296 yy1 yy2}; YYM.return (YYNTdalt yyr, yyvs)};
private yyprod296 yyvals = yybadprod 296 yyvals;
private yyprod297 ((_, (YYNTstrictdalt yy1)):yyvs) = YYM.return (YYNTvisdalt (yy1), yyvs);
private yyprod297 yyvals = yybadprod 297 yyvals;
private yyprod298 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce298 yy1 yy2}; YYM.return (YYNTvisdalt yyr, yyvs)};
private yyprod298 yyvals = yybadprod 298 yyvals;
private yyprod299 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce299 yy1 yy2}; YYM.return (YYNTvisdalt yyr, yyvs)};
private yyprod299 yyvals = yybadprod 299 yyvals;
private yyprod300 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce300 yy1 yy2}; YYM.return (YYNTvisdalt yyr, yyvs)};
private yyprod300 yyvals = yybadprod 300 yyvals;
private yyprod301 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce301 yy1 yy2}; YYM.return (YYNTstrictdalt yyr, yyvs)};
private yyprod301 yyvals = yybadprod 301 yyvals;
private yyprod302 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce302 yy1 yy2}; YYM.return (YYNTstrictdalt yyr, yyvs)};
private yyprod302 yyvals = yybadprod 302 yyvals;
private yyprod303 ((_, (YYNTsimpledalt yy1)):yyvs) = YYM.return (YYNTstrictdalt (yy1), yyvs);
private yyprod303 yyvals = yybadprod 303 yyvals;
private yyprod304 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce304 yy1}; YYM.return (YYNTsimpledalt yyr, yyvs)};
private yyprod304 yyvals = yybadprod 304 yyvals;
private yyprod305 ((_, (YYTok yy4)):(_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce305 yy1 yy2 yy3 yy4}; YYM.return (YYNTsimpledalt yyr, yyvs)};
private yyprod305 yyvals = yybadprod 305 yyvals;
private yyprod306 ((_, (YYNTcontypes yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce306 yy1 yy2}; YYM.return (YYNTsimpledalt yyr, yyvs)};
private yyprod306 yyvals = yybadprod 306 yyvals;
private yyprod307 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { yyr <- reduce307 yy1 ;YYM.return (YYNTcontypes yyr, yyvs)};
private yyprod307 yyvals = yybadprod 307 yyvals;
private yyprod308 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce308 yy1}; YYM.return (YYNTsimpletypes yyr, yyvs)};
private yyprod308 yyvals = yybadprod 308 yyvals;
private yyprod309 ((_, (YYNTsimpletypes yy2)):(_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce309 yy1 yy2}; YYM.return (YYNTsimpletypes yyr, yyvs)};
private yyprod309 yyvals = yybadprod 309 yyvals;
private yyprod310 ((_, (YYNTconfld yy1)):yyvs) = YYM.return (YYNTconflds (yy1), yyvs);
private yyprod310 yyvals = yybadprod 310 yyvals;
private yyprod311 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce311 yy1 yy2}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod311 yyvals = yybadprod 311 yyvals;
private yyprod312 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce312 yy1 yy2}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod312 yyvals = yybadprod 312 yyvals;
private yyprod313 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce313 yy1 yy2 yy3}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod313 yyvals = yybadprod 313 yyvals;
private yyprod314 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce314 yy1 yy2 yy3}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod314 yyvals = yybadprod 314 yyvals;
private yyprod315 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTfldids yy1)):yyvs) =  do { let {!yyr = reduce315 yy1 yy2 yy3}; YYM.return (YYNTconfld yyr, yyvs)};
private yyprod315 yyvals = yybadprod 315 yyvals;
private yyprod316 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYNTfldids yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce316 yy1 yy2 yy3 yy4}; YYM.return (YYNTconfld yyr, yyvs)};
private yyprod316 yyvals = yybadprod 316 yyvals;
private yyprod317 ((_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce317 yy1}; YYM.return (YYNTfldids yyr, yyvs)};
private yyprod317 yyvals = yybadprod 317 yyvals;
private yyprod318 ((_, (YYNTfldids yy3)):(_, (YYTok yy2)):(_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce318 yy1 yy2 yy3}; YYM.return (YYNTfldids yyr, yyvs)};
private yyprod318 yyvals = yybadprod 318 yyvals;
private yyprod319 ((_, (YYNTstrictfldid yy1)):yyvs) = YYM.return (YYNTfldid (yy1), yyvs);
private yyprod319 yyvals = yybadprod 319 yyvals;
private yyprod320 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce320 yy1 yy2}; YYM.return (YYNTfldid yyr, yyvs)};
private yyprod320 yyvals = yybadprod 320 yyvals;
private yyprod321 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce321 yy1 yy2}; YYM.return (YYNTfldid yyr, yyvs)};
private yyprod321 yyvals = yybadprod 321 yyvals;
private yyprod322 ((_, (YYNTplainfldid yy1)):yyvs) = YYM.return (YYNTstrictfldid (yy1), yyvs);
private yyprod322 yyvals = yybadprod 322 yyvals;
private yyprod323 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce323 yy1 yy2}; YYM.return (YYNTstrictfldid yyr, yyvs)};
private yyprod323 yyvals = yybadprod 323 yyvals;
private yyprod324 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce324 yy1 yy2}; YYM.return (YYNTstrictfldid yyr, yyvs)};
private yyprod324 yyvals = yybadprod 324 yyvals;
private yyprod325 ((_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce325 yy1 ;YYM.return (YYNTplainfldid yyr, yyvs)};
private yyprod325 yyvals = yybadprod 325 yyvals;
private yyprod326 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce326 yy1 yy2 yy3 yy4}; YYM.return (YYNTtypedef yyr, yyvs)};
private yyprod326 yyvals = yybadprod 326 yyvals;
private yyprod327 ((_, (YYNTsigma yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce327 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTtypedef yyr, yyvs)};
private yyprod327 yyvals = yybadprod 327 yyvals;
private yyprod328 yyvs =  do { let {!yyr = reduce328 }; YYM.return (YYNTwheredef yyr, yyvs)};
private yyprod329 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce329 yy1 yy2 yy3}; YYM.return (YYNTwheredef yyr, yyvs)};
private yyprod329 yyvals = yybadprod 329 yyvals;
private yyprod330 ((_, (YYTok yy4)):(_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce330 yy1 yy2 yy3 yy4}; YYM.return (YYNTwheredef yyr, yyvs)};
private yyprod330 yyvals = yybadprod 330 yyvals;
private yyprod331 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce331 yy1 yy2 yy3}; YYM.return (YYNTwherelet yyr, yyvs)};
private yyprod331 yyvals = yybadprod 331 yyvals;
private yyprod332 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce332 yy1 yy2 yy3 yy4}; YYM.return (YYNTwherelet yyr, yyvs)};
private yyprod332 yyvals = yybadprod 332 yyvals;
private yyprod333 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce333 yy1 yy2 yy3}; YYM.return (YYNTfundef yyr, yyvs)};
private yyprod333 yyvals = yybadprod 333 yyvals;
private yyprod334 ((_, (YYNTguards yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce334 yy1 yy2}; YYM.return (YYNTfundef yyr, yyvs)};
private yyprod334 yyvals = yybadprod 334 yyvals;
private yyprod335 ((_, (YYNTwherelet yy2)):(_, (YYNTfundef yy1)):yyvs) =  do { yyr <- reduce335 yy1 yy2 ;YYM.return (YYNTfundef yyr, yyvs)};
private yyprod335 yyvals = yybadprod 335 yyvals;
private yyprod336 ((_, (YYNTbinex yy1)):yyvs) =  do { yyr <- reduce336 yy1 ;YYM.return (YYNTfunhead yyr, yyvs)};
private yyprod336 yyvals = yybadprod 336 yyvals;
private yyprod337 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce337 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod337 yyvals = yybadprod 337 yyvals;
private yyprod338 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce338 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod338 yyvals = yybadprod 338 yyvals;
private yyprod339 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce339 yy1 ;YYM.return (YYNTliteral yyr, yyvs)};
private yyprod339 yyvals = yybadprod 339 yyvals;
private yyprod340 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce340 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod340 yyvals = yybadprod 340 yyvals;
private yyprod341 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce341 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod341 yyvals = yybadprod 341 yyvals;
private yyprod342 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce342 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod342 yyvals = yybadprod 342 yyvals;
private yyprod343 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce343 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod343 yyvals = yybadprod 343 yyvals;
private yyprod344 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce344 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod344 yyvals = yybadprod 344 yyvals;
private yyprod345 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce345 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod345 yyvals = yybadprod 345 yyvals;
private yyprod346 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce346 yy1 ;YYM.return (YYNTliteral yyr, yyvs)};
private yyprod346 yyvals = yybadprod 346 yyvals;
private yyprod347 ((_, (YYNTexpr yy1)):yyvs) = YYM.return (YYNTpattern (yy1), yyvs);
private yyprod347 yyvals = yybadprod 347 yyvals;
private yyprod348 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTaeq (yy1), yyvs);
private yyprod348 yyvals = yybadprod 348 yyvals;
private yyprod349 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTaeq (yy1), yyvs);
private yyprod349 yyvals = yybadprod 349 yyvals;
private yyprod350 ((_, (YYNTgqual yy1)):yyvs) = YYM.return (YYNTlcqual (yy1), yyvs);
private yyprod350 yyvals = yybadprod 350 yyvals;
private yyprod351 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce351 yy1 yy2 yy3 ;YYM.return (YYNTlcqual yyr, yyvs)};
private yyprod351 yyvals = yybadprod 351 yyvals;
private yyprod352 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce352 yy1 yy2 yy3 yy4}; YYM.return (YYNTlcqual yyr, yyvs)};
private yyprod352 yyvals = yybadprod 352 yyvals;
private yyprod353 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce353 yy1}; YYM.return (YYNTlcquals yyr, yyvs)};
private yyprod353 yyvals = yybadprod 353 yyvals;
private yyprod354 ((_, (YYNTlcquals yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce354 yy1 yy2 yy3}; YYM.return (YYNTlcquals yyr, yyvs)};
private yyprod354 yyvals = yybadprod 354 yyvals;
private yyprod355 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce355 yy1 yy2}; YYM.return (YYNTlcquals yyr, yyvs)};
private yyprod355 yyvals = yybadprod 355 yyvals;
private yyprod356 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce356 yy1}; YYM.return (YYNTdodefs yyr, yyvs)};
private yyprod356 yyvals = yybadprod 356 yyvals;
private yyprod357 ((_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce357 yy1 yy2}; YYM.return (YYNTdodefs yyr, yyvs)};
private yyprod357 yyvals = yybadprod 357 yyvals;
private yyprod358 ((_, (YYNTdodefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce358 yy1 yy2 yy3}; YYM.return (YYNTdodefs yyr, yyvs)};
private yyprod358 yyvals = yybadprod 358 yyvals;
private yyprod359 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce359 yy1}; YYM.return (YYNTgqual yyr, yyvs)};
private yyprod359 yyvals = yybadprod 359 yyvals;
private yyprod360 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce360 yy1 yy2 yy3}; YYM.return (YYNTgqual yyr, yyvs)};
private yyprod360 yyvals = yybadprod 360 yyvals;
private yyprod361 ((_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce361 yy1}; YYM.return (YYNTgquals yyr, yyvs)};
private yyprod361 yyvals = yybadprod 361 yyvals;
private yyprod362 ((_, (YYNTgquals yy3)):(_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce362 yy1 yy2 yy3}; YYM.return (YYNTgquals yyr, yyvs)};
private yyprod362 yyvals = yybadprod 362 yyvals;
private yyprod363 ((_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce363 yy1 yy2}; YYM.return (YYNTgquals yyr, yyvs)};
private yyprod363 yyvals = yybadprod 363 yyvals;
private yyprod364 ((_, (YYNTexpr yy4)):(_, (YYNTaeq yy3)):(_, (YYNTgquals yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce364 yy1 yy2 yy3 yy4}; YYM.return (YYNTguard yyr, yyvs)};
private yyprod364 yyvals = yybadprod 364 yyvals;
private yyprod365 ((_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce365 yy1}; YYM.return (YYNTguards yyr, yyvs)};
private yyprod365 yyvals = yybadprod 365 yyvals;
private yyprod366 ((_, (YYNTguards yy2)):(_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce366 yy1 yy2}; YYM.return (YYNTguards yyr, yyvs)};
private yyprod366 yyvals = yybadprod 366 yyvals;
private yyprod367 ((_, (YYNTexpr yy3)):(_, (YYNTaeq yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce367 yy1 yy2 yy3}; YYM.return (YYNTcalt yyr, yyvs)};
private yyprod367 yyvals = yybadprod 367 yyvals;
private yyprod368 ((_, (YYNTguards yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce368 yy1 yy2}; YYM.return (YYNTcalt yyr, yyvs)};
private yyprod368 yyvals = yybadprod 368 yyvals;
private yyprod369 ((_, (YYNTwherelet yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce369 yy1 yy2}; YYM.return (YYNTcalt yyr, yyvs)};
private yyprod369 yyvals = yybadprod 369 yyvals;
private yyprod370 ((_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce370 yy1}; YYM.return (YYNTcalts yyr, yyvs)};
private yyprod370 yyvals = yybadprod 370 yyvals;
private yyprod371 ((_, (YYNTcalts yy3)):(_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce371 yy1 yy2 yy3}; YYM.return (YYNTcalts yyr, yyvs)};
private yyprod371 yyvals = yybadprod 371 yyvals;
private yyprod372 ((_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce372 yy1 yy2}; YYM.return (YYNTcalts yyr, yyvs)};
private yyprod372 yyvals = yybadprod 372 yyvals;
private yyprod373 ((_, (YYNTlambdabody yy3)):(_, (YYNTapats yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce373 yy1 yy2 yy3}; YYM.return (YYNTlambda yyr, yyvs)};
private yyprod373 yyvals = yybadprod 373 yyvals;
private yyprod374 ((_, (YYNTlambda yy1)):yyvs) = YYM.return (YYNTlambdabody (yy1), yyvs);
private yyprod374 yyvals = yybadprod 374 yyvals;
private yyprod375 ((_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce375 yy1 yy2}; YYM.return (YYNTlambdabody yyr, yyvs)};
private yyprod375 yyvals = yybadprod 375 yyvals;
private yyprod376 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce376 yy1 yy2 yy3}; YYM.return (YYNTexpr yyr, yyvs)};
private yyprod376 yyvals = yybadprod 376 yyvals;
private yyprod377 ((_, (YYNTbinex yy1)):yyvs) = YYM.return (YYNTexpr (yy1), yyvs);
private yyprod377 yyvals = yybadprod 377 yyvals;
private yyprod378 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce378 yy1 yy2}; YYM.return (YYNTthenx yyr, yyvs)};
private yyprod378 yyvals = yybadprod 378 yyvals;
private yyprod379 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTthenx (yy1), yyvs);
private yyprod379 yyvals = yybadprod 379 yyvals;
private yyprod380 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce380 yy1 yy2}; YYM.return (YYNTelsex yyr, yyvs)};
private yyprod380 yyvals = yybadprod 380 yyvals;
private yyprod381 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTelsex (yy1), yyvs);
private yyprod381 yyvals = yybadprod 381 yyvals;
private yyprod382 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce382 yy1 yy2 yy3}; YYM.return (YYNTbinex yyr, yyvs)};
private yyprod382 ((_, (YYNTbinex yy1)):yyvs) = YYM.return (YYNTbinex (yy1), yyvs);
private yyprod382 yyvals = yybadprod 382 yyvals;
private yyprod383 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce383 yy1 yy2 yy3}; YYM.return (YYNTbinex yyr, yyvs)};
private yyprod383 ((_, (YYNTbinex yy1)):yyvs) = YYM.return (YYNTbinex (yy1), yyvs);
private yyprod383 yyvals = yybadprod 383 yyvals;
private yyprod384 ((_, (YYNTtopex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce384 yy1 yy2}; YYM.return (YYNTbinex yyr, yyvs)};
private yyprod384 yyvals = yybadprod 384 yyvals;
private yyprod385 ((_, (YYNTtopex yy1)):yyvs) = YYM.return (YYNTbinex (yy1), yyvs);
private yyprod385 yyvals = yybadprod 385 yyvals;
private yyprod386 ((_, (YYNTexpr yy6)):(_, (YYNTelsex yy5)):(_, (YYNTexpr yy4)):(_, (YYNTthenx yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce386 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod386 yyvals = yybadprod 386 yyvals;
private yyprod387 ((_, (YYTok yy6)):(_, (YYNTcalts yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce387 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod387 yyvals = yybadprod 387 yyvals;
private yyprod388 ((_, (YYNTexpr yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce388 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod388 yyvals = yybadprod 388 yyvals;
private yyprod389 ((_, (YYNTlambda yy1)):yyvs) = YYM.return (YYNTtopex (yy1), yyvs);
private yyprod389 yyvals = yybadprod 389 yyvals;
private yyprod390 ((_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce390 yy1}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod390 yyvals = yybadprod 390 yyvals;
private yyprod391 ((_, (YYNTunex yy1)):yyvs) = YYM.return (YYNTappex (yy1), yyvs);
private yyprod391 yyvals = yybadprod 391 yyvals;
private yyprod392 ((_, (YYNTunex yy2)):(_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce392 yy1 yy2}; YYM.return (YYNTappex yyr, yyvs)};
private yyprod392 yyvals = yybadprod 392 yyvals;
private yyprod393 ((_, (YYNTprimary yy1)):yyvs) = YYM.return (YYNTunex (yy1), yyvs);
private yyprod393 yyvals = yybadprod 393 yyvals;
private yyprod394 ((_, (YYNTunex yy2)):(_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce394 yy1 yy2}; YYM.return (YYNTunex yyr, yyvs)};
private yyprod394 yyvals = yybadprod 394 yyvals;
private yyprod395 ((_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce395 yy1}; YYM.return (YYNTapats yyr, yyvs)};
private yyprod395 yyvals = yybadprod 395 yyvals;
private yyprod396 ((_, (YYNTapats yy2)):(_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce396 yy1 yy2}; YYM.return (YYNTapats yyr, yyvs)};
private yyprod396 yyvals = yybadprod 396 yyvals;
private yyprod397 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce397 yy1}; YYM.return (YYNTqualifiers yyr, yyvs)};
private yyprod397 yyvals = yybadprod 397 yyvals;
private yyprod398 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce398 yy1 yy2}; YYM.return (YYNTqualifiers yyr, yyvs)};
private yyprod398 yyvals = yybadprod 398 yyvals;
private yyprod399 ((_, (YYNTterm yy1)):yyvs) = YYM.return (YYNTprimary (yy1), yyvs);
private yyprod399 yyvals = yybadprod 399 yyvals;
private yyprod400 ((_, (YYTok yy4)):(_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce400 yy1 yy2 yy3 yy4 ;YYM.return (YYNTprimary yyr, yyvs)};
private yyprod400 yyvals = yybadprod 400 yyvals;
private yyprod401 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce401 yy1 yy2 yy3}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod401 yyvals = yybadprod 401 yyvals;
private yyprod402 ((_, (YYNToperator yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { yyr <- reduce402 yy1 yy2 yy3 ;YYM.return (YYNTprimary yyr, yyvs)};
private yyprod402 yyvals = yybadprod 402 yyvals;
private yyprod403 ((_, (YYNTunop yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce403 yy1 yy2 yy3}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod403 yyvals = yybadprod 403 yyvals;
private yyprod404 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce404 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod404 yyvals = yybadprod 404 yyvals;
private yyprod405 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce405 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod405 yyvals = yybadprod 405 yyvals;
private yyprod406 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce406 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod406 yyvals = yybadprod 406 yyvals;
private yyprod407 ((_, (YYTok yy4)):(_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce407 yy1 yy2 yy3 yy4}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod407 yyvals = yybadprod 407 yyvals;
private yyprod408 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce408 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod408 yyvals = yybadprod 408 yyvals;
private yyprod409 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce409 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod409 yyvals = yybadprod 409 yyvals;
private yyprod410 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce410 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod410 yyvals = yybadprod 410 yyvals;
private yyprod411 ((_, (YYTok yy5)):(_, (YYNTgetfields yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce411 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod411 yyvals = yybadprod 411 yyvals;
private yyprod412 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce412 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod412 yyvals = yybadprod 412 yyvals;
private yyprod413 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce413 yy1}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod413 yyvals = yybadprod 413 yyvals;
private yyprod414 ((_, (YYNTliteral yy1)):yyvs) = YYM.return (YYNTterm (yy1), yyvs);
private yyprod414 yyvals = yybadprod 414 yyvals;
private yyprod415 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce415 yy1}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod415 yyvals = yybadprod 415 yyvals;
private yyprod416 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce416 yy1}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod416 yyvals = yybadprod 416 yyvals;
private yyprod417 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce417 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod417 yyvals = yybadprod 417 yyvals;
private yyprod418 ((_, (YYTok yy4)):(_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce418 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod418 yyvals = yybadprod 418 yyvals;
private yyprod419 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce419 yy1 yy2}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod419 yyvals = yybadprod 419 yyvals;
private yyprod420 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce420 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod420 yyvals = yybadprod 420 yyvals;
private yyprod421 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce421 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod421 yyvals = yybadprod 421 yyvals;
private yyprod422 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce422 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod422 yyvals = yybadprod 422 yyvals;
private yyprod423 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce423 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod423 yyvals = yybadprod 423 yyvals;
private yyprod424 ((_, (YYTok yy4)):(_, (YYNTexpr yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce424 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod424 yyvals = yybadprod 424 yyvals;
private yyprod425 ((_, (YYTok yy4)):(_, (YYNToperator yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce425 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod425 yyvals = yybadprod 425 yyvals;
private yyprod426 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce426 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod426 yyvals = yybadprod 426 yyvals;
private yyprod427 ((_, (YYTok yy5)):(_, (YYNTexprSC yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce427 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod427 yyvals = yybadprod 427 yyvals;
private yyprod428 ((_, (YYTok yy5)):(_, (YYNTexprSS yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce428 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod428 yyvals = yybadprod 428 yyvals;
private yyprod429 ((_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce429 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod429 yyvals = yybadprod 429 yyvals;
private yyprod430 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce430 yy1 yy2}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod430 yyvals = yybadprod 430 yyvals;
private yyprod431 ((_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce431 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod431 yyvals = yybadprod 431 yyvals;
private yyprod432 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce432 yy1 yy2 yy3 yy4 ;YYM.return (YYNTterm yyr, yyvs)};
private yyprod432 yyvals = yybadprod 432 yyvals;
private yyprod433 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce433 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTterm yyr, yyvs)};
private yyprod433 yyvals = yybadprod 433 yyvals;
private yyprod434 ((_, (YYTok yy5)):(_, (YYNTlcquals yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce434 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTterm yyr, yyvs)};
private yyprod434 yyvals = yybadprod 434 yyvals;
private yyprod435 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce435 yy1}; YYM.return (YYNTcommata yyr, yyvs)};
private yyprod435 yyvals = yybadprod 435 yyvals;
private yyprod436 ((_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce436 yy1 yy2}; YYM.return (YYNTcommata yyr, yyvs)};
private yyprod436 yyvals = yybadprod 436 yyvals;
private yyprod437 ((_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce437 yy1}; YYM.return (YYNTfields yyr, yyvs)};
private yyprod437 yyvals = yybadprod 437 yyvals;
private yyprod438 ((_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { yyr <- reduce438 yy1 yy2 yy3 ;YYM.return (YYNTfields yyr, yyvs)};
private yyprod438 yyvals = yybadprod 438 yyvals;
private yyprod439 ((_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce439 yy1 yy2}; YYM.return (YYNTfields yyr, yyvs)};
private yyprod439 yyvals = yybadprod 439 yyvals;
private yyprod440 ((_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce440 yy1}; YYM.return (YYNTgetfields yyr, yyvs)};
private yyprod440 yyvals = yybadprod 440 yyvals;
private yyprod441 ((_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce441 yy1 yy2 yy3}; YYM.return (YYNTgetfields yyr, yyvs)};
private yyprod441 yyvals = yybadprod 441 yyvals;
private yyprod442 ((_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce442 yy1 yy2}; YYM.return (YYNTgetfields yyr, yyvs)};
private yyprod442 yyvals = yybadprod 442 yyvals;
private yyprod443 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce443 yy1 yy2 yy3}; YYM.return (YYNTgetfield yyr, yyvs)};
private yyprod443 yyvals = yybadprod 443 yyvals;
private yyprod444 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce444 yy1 yy2 yy3}; YYM.return (YYNTgetfield yyr, yyvs)};
private yyprod444 yyvals = yybadprod 444 yyvals;
private yyprod445 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce445 yy1}; YYM.return (YYNTgetfield yyr, yyvs)};
private yyprod445 yyvals = yybadprod 445 yyvals;
private yyprod446 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce446 yy1 yy2 yy3}; YYM.return (YYNTfield yyr, yyvs)};
private yyprod446 yyvals = yybadprod 446 yyvals;
private yyprod447 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce447 yy1}; YYM.return (YYNTfield yyr, yyvs)};
private yyprod447 yyvals = yybadprod 447 yyvals;
private yyprod448 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce448 yy1}; YYM.return (YYNTexprSC yyr, yyvs)};
private yyprod448 yyvals = yybadprod 448 yyvals;
private yyprod449 ((_, (YYNTexprSC yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce449 yy1 yy2 yy3}; YYM.return (YYNTexprSC yyr, yyvs)};
private yyprod449 yyvals = yybadprod 449 yyvals;
private yyprod450 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce450 yy1 yy2}; YYM.return (YYNTexprSC yyr, yyvs)};
private yyprod450 yyvals = yybadprod 450 yyvals;
private yyprod451 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce451 yy1}; YYM.return (YYNTexprSS yyr, yyvs)};
private yyprod451 yyvals = yybadprod 451 yyvals;
private yyprod452 ((_, (YYNTexprSS yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce452 yy1 yy2 yy3}; YYM.return (YYNTexprSS yyr, yyvs)};
private yyprod452 yyvals = yybadprod 452 yyvals;
private yyprod453 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce453 yy1 yy2}; YYM.return (YYNTexprSS yyr, yyvs)};
private yyprod453 yyvals = yybadprod 453 yyvals;
;

private yyprods = let 
    sub1 = [      (1, yyprod1),
      (2, yyprod2),
      (3, yyprod3),
      (4, yyprod4),
      (5, yyprod5),
      (6, yyprod6),
      (7, yyprod7),
      (8, yyprod8),
      (9, yyprod9),
      (10, yyprod10),
      (11, yyprod11),
      (12, yyprod12),
      (13, yyprod13),
      (14, yyprod14),
      (15, yyprod15),
      (16, yyprod16),
      (17, yyprod17),
      (18, yyprod18),
      (19, yyprod19),
      (20, yyprod20),
      (21, yyprod21),
      (22, yyprod22),
      (23, yyprod23),
      (24, yyprod24),
      (25, yyprod25),
      (26, yyprod26),
      (27, yyprod27),
      (28, yyprod28),
      (29, yyprod29),
      (30, yyprod30),
      (31, yyprod31),
      (32, yyprod32),
      (33, yyprod33),
      (34, yyprod34),
      (35, yyprod35),
      (36, yyprod36),
      (37, yyprod37),
      (38, yyprod38),
      (39, yyprod39),
      (40, yyprod40),
      (41, yyprod41),
      (42, yyprod42),
      (43, yyprod43),
      (44, yyprod44),
      (45, yyprod45),
      (46, yyprod46),
      (47, yyprod47),
      (48, yyprod48),
      (49, yyprod49),
      (50, yyprod50),
      (51, yyprod51),
      (52, yyprod52),
      (53, yyprod53),
      (54, yyprod54),
      (55, yyprod55),
      (56, yyprod56),
      (57, yyprod57),
      (58, yyprod58),
      (59, yyprod59),
      (60, yyprod60),
      (61, yyprod61),
      (62, yyprod62),
      (63, yyprod63),
      (64, yyprod64)];
    sub2 = [      (65, yyprod65),
      (66, yyprod66),
      (67, yyprod67),
      (68, yyprod68),
      (69, yyprod69),
      (70, yyprod70),
      (71, yyprod71),
      (72, yyprod72),
      (73, yyprod73),
      (74, yyprod74),
      (75, yyprod75),
      (76, yyprod76),
      (77, yyprod77),
      (78, yyprod78),
      (79, yyprod79),
      (80, yyprod80),
      (81, yyprod81),
      (82, yyprod82),
      (83, yyprod83),
      (84, yyprod84),
      (85, yyprod85),
      (86, yyprod86),
      (87, yyprod87),
      (88, yyprod88),
      (89, yyprod89),
      (90, yyprod90),
      (91, yyprod91),
      (92, yyprod92),
      (93, yyprod93),
      (94, yyprod94),
      (95, yyprod95),
      (96, yyprod96),
      (97, yyprod97),
      (98, yyprod98),
      (99, yyprod99),
      (100, yyprod100),
      (101, yyprod101),
      (102, yyprod102),
      (103, yyprod103),
      (104, yyprod104),
      (105, yyprod105),
      (106, yyprod106),
      (107, yyprod107),
      (108, yyprod108),
      (109, yyprod109),
      (110, yyprod110),
      (111, yyprod111),
      (112, yyprod112),
      (113, yyprod113),
      (114, yyprod114),
      (115, yyprod115),
      (116, yyprod116),
      (117, yyprod117),
      (118, yyprod118),
      (119, yyprod119),
      (120, yyprod120),
      (121, yyprod121),
      (122, yyprod122),
      (123, yyprod123),
      (124, yyprod124),
      (125, yyprod125),
      (126, yyprod126),
      (127, yyprod127),
      (128, yyprod128)];
    sub3 = [      (129, yyprod129),
      (130, yyprod130),
      (131, yyprod131),
      (132, yyprod132),
      (133, yyprod133),
      (134, yyprod134),
      (135, yyprod135),
      (136, yyprod136),
      (137, yyprod137),
      (138, yyprod138),
      (139, yyprod139),
      (140, yyprod140),
      (141, yyprod141),
      (142, yyprod142),
      (143, yyprod143),
      (144, yyprod144),
      (145, yyprod145),
      (146, yyprod146),
      (147, yyprod147),
      (148, yyprod148),
      (149, yyprod149),
      (150, yyprod150),
      (151, yyprod151),
      (152, yyprod152),
      (153, yyprod153),
      (154, yyprod154),
      (155, yyprod155),
      (156, yyprod156),
      (157, yyprod157),
      (158, yyprod158),
      (159, yyprod159),
      (160, yyprod160),
      (161, yyprod161),
      (162, yyprod162),
      (163, yyprod163),
      (164, yyprod164),
      (165, yyprod165),
      (166, yyprod166),
      (167, yyprod167),
      (168, yyprod168),
      (169, yyprod169),
      (170, yyprod170),
      (171, yyprod171),
      (172, yyprod172),
      (173, yyprod173),
      (174, yyprod174),
      (175, yyprod175),
      (176, yyprod176),
      (177, yyprod177),
      (178, yyprod178),
      (179, yyprod179),
      (180, yyprod180),
      (181, yyprod181),
      (182, yyprod182),
      (183, yyprod183),
      (184, yyprod184),
      (185, yyprod185),
      (186, yyprod186),
      (187, yyprod187),
      (188, yyprod188),
      (189, yyprod189),
      (190, yyprod190),
      (191, yyprod191),
      (192, yyprod192)];
    sub4 = [      (193, yyprod193),
      (194, yyprod194),
      (195, yyprod195),
      (196, yyprod196),
      (197, yyprod197),
      (198, yyprod198),
      (199, yyprod199),
      (200, yyprod200),
      (201, yyprod201),
      (202, yyprod202),
      (203, yyprod203),
      (204, yyprod204),
      (205, yyprod205),
      (206, yyprod206),
      (207, yyprod207),
      (208, yyprod208),
      (209, yyprod209),
      (210, yyprod210),
      (211, yyprod211),
      (212, yyprod212),
      (213, yyprod213),
      (214, yyprod214),
      (215, yyprod215),
      (216, yyprod216),
      (217, yyprod217),
      (218, yyprod218),
      (219, yyprod219),
      (220, yyprod220),
      (221, yyprod221),
      (222, yyprod222),
      (223, yyprod223),
      (224, yyprod224),
      (225, yyprod225),
      (226, yyprod226),
      (227, yyprod227),
      (228, yyprod228),
      (229, yyprod229),
      (230, yyprod230),
      (231, yyprod231),
      (232, yyprod232),
      (233, yyprod233),
      (234, yyprod234),
      (235, yyprod235),
      (236, yyprod236),
      (237, yyprod237),
      (238, yyprod238),
      (239, yyprod239),
      (240, yyprod240),
      (241, yyprod241),
      (242, yyprod242),
      (243, yyprod243),
      (244, yyprod244),
      (245, yyprod245),
      (246, yyprod246),
      (247, yyprod247),
      (248, yyprod248),
      (249, yyprod249),
      (250, yyprod250),
      (251, yyprod251),
      (252, yyprod252),
      (253, yyprod253),
      (254, yyprod254),
      (255, yyprod255),
      (256, yyprod256)];
    sub5 = [      (257, yyprod257),
      (258, yyprod258),
      (259, yyprod259),
      (260, yyprod260),
      (261, yyprod261),
      (262, yyprod262),
      (263, yyprod263),
      (264, yyprod264),
      (265, yyprod265),
      (266, yyprod266),
      (267, yyprod267),
      (268, yyprod268),
      (269, yyprod269),
      (270, yyprod270),
      (271, yyprod271),
      (272, yyprod272),
      (273, yyprod273),
      (274, yyprod274),
      (275, yyprod275),
      (276, yyprod276),
      (277, yyprod277),
      (278, yyprod278),
      (279, yyprod279),
      (280, yyprod280),
      (281, yyprod281),
      (282, yyprod282),
      (283, yyprod283),
      (284, yyprod284),
      (285, yyprod285),
      (286, yyprod286),
      (287, yyprod287),
      (288, yyprod288),
      (289, yyprod289),
      (290, yyprod290),
      (291, yyprod291),
      (292, yyprod292),
      (293, yyprod293),
      (294, yyprod294),
      (295, yyprod295),
      (296, yyprod296),
      (297, yyprod297),
      (298, yyprod298),
      (299, yyprod299),
      (300, yyprod300),
      (301, yyprod301),
      (302, yyprod302),
      (303, yyprod303),
      (304, yyprod304),
      (305, yyprod305),
      (306, yyprod306),
      (307, yyprod307),
      (308, yyprod308),
      (309, yyprod309),
      (310, yyprod310),
      (311, yyprod311),
      (312, yyprod312),
      (313, yyprod313),
      (314, yyprod314),
      (315, yyprod315),
      (316, yyprod316),
      (317, yyprod317),
      (318, yyprod318),
      (319, yyprod319),
      (320, yyprod320)];
    sub6 = [      (321, yyprod321),
      (322, yyprod322),
      (323, yyprod323),
      (324, yyprod324),
      (325, yyprod325),
      (326, yyprod326),
      (327, yyprod327),
      (328, yyprod328),
      (329, yyprod329),
      (330, yyprod330),
      (331, yyprod331),
      (332, yyprod332),
      (333, yyprod333),
      (334, yyprod334),
      (335, yyprod335),
      (336, yyprod336),
      (337, yyprod337),
      (338, yyprod338),
      (339, yyprod339),
      (340, yyprod340),
      (341, yyprod341),
      (342, yyprod342),
      (343, yyprod343),
      (344, yyprod344),
      (345, yyprod345),
      (346, yyprod346),
      (347, yyprod347),
      (348, yyprod348),
      (349, yyprod349),
      (350, yyprod350),
      (351, yyprod351),
      (352, yyprod352),
      (353, yyprod353),
      (354, yyprod354),
      (355, yyprod355),
      (356, yyprod356),
      (357, yyprod357),
      (358, yyprod358),
      (359, yyprod359),
      (360, yyprod360),
      (361, yyprod361),
      (362, yyprod362),
      (363, yyprod363),
      (364, yyprod364),
      (365, yyprod365),
      (366, yyprod366),
      (367, yyprod367),
      (368, yyprod368),
      (369, yyprod369),
      (370, yyprod370),
      (371, yyprod371),
      (372, yyprod372),
      (373, yyprod373),
      (374, yyprod374),
      (375, yyprod375),
      (376, yyprod376),
      (377, yyprod377),
      (378, yyprod378),
      (379, yyprod379),
      (380, yyprod380),
      (381, yyprod381),
      (382, yyprod382),
      (383, yyprod383),
      (384, yyprod384)];
    sub7 = [      (385, yyprod385),
      (386, yyprod386),
      (387, yyprod387),
      (388, yyprod388),
      (389, yyprod389),
      (390, yyprod390),
      (391, yyprod391),
      (392, yyprod392),
      (393, yyprod393),
      (394, yyprod394),
      (395, yyprod395),
      (396, yyprod396),
      (397, yyprod397),
      (398, yyprod398),
      (399, yyprod399),
      (400, yyprod400),
      (401, yyprod401),
      (402, yyprod402),
      (403, yyprod403),
      (404, yyprod404),
      (405, yyprod405),
      (406, yyprod406),
      (407, yyprod407),
      (408, yyprod408),
      (409, yyprod409),
      (410, yyprod410),
      (411, yyprod411),
      (412, yyprod412),
      (413, yyprod413),
      (414, yyprod414),
      (415, yyprod415),
      (416, yyprod416),
      (417, yyprod417),
      (418, yyprod418),
      (419, yyprod419),
      (420, yyprod420),
      (421, yyprod421),
      (422, yyprod422),
      (423, yyprod423),
      (424, yyprod424),
      (425, yyprod425),
      (426, yyprod426),
      (427, yyprod427),
      (428, yyprod428),
      (429, yyprod429),
      (430, yyprod430),
      (431, yyprod431),
      (432, yyprod432),
      (433, yyprod433),
      (434, yyprod434),
      (435, yyprod435),
      (436, yyprod436),
      (437, yyprod437),
      (438, yyprod438),
      (439, yyprod439),
      (440, yyprod440),
      (441, yyprod441),
      (442, yyprod442),
      (443, yyprod443),
      (444, yyprod444),
      (445, yyprod445),
      (446, yyprod446),
      (447, yyprod447),
      (448, yyprod448)];
    sub8 = [      (449, yyprod449),
      (450, yyprod450),
      (451, yyprod451),
      (452, yyprod452),
      (453, yyprod453)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8);
private yyacts  = let 
    sub1 = [      (0, yyaction0),
      (1, yyaction1),
      (2, yyaction2),
      (3, yyaction3),
      (4, yyaction4),
      (5, yyaction5),
      (6, yyaction6),
      (7, yyaction7),
      (8, yyaction8),
      (9, yyaction9),
      (10, yyaction10),
      (11, yyaction11),
      (12, yyaction12),
      (13, yyaction13),
      (14, yyaction14),
      (15, yyaction15),
      (16, yyaction16),
      (17, yyaction17),
      (18, yyaction18),
      (19, yyaction19),
      (20, yyaction20),
      (21, yyaction21),
      (22, yyaction22),
      (23, yyaction23),
      (24, yyaction24),
      (25, yyaction25),
      (26, yyaction26),
      (27, yyaction27),
      (28, yyaction28),
      (29, yyaction29),
      (30, yyaction30),
      (31, yyaction31),
      (32, yyaction32),
      (33, yyaction33),
      (34, yyaction34),
      (35, yyaction35),
      (36, yyaction36),
      (37, yyaction37),
      (38, yyaction38),
      (39, yyaction39),
      (40, yyaction40),
      (41, yyaction41),
      (42, yyaction42),
      (43, yyaction43),
      (44, yyaction44),
      (45, yyaction45),
      (46, yyaction46),
      (47, yyaction47),
      (48, yyaction48),
      (49, yyaction49),
      (50, yyaction50),
      (51, yyaction51),
      (52, yyaction52),
      (53, yyaction53),
      (54, yyaction54),
      (55, yyaction55),
      (56, yyaction56),
      (57, yyaction57),
      (58, yyaction58),
      (59, yyaction59),
      (60, yyaction60),
      (61, yyaction61),
      (62, yyaction62),
      (63, yyaction63)];
    sub2 = [      (64, yyaction64),
      (65, yyaction65),
      (66, yyaction66),
      (67, yyaction67),
      (68, yyaction68),
      (69, yyaction69),
      (70, yyaction70),
      (71, yyaction71),
      (72, yyaction72),
      (73, yyaction73),
      (74, yyaction74),
      (75, yyaction75),
      (76, yyaction76),
      (77, yyaction77),
      (78, yyaction78),
      (79, yyaction79),
      (80, yyaction80),
      (81, yyaction81),
      (82, yyaction82),
      (83, yyaction83),
      (84, yyaction84),
      (85, yyaction85),
      (86, yyaction86),
      (87, yyaction87),
      (88, yyaction88),
      (89, yyaction89),
      (90, yyaction90),
      (91, yyaction91),
      (92, yyaction92),
      (93, yyaction93),
      (94, yyaction94),
      (95, yyaction95),
      (96, yyaction96),
      (97, yyaction97),
      (98, yyaction98),
      (99, yyaction99),
      (100, yyaction100),
      (101, yyaction101),
      (102, yyaction102),
      (103, yyaction103),
      (104, yyaction104),
      (105, yyaction105),
      (106, yyaction106),
      (107, yyaction107),
      (108, yyaction108),
      (109, yyaction109),
      (110, yyaction110),
      (111, yyaction111),
      (112, yyaction112),
      (113, yyaction113),
      (114, yyaction114),
      (115, yyaction115),
      (116, yyaction116),
      (117, yyaction117),
      (118, yyaction118),
      (119, yyaction119),
      (120, yyaction120),
      (121, yyaction121),
      (122, yyaction122),
      (123, yyaction123),
      (124, yyaction124),
      (125, yyaction125),
      (126, yyaction126),
      (127, yyaction127)];
    sub3 = [      (128, yyaction128),
      (129, yyaction129),
      (130, yyaction130),
      (131, yyaction131),
      (132, yyaction132),
      (133, yyaction133),
      (134, yyaction134),
      (135, yyaction135),
      (136, yyaction136),
      (137, yyaction137),
      (138, yyaction138),
      (139, yyaction139),
      (140, yyaction140),
      (141, yyaction141),
      (142, yyaction142),
      (143, yyaction143),
      (144, yyaction144),
      (145, yyaction145),
      (146, yyaction146),
      (147, yyaction147),
      (148, yyaction148),
      (149, yyaction149),
      (150, yyaction150),
      (151, yyaction151),
      (152, yyaction152),
      (153, yyaction153),
      (154, yyaction154),
      (155, yyaction155),
      (156, yyaction156),
      (157, yyaction157),
      (158, yyaction158),
      (159, yyaction159),
      (160, yyaction160),
      (161, yyaction161),
      (162, yyaction162),
      (163, yyaction163),
      (164, yyaction164),
      (165, yyaction165),
      (166, yyaction166),
      (167, yyaction167),
      (168, yyaction168),
      (169, yyaction169),
      (170, yyaction170),
      (171, yyaction171),
      (172, yyaction172),
      (173, yyaction173),
      (174, yyaction174),
      (175, yyaction175),
      (176, yyaction176),
      (177, yyaction177),
      (178, yyaction178),
      (179, yyaction179),
      (180, yyaction180),
      (181, yyaction181),
      (182, yyaction182),
      (183, yyaction183),
      (184, yyaction184),
      (185, yyaction185),
      (186, yyaction186),
      (187, yyaction187),
      (188, yyaction188),
      (189, yyaction189),
      (190, yyaction190),
      (191, yyaction191)];
    sub4 = [      (192, yyaction192),
      (193, yyaction193),
      (194, yyaction194),
      (195, yyaction195),
      (196, yyaction196),
      (197, yyaction197),
      (198, yyaction198),
      (199, yyaction199),
      (200, yyaction200),
      (201, yyaction201),
      (202, yyaction202),
      (203, yyaction203),
      (204, yyaction204),
      (205, yyaction205),
      (206, yyaction206),
      (207, yyaction207),
      (208, yyaction208),
      (209, yyaction209),
      (210, yyaction210),
      (211, yyaction211),
      (212, yyaction212),
      (213, yyaction213),
      (214, yyaction214),
      (215, yyaction215),
      (216, yyaction216),
      (217, yyaction217),
      (218, yyaction218),
      (219, yyaction219),
      (220, yyaction220),
      (221, yyaction221),
      (222, yyaction222),
      (223, yyaction223),
      (224, yyaction224),
      (225, yyaction225),
      (226, yyaction226),
      (227, yyaction227),
      (228, yyaction228),
      (229, yyaction229),
      (230, yyaction230),
      (231, yyaction231),
      (232, yyaction232),
      (233, yyaction233),
      (234, yyaction234),
      (235, yyaction235),
      (236, yyaction236),
      (237, yyaction237),
      (238, yyaction238),
      (239, yyaction239),
      (240, yyaction240),
      (241, yyaction241),
      (242, yyaction242),
      (243, yyaction243),
      (244, yyaction244),
      (245, yyaction245),
      (246, yyaction246),
      (247, yyaction247),
      (248, yyaction248),
      (249, yyaction249),
      (250, yyaction250),
      (251, yyaction251),
      (252, yyaction252),
      (253, yyaction253),
      (254, yyaction254),
      (255, yyaction255)];
    sub5 = [      (256, yyaction256),
      (257, yyaction257),
      (258, yyaction258),
      (259, yyaction259),
      (260, yyaction260),
      (261, yyaction261),
      (262, yyaction262),
      (263, yyaction263),
      (264, yyaction264),
      (265, yyaction265),
      (266, yyaction266),
      (267, yyaction267),
      (268, yyaction268),
      (269, yyaction269),
      (270, yyaction270),
      (271, yyaction271),
      (272, yyaction272),
      (273, yyaction273),
      (274, yyaction274),
      (275, yyaction275),
      (276, yyaction276),
      (277, yyaction277),
      (278, yyaction278),
      (279, yyaction279),
      (280, yyaction280),
      (281, yyaction281),
      (282, yyaction282),
      (283, yyaction283),
      (284, yyaction284),
      (285, yyaction285),
      (286, yyaction286),
      (287, yyaction287),
      (288, yyaction288),
      (289, yyaction289),
      (290, yyaction290),
      (291, yyaction291),
      (292, yyaction292),
      (293, yyaction293),
      (294, yyaction294),
      (295, yyaction295),
      (296, yyaction296),
      (297, yyaction297),
      (298, yyaction298),
      (299, yyaction299),
      (300, yyaction300),
      (301, yyaction301),
      (302, yyaction302),
      (303, yyaction303),
      (304, yyaction304),
      (305, yyaction305),
      (306, yyaction306),
      (307, yyaction307),
      (308, yyaction308),
      (309, yyaction309),
      (310, yyaction310),
      (311, yyaction311),
      (312, yyaction312),
      (313, yyaction313),
      (314, yyaction314),
      (315, yyaction315),
      (316, yyaction316),
      (317, yyaction317),
      (318, yyaction318),
      (319, yyaction319)];
    sub6 = [      (320, yyaction320),
      (321, yyaction321),
      (322, yyaction322),
      (323, yyaction323),
      (324, yyaction324),
      (325, yyaction325),
      (326, yyaction326),
      (327, yyaction327),
      (328, yyaction328),
      (329, yyaction329),
      (330, yyaction330),
      (331, yyaction331),
      (332, yyaction332),
      (333, yyaction333),
      (334, yyaction334),
      (335, yyaction335),
      (336, yyaction336),
      (337, yyaction337),
      (338, yyaction338),
      (339, yyaction339),
      (340, yyaction340),
      (341, yyaction341),
      (342, yyaction342),
      (343, yyaction343),
      (344, yyaction344),
      (345, yyaction345),
      (346, yyaction346),
      (347, yyaction347),
      (348, yyaction348),
      (349, yyaction349),
      (350, yyaction350),
      (351, yyaction351),
      (352, yyaction352),
      (353, yyaction353),
      (354, yyaction354),
      (355, yyaction355),
      (356, yyaction356),
      (357, yyaction357),
      (358, yyaction358),
      (359, yyaction359),
      (360, yyaction360),
      (361, yyaction361),
      (362, yyaction362),
      (363, yyaction363),
      (364, yyaction364),
      (365, yyaction365),
      (366, yyaction366),
      (367, yyaction367),
      (368, yyaction368),
      (369, yyaction369),
      (370, yyaction370),
      (371, yyaction371),
      (372, yyaction372),
      (373, yyaction373),
      (374, yyaction374),
      (375, yyaction375),
      (376, yyaction376),
      (377, yyaction377),
      (378, yyaction378),
      (379, yyaction379),
      (380, yyaction380),
      (381, yyaction381),
      (382, yyaction382),
      (383, yyaction383)];
    sub7 = [      (384, yyaction384),
      (385, yyaction385),
      (386, yyaction386),
      (387, yyaction387),
      (388, yyaction388),
      (389, yyaction389),
      (390, yyaction390),
      (391, yyaction391),
      (392, yyaction392),
      (393, yyaction393),
      (394, yyaction394),
      (395, yyaction395),
      (396, yyaction396),
      (397, yyaction397),
      (398, yyaction398),
      (399, yyaction399),
      (400, yyaction400),
      (401, yyaction401),
      (402, yyaction402),
      (403, yyaction403),
      (404, yyaction404),
      (405, yyaction405),
      (406, yyaction406),
      (407, yyaction407),
      (408, yyaction408),
      (409, yyaction409),
      (410, yyaction410),
      (411, yyaction411),
      (412, yyaction412),
      (413, yyaction413),
      (414, yyaction414),
      (415, yyaction415),
      (416, yyaction416),
      (417, yyaction417),
      (418, yyaction418),
      (419, yyaction419),
      (420, yyaction420),
      (421, yyaction421),
      (422, yyaction422),
      (423, yyaction423),
      (424, yyaction424),
      (425, yyaction425),
      (426, yyaction426),
      (427, yyaction427),
      (428, yyaction428),
      (429, yyaction429),
      (430, yyaction430),
      (431, yyaction431),
      (432, yyaction432),
      (433, yyaction433),
      (434, yyaction434),
      (435, yyaction435),
      (436, yyaction436),
      (437, yyaction437),
      (438, yyaction438),
      (439, yyaction439),
      (440, yyaction440),
      (441, yyaction441),
      (442, yyaction442),
      (443, yyaction443),
      (444, yyaction444),
      (445, yyaction445),
      (446, yyaction446),
      (447, yyaction447)];
    sub8 = [      (448, yyaction448),
      (449, yyaction449),
      (450, yyaction450),
      (451, yyaction451),
      (452, yyaction452),
      (453, yyaction453),
      (454, yyaction454),
      (455, yyaction455),
      (456, yyaction456),
      (457, yyaction457),
      (458, yyaction458),
      (459, yyaction459),
      (460, yyaction460),
      (461, yyaction461),
      (462, yyaction462),
      (463, yyaction463),
      (464, yyaction464),
      (465, yyaction465),
      (466, yyaction466),
      (467, yyaction467),
      (468, yyaction468),
      (469, yyaction469),
      (470, yyaction470),
      (471, yyaction471),
      (472, yyaction472),
      (473, yyaction473),
      (474, yyaction474),
      (475, yyaction475),
      (476, yyaction476),
      (477, yyaction477),
      (478, yyaction478),
      (479, yyaction479),
      (480, yyaction480),
      (481, yyaction481),
      (482, yyaction482),
      (483, yyaction483),
      (484, yyaction484),
      (485, yyaction485),
      (486, yyaction486),
      (487, yyaction487),
      (488, yyaction488),
      (489, yyaction489),
      (490, yyaction490),
      (491, yyaction491),
      (492, yyaction492),
      (493, yyaction493),
      (494, yyaction494),
      (495, yyaction495),
      (496, yyaction496),
      (497, yyaction497),
      (498, yyaction498),
      (499, yyaction499),
      (500, yyaction500),
      (501, yyaction501),
      (502, yyaction502),
      (503, yyaction503),
      (504, yyaction504),
      (505, yyaction505),
      (506, yyaction506),
      (507, yyaction507),
      (508, yyaction508),
      (509, yyaction509),
      (510, yyaction510),
      (511, yyaction511)];
    sub9 = [      (512, yyaction512),
      (513, yyaction513),
      (514, yyaction514),
      (515, yyaction515),
      (516, yyaction516),
      (517, yyaction517),
      (518, yyaction518),
      (519, yyaction519),
      (520, yyaction520),
      (521, yyaction521),
      (522, yyaction522),
      (523, yyaction523),
      (524, yyaction524),
      (525, yyaction525),
      (526, yyaction526),
      (527, yyaction527),
      (528, yyaction528),
      (529, yyaction529),
      (530, yyaction530),
      (531, yyaction531),
      (532, yyaction532),
      (533, yyaction533),
      (534, yyaction534),
      (535, yyaction535),
      (536, yyaction536),
      (537, yyaction537),
      (538, yyaction538),
      (539, yyaction539),
      (540, yyaction540),
      (541, yyaction541),
      (542, yyaction542),
      (543, yyaction543),
      (544, yyaction544),
      (545, yyaction545),
      (546, yyaction546),
      (547, yyaction547),
      (548, yyaction548),
      (549, yyaction549),
      (550, yyaction550),
      (551, yyaction551),
      (552, yyaction552),
      (553, yyaction553),
      (554, yyaction554),
      (555, yyaction555),
      (556, yyaction556),
      (557, yyaction557),
      (558, yyaction558),
      (559, yyaction559),
      (560, yyaction560),
      (561, yyaction561),
      (562, yyaction562),
      (563, yyaction563),
      (564, yyaction564),
      (565, yyaction565),
      (566, yyaction566),
      (567, yyaction567),
      (568, yyaction568),
      (569, yyaction569),
      (570, yyaction570),
      (571, yyaction571),
      (572, yyaction572),
      (573, yyaction573),
      (574, yyaction574),
      (575, yyaction575)];
    sub10 = [      (576, yyaction576),
      (577, yyaction577),
      (578, yyaction578),
      (579, yyaction579),
      (580, yyaction580),
      (581, yyaction581),
      (582, yyaction582),
      (583, yyaction583),
      (584, yyaction584),
      (585, yyaction585),
      (586, yyaction586),
      (587, yyaction587),
      (588, yyaction588),
      (589, yyaction589),
      (590, yyaction590),
      (591, yyaction591),
      (592, yyaction592),
      (593, yyaction593),
      (594, yyaction594),
      (595, yyaction595),
      (596, yyaction596),
      (597, yyaction597),
      (598, yyaction598),
      (599, yyaction599),
      (600, yyaction600),
      (601, yyaction601),
      (602, yyaction602),
      (603, yyaction603),
      (604, yyaction604),
      (605, yyaction605),
      (606, yyaction606),
      (607, yyaction607),
      (608, yyaction608),
      (609, yyaction609),
      (610, yyaction610),
      (611, yyaction611),
      (612, yyaction612),
      (613, yyaction613),
      (614, yyaction614),
      (615, yyaction615),
      (616, yyaction616),
      (617, yyaction617),
      (618, yyaction618),
      (619, yyaction619),
      (620, yyaction620),
      (621, yyaction621),
      (622, yyaction622),
      (623, yyaction623),
      (624, yyaction624),
      (625, yyaction625),
      (626, yyaction626),
      (627, yyaction627),
      (628, yyaction628),
      (629, yyaction629),
      (630, yyaction630),
      (631, yyaction631),
      (632, yyaction632),
      (633, yyaction633),
      (634, yyaction634),
      (635, yyaction635),
      (636, yyaction636),
      (637, yyaction637),
      (638, yyaction638),
      (639, yyaction639)];
    sub11 = [      (640, yyaction640),
      (641, yyaction641),
      (642, yyaction642),
      (643, yyaction643),
      (644, yyaction644),
      (645, yyaction645),
      (646, yyaction646),
      (647, yyaction647),
      (648, yyaction648),
      (649, yyaction649),
      (650, yyaction650),
      (651, yyaction651),
      (652, yyaction652),
      (653, yyaction653),
      (654, yyaction654),
      (655, yyaction655),
      (656, yyaction656),
      (657, yyaction657),
      (658, yyaction658),
      (659, yyaction659),
      (660, yyaction660),
      (661, yyaction661),
      (662, yyaction662),
      (663, yyaction663),
      (664, yyaction664),
      (665, yyaction665),
      (666, yyaction666),
      (667, yyaction667),
      (668, yyaction668),
      (669, yyaction669),
      (670, yyaction670),
      (671, yyaction671),
      (672, yyaction672),
      (673, yyaction673),
      (674, yyaction674),
      (675, yyaction675),
      (676, yyaction676),
      (677, yyaction677),
      (678, yyaction678),
      (679, yyaction679),
      (680, yyaction680),
      (681, yyaction681),
      (682, yyaction682),
      (683, yyaction683),
      (684, yyaction684),
      (685, yyaction685),
      (686, yyaction686),
      (687, yyaction687),
      (688, yyaction688),
      (689, yyaction689),
      (690, yyaction690),
      (691, yyaction691),
      (692, yyaction692),
      (693, yyaction693),
      (694, yyaction694),
      (695, yyaction695),
      (696, yyaction696),
      (697, yyaction697),
      (698, yyaction698),
      (699, yyaction699),
      (700, yyaction700),
      (701, yyaction701),
      (702, yyaction702),
      (703, yyaction703)];
    sub12 = [      (704, yyaction704),
      (705, yyaction705),
      (706, yyaction706),
      (707, yyaction707),
      (708, yyaction708),
      (709, yyaction709),
      (710, yyaction710),
      (711, yyaction711),
      (712, yyaction712),
      (713, yyaction713)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyrecs  = let 
    sub1 = [      (0, yybadstart 0 "a module"),
      (1, yyparsing  1 "a sequence of doc comments"),
      (2, yyparsing  2 "a module clause"),
      (3, yyexpect 3(yyfromId PACKAGE)),
      (4, yyparsing  4 "a module"),
      (5, yyrecover 5),
      (6, yyparsing  6 "a module"),
      (7, yyparsing  7 "a module clause"),
      (8, yybadstart 8 "the next definition"),
      (9, yyparsing  9 "a sequence of doc comments"),
      (10, yyexpect 10(yyfromId DOCUMENTATION)),
      (11, yyparsing  11 "a variable name"),
      (12, yyparsing  12 "a module name"),
      (13, yyparsing  13 "a module name"),
      (14, yyparsing  14 "a variable name"),
      (15, yyparsing  15 "a variable name"),
      (16, yyparsing  16 "a variable name"),
      (17, yyparsing  17 "a variable name"),
      (18, yyparsing  18 "a variable name"),
      (19, yyparsing  19 "a variable name"),
      (20, yyparsing  20 "a module name"),
      (21, yyexpect 21(yyfromCh '.')),
      (22, yyparsing  22 "a module clause"),
      (23, yyparsing  23 "a module clause"),
      (24, yyparsing  24 "a qualified variable name"),
      (25, yyparsing  25 "a qualified constructor or type name"),
      (26, yyparsing  26 "a qualified variable name"),
      (27, yyparsing  27 "a literal"),
      (28, yyparsing  28 "a literal"),
      (29, yyparsing  29 "a top level expression"),
      (30, yyparsing  30 "a top level expression"),
      (31, yyexpect 31(yyfromCh '{')),
      (32, yyexpect 32(yyfromCh '{')),
      (33, yyparsing  33 "a literal"),
      (34, yyparsing  34 "a literal"),
      (35, yyparsing  35 "a literal"),
      (36, yyparsing  36 "a literal"),
      (37, yyparsing  37 "a literal"),
      (38, yyparsing  38 "a literal"),
      (39, yyparsing  39 "a literal"),
      (40, yyparsing  40 "a literal"),
      (41, yyparsing  41 "binary expression"),
      (42, yyparsing  42 "a term"),
      (43, yyparsing  43 "a term"),
      (44, yyparsing  44 "an unary operator"),
      (45, yyparsing  45 "an unary operator"),
      (46, yyparsing  46 "a lambda abstraction"),
      (47, yyparsing  47 "a term"),
      (48, yyparsing  48 "a module"),
      (49, yyparsing  49 "a frege script"),
      (50, yyparsing  50 "a term"),
      (51, yyparsing  51 "a term"),
      (52, yyparsing  52 "unary expression"),
      (53, yyparsing  53 "an expression"),
      (54, yyparsing  54 "a term"),
      (55, yyparsing  55 "a top level expression"),
      (56, yyparsing  56 "binary expression"),
      (57, yyparsing  57 "a top level expression"),
      (58, yyparsing  58 "function application"),
      (59, yyparsing  59 "unary expression"),
      (60, yyexpect 60(yyfromCh '{')),
      (61, yyparsing  61 "a primary expression"),
      (62, yyparsing  62 "a word"),
      (63, yyexpect 63(yyfromCh '{'))];
    sub2 = [      (64, yyparsing  64 "a module"),
      (65, yyexpect 65(yyfromCh '(')),
      (66, yyparsing  66 "words"),
      (67, yyparsing  67 "a module clause"),
      (68, yyexpect 68(yyfromId PACKAGE)),
      (69, yyparsing  69 "the next definition"),
      (70, yyparsing  70 "a sequence of doc comments"),
      (71, yyparsing  71 "a module name"),
      (72, yyparsing  72 "a module name"),
      (73, yyparsing  73 "a module clause"),
      (74, yyparsing  74 "a variable or an operator"),
      (75, yyparsing  75 "a qualified constructor or type name"),
      (76, yyparsing  76 "a qualified variable name"),
      (77, yyparsing  77 "a variable or an operator"),
      (78, yyparsing  78 "a qualified variable name"),
      (79, yybadstart 79 "then branch"),
      (80, yyexpect 80(yyfromId OF)),
      (81, yyparsing  81 "a top level expression"),
      (82, yyparsing  82 "a primary expression"),
      (83, yyparsing  83 "binary expression"),
      (84, yyparsing  84 "an operator"),
      (85, yyparsing  85 "binary expression"),
      (86, yyparsing  86 "a term"),
      (87, yybadstart 87 "a sequence of one or more ','"),
      (88, yyparsing  88 "a term"),
      (89, yyparsing  89 "a term"),
      (90, yyparsing  90 "unary expression"),
      (91, yyexpect 91(yyfromCh ')')),
      (92, yybadstart 92 "an operator"),
      (93, yyparsing  93 "a term"),
      (94, yyparsing  94 "a term"),
      (95, yyparsing  95 "a term"),
      (96, yyparsing  96 "a lambda abstraction"),
      (97, yyparsing  97 "lambda patterns"),
      (98, yyparsing  98 "a term"),
      (99, yyparsing  99 "unary expression"),
      (100, yyparsing  100 "an expression"),
      (101, yyparsing  101 "binary expression"),
      (102, yyparsing  102 "binary expression"),
      (103, yyparsing  103 "function application"),
      (104, yyparsing  104 "a primary expression"),
      (105, yyexpect 105(yyfromId VARID)),
      (106, yyparsing  106 "a module"),
      (107, yyparsing  107 "a variable name"),
      (108, yyparsing  108 "documentation"),
      (109, yyparsing  109 "a module import"),
      (110, yyexpect 110(yyfromId INTCONST)),
      (111, yyexpect 111(yyfromId INTCONST)),
      (112, yyexpect 112(yyfromId INTCONST)),
      (113, yyparsing  113 "specification for module class "),
      (114, yyexpect 114(yyfromId CONID)),
      (115, yyparsing  115 "a type class declaration"),
      (116, yyparsing  116 "an instance declaration"),
      (117, yyexpect 117(yyfromId DATA)),
      (118, yyexpect 118(yyfromId CONID)),
      (119, yyparsing  119 "an instance derivation"),
      (120, yyparsing  120 "a protected or private declaration"),
      (121, yyparsing  121 "a protected or private declaration"),
      (122, yyparsing  122 "a protected or private declaration"),
      (123, yyexpect 123(yyfromId NATIVE)),
      (124, yyparsing  124 "an annotated item"),
      (125, yyparsing  125 "a module"),
      (126, yybadstart 126 "the next definition"),
      (127, yyparsing  127 "a declaration")];
    sub3 = [      (128, yyparsing  128 "a declaration"),
      (129, yyparsing  129 "a declaration"),
      (130, yyparsing  130 "a top level declaration"),
      (131, yyparsing  131 "a declaration"),
      (132, yyparsing  132 "a top level declaration"),
      (133, yyparsing  133 "a top level declaration"),
      (134, yyparsing  134 "a top level declaration"),
      (135, yyparsing  135 "a declaration"),
      (136, yyparsing  136 "a declaration"),
      (137, yyparsing  137 "a declaration"),
      (138, yyparsing  138 "a declaration"),
      (139, yyparsing  139 "a declaration"),
      (140, yyparsing  140 "a local declaration"),
      (141, yyparsing  141 "a local declaration"),
      (142, yybadstart 142 "a where clause"),
      (143, yyparsing  143 "an annotated item"),
      (144, yyparsing  144 "a fixity declaration"),
      (145, yyexpect 145(yyfromId DCOLON)),
      (146, yyparsing  146 "a list of items to annotate"),
      (147, yyparsing  147 "a declaration of a native item"),
      (148, yyparsing  148 "a declaration of a native item"),
      (149, yybadstart 149 "declarations local to a class, instance or type"),
      (150, yyparsing  150 "a function or pattern binding"),
      (151, yyparsing  151 "left hand side of a function or pattern binding"),
      (152, yyparsing  152 "a module clause"),
      (153, yyparsing  153 "words"),
      (154, yyparsing  154 "a module clause"),
      (155, yyparsing  155 "a module clause"),
      (156, yyparsing  156 "a module name"),
      (157, yyparsing  157 "a qualified constructor or type name"),
      (158, yyparsing  158 "a qualified variable name"),
      (159, yyparsing  159 "then branch"),
      (160, yyexpect 160(yyfromId THEN)),
      (161, yyparsing  161 "a top level expression"),
      (162, yyexpect 162(yyfromCh '{')),
      (163, yyparsing  163 "a function or pattern binding"),
      (164, yybadstart 164 "a where clause"),
      (165, yybadstart 165 "the next definition"),
      (166, yyexpect 166(yyfromCh '}')),
      (167, yyexpect 167(yyfromCh '{')),
      (168, yyparsing  168 "a list comprehension qualifier"),
      (169, yybadstart 169 "the next definition"),
      (170, yyparsing  170 "a list comprehension qualifier"),
      (171, yyexpect 171(yyfromCh '}')),
      (172, yyparsing  172 "a term"),
      (173, yyparsing  173 "a sequence of one or more ','"),
      (174, yyparsing  174 "a term"),
      (175, yyparsing  175 "a term"),
      (176, yyparsing  176 "a term"),
      (177, yyparsing  177 "a term"),
      (178, yyexpect 178(yyfromCh ')')),
      (179, yyparsing  179 "a term"),
      (180, yyparsing  180 "a term"),
      (181, yyparsing  181 "an operator"),
      (182, yyparsing  182 "binary expression"),
      (183, yyexpect 183(yyfromCh ')')),
      (184, yyparsing  184 "list of expressions separated by ','"),
      (185, yyparsing  185 "a term"),
      (186, yyparsing  186 "a term"),
      (187, yyparsing  187 "a term"),
      (188, yyparsing  188 "a lambda body"),
      (189, yyparsing  189 "a lambda body"),
      (190, yyparsing  190 "a lambda abstraction"),
      (191, yyparsing  191 "lambda patterns")];
    sub4 = [      (192, yyparsing  192 "a variable name"),
      (193, yyparsing  193 "a term"),
      (194, yyparsing  194 "field"),
      (195, yyexpect 195(yyfromCh '}')),
      (196, yyparsing  196 "field list"),
      (197, yyparsing  197 "a type variable"),
      (198, yyparsing  198 "a qualified constructor or type name"),
      (199, yyexpect 199(yyfromId VARID)),
      (200, yyparsing  200 "a non function type"),
      (201, yyparsing  201 "a non function type"),
      (202, yyparsing  202 "a type constructor"),
      (203, yyparsing  203 "an expression"),
      (204, yyparsing  204 "a qualified type"),
      (205, yyparsing  205 "a qualified type"),
      (206, yyparsing  206 "a constrained type"),
      (207, yyparsing  207 "a constrained type"),
      (208, yyparsing  208 "a type application"),
      (209, yyparsing  209 "non function types"),
      (210, yyparsing  210 "a non function type"),
      (211, yyparsing  211 "a non function type"),
      (212, yyparsing  212 "binary expression"),
      (213, yyparsing  213 "binary expression"),
      (214, yyparsing  214 "a primary expression"),
      (215, yyexpect 215(yyfromId VARID)),
      (216, yyparsing  216 "a primary expression"),
      (217, yyparsing  217 "a primary expression"),
      (218, yyparsing  218 "a primary expression"),
      (219, yyparsing  219 "a primary expression"),
      (220, yyexpect 220(yyfromCh '}')),
      (221, yyparsing  221 "field list"),
      (222, yyexpect 222(yyfromCh '}')),
      (223, yyparsing  223 "a module import"),
      (224, yyparsing  224 "the start of a fixity declaration"),
      (225, yyparsing  225 "the start of a fixity declaration"),
      (226, yyparsing  226 "the start of a fixity declaration"),
      (227, yybadstart 227 "the type this module derives from"),
      (228, yyparsing  228 "a native item"),
      (229, yyparsing  229 "an annotated item"),
      (230, yyparsing  230 "a native item"),
      (231, yyparsing  231 "a native item"),
      (232, yyparsing  232 "a native item"),
      (233, yyparsing  233 "a data definition"),
      (234, yyparsing  234 "type class context"),
      (235, yybadstart 235 "a type variable"),
      (236, yyparsing  236 "type class context"),
      (237, yybadstart 237 "declarations local to a class, instance or type"),
      (238, yyparsing  238 "instance context"),
      (239, yyparsing  239 "instance constraint"),
      (240, yyparsing  240 "instance context"),
      (241, yyparsing  241 "instance head"),
      (242, yybadstart 242 "declarations local to a class, instance or type"),
      (243, yyparsing  243 "a protected or private declaration"),
      (244, yyparsing  244 "a type declaration"),
      (245, yyparsing  245 "an instance derivation"),
      (246, yyparsing  246 "a native item"),
      (247, yyparsing  247 "a protected or private declaration"),
      (248, yyparsing  248 "a protected or private declaration"),
      (249, yyparsing  249 "a protected or private declaration"),
      (250, yyparsing  250 "a declaration of a native item"),
      (251, yyparsing  251 "an annotated item"),
      (252, yyparsing  252 "an annotated item"),
      (253, yyparsing  253 "an annotated item"),
      (254, yyparsing  254 "declarations"),
      (255, yyparsing  255 "a declaration")];
    sub5 = [      (256, yyexpect 256(yyfromCh '{')),
      (257, yyparsing  257 "a function or pattern binding"),
      (258, yyparsing  258 "an operator"),
      (259, yyparsing  259 "an operator"),
      (260, yyparsing  260 "an operator"),
      (261, yyparsing  261 "some operators"),
      (262, yyparsing  262 "a fixity declaration"),
      (263, yyparsing  263 "an annotation"),
      (264, yyparsing  264 "a list of items to annotate"),
      (265, yyparsing  265 "a valid java identifier"),
      (266, yyparsing  266 "a valid java identifier"),
      (267, yybadstart 267 "a valid java identifier"),
      (268, yyparsing  268 "a valid java identifier"),
      (269, yyparsing  269 "a declaration of a native item"),
      (270, yyexpect 270(yyfromId DCOLON)),
      (271, yyexpect 271(yyfromId DCOLON)),
      (272, yyexpect 272(yyfromId DCOLON)),
      (273, yyexpect 273(yyfromCh '{')),
      (274, yyparsing  274 "a data definition"),
      (275, yyparsing  275 "a guarded expression"),
      (276, yyparsing  276 "a function or pattern binding"),
      (277, yyparsing  277 "a function or pattern binding"),
      (278, yyparsing  278 "guarded expressions"),
      (279, yyparsing  279 "a qualified variable name"),
      (280, yyexpect 280(yyfromCh ')')),
      (281, yyparsing  281 "a qualified variable name"),
      (282, yyparsing  282 "a list of qualified variable names"),
      (283, yyparsing  283 "a qualified variable name"),
      (284, yyparsing  284 "a module clause"),
      (285, yyparsing  285 "then branch"),
      (286, yybadstart 286 "else branch"),
      (287, yyparsing  287 "a top level expression"),
      (288, yyparsing  288 "declarations in a let expression or where clause"),
      (289, yyexpect 289(yyfromId IN)),
      (290, yyparsing  290 "a list comprehension qualifier"),
      (291, yyparsing  291 "a guard qualifier"),
      (292, yyparsing  292 "a list comprehension qualifier"),
      (293, yyparsing  293 "do expression qualifiers"),
      (294, yyparsing  294 "a primary expression"),
      (295, yyparsing  295 "list of expressions separated by ';'"),
      (296, yyexpect 296(yyfromCh ')')),
      (297, yyparsing  297 "list of expressions separated by ','"),
      (298, yyexpect 298(yyfromCh ')')),
      (299, yyparsing  299 "a term"),
      (300, yyparsing  300 "a term"),
      (301, yyparsing  301 "a term"),
      (302, yyparsing  302 "list of expressions separated by ','"),
      (303, yyparsing  303 "list comprehension qualifiers"),
      (304, yyexpect 304(yyfromCh ']')),
      (305, yyparsing  305 "a term"),
      (306, yyexpect 306(yyfromCh ']')),
      (307, yyparsing  307 "a lambda body"),
      (308, yyparsing  308 "field"),
      (309, yyparsing  309 "a term"),
      (310, yyparsing  310 "field list"),
      (311, yyexpect 311(yyfromId CONID)),
      (312, yyparsing  312 "a type variable bound in a forall"),
      (313, yybadstart 313 "'.' or 'â¢'"),
      (314, yyparsing  314 "type variables bound in a forall"),
      (315, yyparsing  315 "a type variable"),
      (316, yyexpect 316(yyfromCh ')')),
      (317, yyparsing  317 "a type constructor"),
      (318, yyparsing  318 "a non function type"),
      (319, yyparsing  319 "a non function type")];
    sub6 = [      (320, yyparsing  320 "a non function type"),
      (321, yyexpect 321(yyfromCh ')')),
      (322, yyparsing  322 "a type constructor"),
      (323, yyexpect 323(yyfromCh ']')),
      (324, yyparsing  324 "a type"),
      (325, yyparsing  325 "a constrained type"),
      (326, yyparsing  326 "non function types"),
      (327, yyparsing  327 "a primary expression"),
      (328, yyexpect 328(yyfromCh '}')),
      (329, yyexpect 329(yyfromCh ']')),
      (330, yyparsing  330 "a primary expression"),
      (331, yyexpect 331(yyfromCh '}')),
      (332, yyparsing  332 "a primary expression"),
      (333, yyparsing  333 "a primary expression"),
      (334, yyparsing  334 "field list"),
      (335, yyparsing  335 "a module"),
      (336, yyparsing  336 "a module import"),
      (337, yyparsing  337 "a module import"),
      (338, yyparsing  338 "an import list"),
      (339, yyparsing  339 "an import list"),
      (340, yyparsing  340 "a module import"),
      (341, yyexpect 341(yyfromCh '(')),
      (342, yyparsing  342 "the type this module derives from"),
      (343, yybadstart 343 "the interfaces this module implements"),
      (344, yyexpect 344(yyfromCh ')')),
      (345, yyexpect 345(yyfromCh ')')),
      (346, yyexpect 346(yyfromCh ')')),
      (347, yyexpect 347(yyfromId VARID)),
      (348, yyparsing  348 "a data definition"),
      (349, yyparsing  349 "a sequence of type variables"),
      (350, yyexpect 350(yyfromCh '=')),
      (351, yyparsing  351 "simple constraints"),
      (352, yyexpect 352(yyfromCh ')')),
      (353, yyparsing  353 "simple constraint"),
      (354, yyexpect 354(yyfromId CONID)),
      (355, yyparsing  355 "a type class declaration"),
      (356, yyparsing  356 "instance constraints"),
      (357, yyexpect 357(yyfromCh ')')),
      (358, yyparsing  358 "instance constraint"),
      (359, yyparsing  359 "instance head"),
      (360, yyparsing  360 "an instance declaration"),
      (361, yyparsing  361 "a type declaration"),
      (362, yyexpect 362(yyfromCh '=')),
      (363, yyparsing  363 "an annotated item"),
      (364, yyparsing  364 "an annotated item"),
      (365, yyparsing  365 "an annotated item"),
      (366, yyparsing  366 "declarations"),
      (367, yyparsing  367 "a where clause"),
      (368, yyparsing  368 "some operators"),
      (369, yyparsing  369 "an annotation"),
      (370, yyparsing  370 "a list of items to annotate"),
      (371, yybadstart 371 "a valid java identifier"),
      (372, yyparsing  372 "a valid java identifier"),
      (373, yyparsing  373 "a method type with optional throws clause"),
      (374, yyparsing  374 "method types with optional throws clauses"),
      (375, yyparsing  375 "a declaration of a native item"),
      (376, yyparsing  376 "a declaration of a native item"),
      (377, yyparsing  377 "a declaration of a native item"),
      (378, yyparsing  378 "a declaration of a native item"),
      (379, yyparsing  379 "declarations local to a class, instance or type"),
      (380, yyparsing  380 "a guard qualifier"),
      (381, yyparsing  381 "guard qualifiers"),
      (382, yybadstart 382 "'='"),
      (383, yyparsing  383 "a function or pattern binding")];
    sub7 = [      (384, yyparsing  384 "guarded expressions"),
      (385, yyparsing  385 "a qualified variable name"),
      (386, yyparsing  386 "a qualified variable name"),
      (387, yyparsing  387 "a module clause"),
      (388, yyparsing  388 "a list of qualified variable names"),
      (389, yyparsing  389 "else branch"),
      (390, yyexpect 390(yyfromId ELSE)),
      (391, yyparsing  391 "a top level expression"),
      (392, yyparsing  392 "a pattern"),
      (393, yyparsing  393 "case alternative"),
      (394, yybadstart 394 "a where clause"),
      (395, yyexpect 395(yyfromCh '}')),
      (396, yyparsing  396 "declarations in a let expression or where clause"),
      (397, yyparsing  397 "a top level expression"),
      (398, yyexpect 398(yyfromCh '}')),
      (399, yyparsing  399 "a guard qualifier"),
      (400, yyparsing  400 "a list comprehension qualifier"),
      (401, yyparsing  401 "do expression qualifiers"),
      (402, yyparsing  402 "list of expressions separated by ';'"),
      (403, yyparsing  403 "a term"),
      (404, yyparsing  404 "a term"),
      (405, yyparsing  405 "list comprehension qualifiers"),
      (406, yyparsing  406 "a term"),
      (407, yyparsing  407 "a term"),
      (408, yyparsing  408 "field"),
      (409, yyparsing  409 "field list"),
      (410, yyparsing  410 "'.' or 'â¢'"),
      (411, yyparsing  411 "'.' or 'â¢'"),
      (412, yyparsing  412 "a qualified type"),
      (413, yyparsing  413 "type variables bound in a forall"),
      (414, yyparsing  414 "a type variable"),
      (415, yyparsing  415 "a type constructor"),
      (416, yyparsing  416 "a non function type"),
      (417, yyparsing  417 "a non function type"),
      (418, yyparsing  418 "a non function type"),
      (419, yyparsing  419 "a non function type"),
      (420, yyparsing  420 "a type constructor"),
      (421, yyparsing  421 "a non function type"),
      (422, yyparsing  422 "a type"),
      (423, yyparsing  423 "a type"),
      (424, yyparsing  424 "a constrained type"),
      (425, yyparsing  425 "a primary expression"),
      (426, yyexpect 426(yyfromCh '}')),
      (427, yyparsing  427 "a primary expression"),
      (428, yyparsing  428 "a primary expression"),
      (429, yyparsing  429 "a primary expression"),
      (430, yyparsing  430 "a primary expression"),
      (431, yyparsing  431 "field"),
      (432, yyparsing  432 "a primary expression"),
      (433, yyparsing  433 "a primary expression"),
      (434, yyparsing  434 "field"),
      (435, yyparsing  435 "field"),
      (436, yyparsing  436 "field list"),
      (437, yyparsing  437 "a module import"),
      (438, yyparsing  438 "a module import"),
      (439, yyparsing  439 "an import list"),
      (440, yyparsing  440 "an import item"),
      (441, yyparsing  441 "a qualified variable name"),
      (442, yyparsing  442 "an import specification"),
      (443, yyparsing  443 "an import list"),
      (444, yyexpect 444(yyfromCh ')')),
      (445, yyparsing  445 "a list of import items"),
      (446, yyparsing  446 "an import specification"),
      (447, yyparsing  447 "an import item")];
    sub8 = [      (448, yyparsing  448 "an import item"),
      (449, yyparsing  449 "an import item"),
      (450, yyparsing  450 "an import item"),
      (451, yyparsing  451 "an import list"),
      (452, yyparsing  452 "the type this module derives from"),
      (453, yyparsing  453 "the interfaces this module implements"),
      (454, yyexpect 454(yyfromId WHERE)),
      (455, yyparsing  455 "an annotated item"),
      (456, yyparsing  456 "an annotated item"),
      (457, yyparsing  457 "an annotated item"),
      (458, yyexpect 458(yyfromId DCOLON)),
      (459, yyparsing  459 "a variant of an algebraic datatype"),
      (460, yyparsing  460 "a variant of an algebraic datatype"),
      (461, yyparsing  461 "a native data type"),
      (462, yyparsing  462 "a variant of an algebraic datatype"),
      (463, yyparsing  463 "a variant of an algebraic datatype"),
      (464, yyparsing  464 "a variant of an algebraic datatype"),
      (465, yyexpect 465(yyfromId NATIVE)),
      (466, yyexpect 466(yyfromId NATIVE)),
      (467, yyexpect 467(yyfromId CONID)),
      (468, yyexpect 468(yyfromId CONID)),
      (469, yybadstart 469 "a valid java identifier"),
      (470, yyparsing  470 "a data definition"),
      (471, yyparsing  471 "an algebraic datatype"),
      (472, yyparsing  472 "a variant of an algebraic datatype"),
      (473, yyparsing  473 "a variant of an algebraic datatype"),
      (474, yyparsing  474 "a variant of an algebraic datatype"),
      (475, yyparsing  475 "a sequence of type variables"),
      (476, yyparsing  476 "a data definition"),
      (477, yyparsing  477 "simple constraints"),
      (478, yyparsing  478 "type class context"),
      (479, yybadstart 479 "a type variable"),
      (480, yyparsing  480 "instance constraints"),
      (481, yyparsing  481 "instance context"),
      (482, yybadstart 482 "a sequence of one or more ','"),
      (483, yyexpect 483(yyfromCh ']')),
      (484, yyparsing  484 "instance head"),
      (485, yyparsing  485 "a type declaration"),
      (486, yyparsing  486 "a type declaration"),
      (487, yyparsing  487 "a where clause"),
      (488, yyexpect 488(yyfromCh '}')),
      (489, yyparsing  489 "a valid java identifier"),
      (490, yyparsing  490 "a method type with optional throws clause"),
      (491, yyparsing  491 "method types with optional throws clauses"),
      (492, yyparsing  492 "a declaration of a native item"),
      (493, yyparsing  493 "a declaration of a native item"),
      (494, yyparsing  494 "a declaration of a native item"),
      (495, yyparsing  495 "a protected or private local declaration"),
      (496, yyparsing  496 "a protected or private local declaration"),
      (497, yyparsing  497 "a protected or private local declaration"),
      (498, yyparsing  498 "declarations local to a class, instance or type"),
      (499, yyparsing  499 "a commented local declaration"),
      (500, yyparsing  500 "a protected or private local declaration"),
      (501, yyexpect 501(yyfromCh '}')),
      (502, yybadstart 502 "the next definition"),
      (503, yyparsing  503 "a commented local declaration"),
      (504, yyparsing  504 "guard qualifiers"),
      (505, yyparsing  505 "'='"),
      (506, yyparsing  506 "'='"),
      (507, yyparsing  507 "a guarded expression"),
      (508, yyparsing  508 "a qualified variable name"),
      (509, yyparsing  509 "a list of qualified variable names"),
      (510, yyparsing  510 "else branch"),
      (511, yyparsing  511 "a top level expression")];
    sub9 = [      (512, yyparsing  512 "case alternative"),
      (513, yyparsing  513 "case alternative"),
      (514, yyparsing  514 "list of case alternatives"),
      (515, yyparsing  515 "case alternative"),
      (516, yyparsing  516 "a top level expression"),
      (517, yyparsing  517 "a top level expression"),
      (518, yyparsing  518 "a list comprehension qualifier"),
      (519, yyparsing  519 "list of expressions separated by ';'"),
      (520, yyparsing  520 "list comprehension qualifiers"),
      (521, yyparsing  521 "a qualified type"),
      (522, yyparsing  522 "a type kind"),
      (523, yyparsing  523 "a type kind"),
      (524, yyparsing  524 "a type kind"),
      (525, yyexpect 525(yyfromCh ')')),
      (526, yyparsing  526 "a type kind"),
      (527, yyparsing  527 "a list of types"),
      (528, yyexpect 528(yyfromCh ')')),
      (529, yyparsing  529 "a list of types separated by '|'"),
      (530, yyexpect 530(yyfromCh ')')),
      (531, yyparsing  531 "a non function type"),
      (532, yyparsing  532 "a primary expression"),
      (533, yyparsing  533 "a primary expression"),
      (534, yyparsing  534 "a primary expression"),
      (535, yyparsing  535 "field"),
      (536, yyparsing  536 "field"),
      (537, yyparsing  537 "a module import"),
      (538, yyparsing  538 "an import item"),
      (539, yyparsing  539 "a qualified variable name"),
      (540, yyparsing  540 "an import specification"),
      (541, yyparsing  541 "an import list"),
      (542, yyparsing  542 "a list of import items"),
      (543, yyparsing  543 "a simple name for a member or import item"),
      (544, yyparsing  544 "a simple name for a member or import item"),
      (545, yyparsing  545 "a simple name for a member or import item"),
      (546, yyparsing  546 "an import specification"),
      (547, yyexpect 547(yyfromCh ')')),
      (548, yyparsing  548 "the interfaces this module implements"),
      (549, yyexpect 549(yyfromCh '{')),
      (550, yyparsing  550 "specification for module class "),
      (551, yyparsing  551 "a variant of an algebraic datatype"),
      (552, yyparsing  552 "constructor types"),
      (553, yyparsing  553 "a variant of an algebraic datatype"),
      (554, yyparsing  554 "a variant of an algebraic datatype"),
      (555, yyparsing  555 "a variant of an algebraic datatype"),
      (556, yyparsing  556 "a variant of an algebraic datatype"),
      (557, yyparsing  557 "a variant of an algebraic datatype"),
      (558, yyparsing  558 "a native data type"),
      (559, yyparsing  559 "a native data type"),
      (560, yyparsing  560 "a variant of an algebraic datatype"),
      (561, yyparsing  561 "a variant of an algebraic datatype"),
      (562, yyparsing  562 "a data definition"),
      (563, yyparsing  563 "an algebraic datatype"),
      (564, yyparsing  564 "a variant of an algebraic datatype"),
      (565, yybadstart 565 "a valid java identifier"),
      (566, yyparsing  566 "a data definition"),
      (567, yyparsing  567 "simple constraints"),
      (568, yybadstart 568 "declarations local to a class, instance or type"),
      (569, yyparsing  569 "instance constraints"),
      (570, yyparsing  570 "instance head"),
      (571, yyparsing  571 "a type declaration"),
      (572, yyparsing  572 "a where clause"),
      (573, yyparsing  573 "a method type with optional throws clause"),
      (574, yyparsing  574 "method types with optional throws clauses"),
      (575, yyparsing  575 "a protected or private local declaration")];
    sub10 = [      (576, yyparsing  576 "a protected or private local declaration"),
      (577, yyparsing  577 "a protected or private local declaration"),
      (578, yyparsing  578 "a commented local declaration"),
      (579, yyparsing  579 "declarations local to a class, instance or type"),
      (580, yyparsing  580 "local declarations"),
      (581, yyparsing  581 "guard qualifiers"),
      (582, yyparsing  582 "a guarded expression"),
      (583, yyparsing  583 "case alternative"),
      (584, yyparsing  584 "list of case alternatives"),
      (585, yyexpect 585(yyfromCh ')')),
      (586, yyparsing  586 "a type variable"),
      (587, yyparsing  587 "a type kind"),
      (588, yyparsing  588 "a list of types"),
      (589, yyparsing  589 "a non function type"),
      (590, yyparsing  590 "a list of types separated by '|'"),
      (591, yyparsing  591 "a non function type"),
      (592, yyparsing  592 "a member import specification"),
      (593, yyparsing  593 "an import item"),
      (594, yyexpect 594(yyfromCh ')')),
      (595, yyparsing  595 "a member import specification"),
      (596, yyparsing  596 "a list of member imports"),
      (597, yyparsing  597 "a list of import items"),
      (598, yyparsing  598 "an import list"),
      (599, yyparsing  599 "java code"),
      (600, yyparsing  600 "a field specification"),
      (601, yyparsing  601 "a field specification"),
      (602, yyexpect 602(yyfromId VARID)),
      (603, yyexpect 603(yyfromId VARID)),
      (604, yyparsing  604 "a constructor field"),
      (605, yyparsing  605 "a field specification"),
      (606, yyexpect 606(yyfromCh '}')),
      (607, yyparsing  607 "constructor fields"),
      (608, yyexpect 608(yyfromId DCOLON)),
      (609, yyparsing  609 "field specifications"),
      (610, yyparsing  610 "a field specification"),
      (611, yyparsing  611 "a field specification"),
      (612, yyparsing  612 "an algebraic datatype"),
      (613, yyparsing  613 "a data definition"),
      (614, yyparsing  614 "a type class declaration"),
      (615, yyparsing  615 "local declarations"),
      (616, yyparsing  616 "a type kind"),
      (617, yyparsing  617 "a type kind"),
      (618, yyparsing  618 "a list of types"),
      (619, yyparsing  619 "a list of types separated by '|'"),
      (620, yyparsing  620 "a member import specification"),
      (621, yyparsing  621 "an import item"),
      (622, yyparsing  622 "a member import specification"),
      (623, yyparsing  623 "a list of member imports"),
      (624, yyparsing  624 "java token"),
      (625, yyparsing  625 "java token"),
      (626, yyparsing  626 "java token"),
      (627, yyparsing  627 "java token"),
      (628, yyparsing  628 "java token"),
      (629, yyparsing  629 "java token"),
      (630, yyparsing  630 "java token"),
      (631, yyparsing  631 "java token"),
      (632, yyparsing  632 "java token"),
      (633, yyparsing  633 "java token"),
      (634, yyparsing  634 "java token"),
      (635, yyparsing  635 "java token"),
      (636, yyparsing  636 "java token"),
      (637, yyparsing  637 "java token"),
      (638, yyparsing  638 "java token"),
      (639, yyparsing  639 "java token")];
    sub11 = [      (640, yyparsing  640 "java token"),
      (641, yyparsing  641 "java token"),
      (642, yyparsing  642 "java token"),
      (643, yyparsing  643 "java token"),
      (644, yyparsing  644 "java token"),
      (645, yyparsing  645 "java token"),
      (646, yyparsing  646 "java token"),
      (647, yyparsing  647 "java token"),
      (648, yyparsing  648 "java token"),
      (649, yyparsing  649 "java token"),
      (650, yyparsing  650 "java token"),
      (651, yyparsing  651 "java token"),
      (652, yyparsing  652 "java token"),
      (653, yyparsing  653 "java token"),
      (654, yyparsing  654 "java token"),
      (655, yyparsing  655 "java token"),
      (656, yyparsing  656 "java token"),
      (657, yyparsing  657 "java token"),
      (658, yyparsing  658 "java token"),
      (659, yyparsing  659 "java token"),
      (660, yyparsing  660 "java token"),
      (661, yyparsing  661 "java token"),
      (662, yyparsing  662 "java token"),
      (663, yyparsing  663 "java token"),
      (664, yyparsing  664 "java token"),
      (665, yyparsing  665 "java token"),
      (666, yyparsing  666 "java token"),
      (667, yyparsing  667 "java token"),
      (668, yyparsing  668 "java token"),
      (669, yyparsing  669 "java token"),
      (670, yyparsing  670 "java token"),
      (671, yyparsing  671 "java token"),
      (672, yyparsing  672 "java token"),
      (673, yyparsing  673 "java token"),
      (674, yyparsing  674 "java token"),
      (675, yyparsing  675 "java tokens"),
      (676, yyparsing  676 "java code"),
      (677, yyparsing  677 "java token"),
      (678, yyparsing  678 "java token"),
      (679, yyparsing  679 "java token"),
      (680, yyparsing  680 "java token"),
      (681, yyparsing  681 "java token"),
      (682, yyparsing  682 "java token"),
      (683, yyparsing  683 "java token"),
      (684, yyparsing  684 "java token"),
      (685, yyparsing  685 "java token"),
      (686, yyparsing  686 "java token"),
      (687, yyparsing  687 "java token"),
      (688, yyexpect 688(yyfromCh '}')),
      (689, yyparsing  689 "java tokens"),
      (690, yyparsing  690 "a field specification"),
      (691, yyparsing  691 "a field specification"),
      (692, yyparsing  692 "a field specification"),
      (693, yyparsing  693 "a field specification"),
      (694, yyexpect 694(yyfromId DCOLON)),
      (695, yyparsing  695 "a variant of an algebraic datatype"),
      (696, yyparsing  696 "constructor fields"),
      (697, yyparsing  697 "constructor fields"),
      (698, yyparsing  698 "a constructor field"),
      (699, yyparsing  699 "field specifications"),
      (700, yyparsing  700 "a list of member imports"),
      (701, yyparsing  701 "java tokens"),
      (702, yyexpect 702(yyfromCh '}')),
      (703, yyparsing  703 "java code")];
    sub12 = [      (704, yyparsing  704 "java tokens"),
      (705, yyparsing  705 "a constructor field"),
      (706, yyparsing  706 "constructor fields"),
      (707, yyparsing  707 "constructor fields"),
      (708, yyparsing  708 "a constructor field"),
      (709, yyparsing  709 "field specifications"),
      (710, yyparsing  710 "java tokens"),
      (711, yyparsing  711 "java tokens"),
      (712, yyparsing  712 "a constructor field"),
      (713, yyparsing  713 "java tokens")];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyeacts = let 
    sub1 = [      (5, yyAccept),
      (8, (-25)),
      (9, (-15)),
      (11, (-172)),
      (12, (-10)),
      (14, (-177)),
      (15, (-178)),
      (16, (-175)),
      (17, (-173)),
      (18, (-174)),
      (19, (-176)),
      (20, (-13)),
      (22, (-18)),
      (24, (-183)),
      (25, (-186)),
      (27, (-337)),
      (28, (-338)),
      (33, (-341)),
      (34, (-340)),
      (35, (-343)),
      (36, (-344)),
      (37, (-345)),
      (38, (-339)),
      (39, (-346)),
      (40, (-342)),
      (44, (-195)),
      (45, (-194)),
      (47, (-415)),
      (48, (-3)),
      (49, (-4)),
      (50, (-413)),
      (51, (-416)),
      (53, (-377)),
      (54, (-414)),
      (55, (-389)),
      (56, (-385)),
      (57, (-390)),
      (58, (-391)),
      (59, (-393)),
      (61, (-399)),
      (62, (-22)),
      (69, (-26)),
      (70, (-16)),
      (71, (-12)),
      (73, (-20)),
      (74, (-187)),
      (75, (-185)),
      (77, (-188)),
      (78, (-182)),
      (83, (-384)),
      (84, (-193)),
      (86, (-419)),
      (93, (-430)),
      (99, (-394)),
      (103, (-392)),
      (108, (-117)),
      (125, (-1)),
      (126, (-27)),
      (127, (-30)),
      (128, (-32)),
      (129, (-33)),
      (130, (-41)),
      (131, (-119)),
      (132, (-38))];
    sub2 = [      (133, (-39)),
      (134, (-40)),
      (135, (-118)),
      (136, (-120)),
      (137, (-121)),
      (138, (-122)),
      (139, (-123)),
      (140, (-127)),
      (141, (-128)),
      (142, (-129)),
      (143, (-206)),
      (147, (-213)),
      (149, (-328)),
      (153, (-24)),
      (154, (-17)),
      (156, (-11)),
      (157, (-184)),
      (158, (-181)),
      (159, (-379)),
      (163, (-137)),
      (170, (-350)),
      (172, (-423)),
      (173, (-436)),
      (175, (-429)),
      (177, (-422)),
      (179, (-421)),
      (180, (-420)),
      (187, (-431)),
      (189, (-374)),
      (190, (-373)),
      (191, (-396)),
      (192, (-171)),
      (193, (-417)),
      (197, (-252)),
      (202, (-254)),
      (203, (-376)),
      (204, (-229)),
      (205, (-230)),
      (206, (-236)),
      (207, (-235)),
      (208, (-245)),
      (209, (-308)),
      (210, (-246)),
      (211, (-247)),
      (212, (-382)),
      (213, (-383)),
      (214, (-401)),
      (217, (-402)),
      (218, (-403)),
      (223, (-145)),
      (224, (-196)),
      (225, (-198)),
      (226, (-197)),
      (228, (-217)),
      (230, (-215)),
      (231, (-216)),
      (232, (-214)),
      (236, (-268)),
      (237, (-328)),
      (240, (-276)),
      (241, (-279)),
      (242, (-328)),
      (243, (-37)),
      (245, (-281))];
    sub3 = [      (247, (-34)),
      (248, (-35)),
      (249, (-36)),
      (250, (-212)),
      (254, (-28)),
      (255, (-31)),
      (257, (-335)),
      (258, (-200)),
      (259, (-201)),
      (260, (-199)),
      (261, (-202)),
      (262, (-204)),
      (265, (-5)),
      (266, (-6)),
      (268, (-9)),
      (274, (-282)),
      (277, (-334)),
      (278, (-365)),
      (281, (-192)),
      (283, (-191)),
      (284, (-19)),
      (285, (-378)),
      (294, (-400)),
      (299, (-424)),
      (300, (-426)),
      (301, (-425)),
      (302, (-449)),
      (305, (-432)),
      (307, (-375)),
      (309, (-418)),
      (312, (-228)),
      (317, (-256)),
      (319, (-239)),
      (320, (-238)),
      (322, (-255)),
      (326, (-309)),
      (333, (-407)),
      (335, (-2)),
      (337, (-145)),
      (338, (-145)),
      (340, (-142)),
      (353, (-264)),
      (355, (-271)),
      (358, (-272)),
      (360, (-280)),
      (366, (-29)),
      (368, (-203)),
      (369, (-205)),
      (370, (-211)),
      (372, (-8)),
      (373, (-219)),
      (374, (-220)),
      (375, (-222)),
      (383, (-333)),
      (384, (-366)),
      (386, (-190)),
      (387, (-21)),
      (389, (-381)),
      (392, (-347)),
      (396, (-141)),
      (399, (-360)),
      (400, (-351)),
      (401, (-358)),
      (403, (-428))];
    sub4 = [      (404, (-427)),
      (406, (-434)),
      (407, (-433)),
      (408, (-446)),
      (409, (-438)),
      (410, (-233)),
      (411, (-232)),
      (413, (-227)),
      (415, (-258)),
      (416, (-248)),
      (420, (-257)),
      (421, (-251)),
      (422, (-236)),
      (423, (-237)),
      (424, (-234)),
      (428, (-411)),
      (429, (-412)),
      (430, (-406)),
      (431, (-443)),
      (432, (-404)),
      (433, (-405)),
      (434, (-444)),
      (436, (-441)),
      (437, (-145)),
      (438, (-144)),
      (439, (-149)),
      (443, (-147)),
      (447, (-153)),
      (448, (-156)),
      (449, (-157)),
      (450, (-158)),
      (452, (-44)),
      (455, (-209)),
      (456, (-207)),
      (457, (-208)),
      (459, (-304)),
      (461, (-285)),
      (470, (-289)),
      (471, (-292)),
      (472, (-294)),
      (473, (-297)),
      (474, (-303)),
      (475, (-291)),
      (478, (-269)),
      (481, (-277)),
      (485, (-326)),
      (487, (-331)),
      (489, (-7)),
      (492, (-223)),
      (493, (-224)),
      (494, (-225)),
      (498, (-329)),
      (500, (-130)),
      (503, (-136)),
      (505, (-348)),
      (506, (-349)),
      (508, (-189)),
      (509, (-180)),
      (510, (-380)),
      (511, (-386)),
      (512, (-368)),
      (515, (-369)),
      (516, (-387)),
      (517, (-388))];
    sub5 = [      (519, (-452)),
      (520, (-354)),
      (521, (-231)),
      (522, (-262)),
      (523, (-261)),
      (527, (-241)),
      (531, (-240)),
      (532, (-410)),
      (533, (-408)),
      (534, (-409)),
      (537, (-143)),
      (540, (-161)),
      (541, (-148)),
      (543, (-168)),
      (544, (-169)),
      (545, (-170)),
      (546, (-160)),
      (548, (-46)),
      (550, (-42)),
      (552, (-307)),
      (553, (-306)),
      (554, (-296)),
      (555, (-299)),
      (556, (-300)),
      (557, (-298)),
      (558, (-283)),
      (559, (-284)),
      (560, (-302)),
      (561, (-301)),
      (562, (-286)),
      (564, (-295)),
      (566, (-288)),
      (567, (-267)),
      (568, (-328)),
      (569, (-275)),
      (570, (-278)),
      (571, (-327)),
      (572, (-332)),
      (573, (-218)),
      (574, (-221)),
      (575, (-131)),
      (576, (-132)),
      (577, (-133)),
      (578, (-135)),
      (579, (-330)),
      (581, (-362)),
      (582, (-364)),
      (583, (-367)),
      (584, (-371)),
      (586, (-253)),
      (589, (-249)),
      (591, (-250)),
      (593, (-155)),
      (597, (-152)),
      (598, (-146)),
      (605, (-325)),
      (610, (-319)),
      (611, (-322)),
      (612, (-293)),
      (613, (-287)),
      (614, (-270)),
      (615, (-126)),
      (616, (-263)),
      (617, (-259))];
    sub6 = [      (618, (-242)),
      (619, (-244)),
      (620, (-164)),
      (621, (-154)),
      (622, (-163)),
      (624, (-49)),
      (625, (-50)),
      (626, (-51)),
      (627, (-52)),
      (628, (-53)),
      (629, (-54)),
      (630, (-55)),
      (631, (-56)),
      (632, (-57)),
      (633, (-58)),
      (634, (-59)),
      (635, (-60)),
      (636, (-61)),
      (637, (-62)),
      (638, (-63)),
      (639, (-64)),
      (640, (-65)),
      (641, (-66)),
      (642, (-67)),
      (643, (-68)),
      (644, (-69)),
      (645, (-70)),
      (646, (-71)),
      (647, (-72)),
      (648, (-73)),
      (649, (-74)),
      (650, (-75)),
      (651, (-76)),
      (652, (-77)),
      (653, (-78)),
      (654, (-79)),
      (655, (-80)),
      (656, (-81)),
      (657, (-82)),
      (658, (-83)),
      (659, (-84)),
      (660, (-85)),
      (661, (-86)),
      (662, (-87)),
      (663, (-88)),
      (664, (-89)),
      (665, (-90)),
      (666, (-91)),
      (667, (-92)),
      (668, (-93)),
      (669, (-94)),
      (670, (-95)),
      (671, (-96)),
      (672, (-97)),
      (673, (-106)),
      (674, (-107)),
      (676, (-48)),
      (677, (-104)),
      (678, (-102)),
      (679, (-103)),
      (680, (-98)),
      (681, (-99)),
      (682, (-100)),
      (683, (-101))];
    sub7 = [      (684, (-105)),
      (685, (-108)),
      (686, (-109)),
      (687, (-110)),
      (690, (-321)),
      (691, (-320)),
      (692, (-324)),
      (693, (-323)),
      (695, (-305)),
      (700, (-167)),
      (703, (-47)),
      (704, (-112)),
      (706, (-314)),
      (707, (-313)),
      (708, (-315)),
      (709, (-318)),
      (710, (-116)),
      (712, (-316)),
      (713, (-114))];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);


decodeArr s1 s2 = arrayFromIndexList (zip (un s1) (un s2))
    where
        un :: String -> [Int]
        un s = (map ord . unpacked) s

private yygo0 = decodeArr "\u0001\u0002\u0003\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015" "\u0005\u0005\u0005\u0007\u0007\u0007\u0006\u0006\u0006\u0006\u0006"
private yygo1 = decodeArr "\u000e\u000f\u0010\u0019\u001a" "\t\t\t\n\n"
private yygo2 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014\u0016\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo4 = decodeArr "\u0004ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "022233344666666666671155558888899::<<;;;;;;;;;;;;;;======================"
private yygo6 = decodeArr "\u0016\u0017\u0018" "BAA"
private yygo8 = decodeArr "\u0019\u001a" "EE"
private yygo10 = decodeArr "\u000e\u000f\u0010" "FFF"
private yygo13 = decodeArr "\n\u000b\fÂ¬Â­Â®Â¯Â°Â±Â²" "GGG\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo23 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014I\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo26 = decodeArr "Â»Â¼ÃÃ" "NNMM"
private yygo29 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667OO55558888899::<<;;;;;;;;;;;;;;======================"
private yygo30 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667PP55558888899::<<;;;;;;;;;;;;;;======================"
private yygo41 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo42 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´" "222333YZZ66666666667XX\\\\\\\\8888899::<<;;;;;;;;;;;;;;======================[["
private yygo43 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²ÇÇÇ" "2223334466666666667^^55558888899::<<;;;;;;;;;;;;;;======================___"
private yygo46 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666aa``<<;;;;;;;;;;;;;;======================"
private yygo52 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo57 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666gg<<;;;;;;;;;;;;;;======================"
private yygo64 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "}}}~~~~\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo66 = decodeArr "\u0016\u0017\u0018" "B\u0099\u0099"
private yygo67 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014\u009a\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo72 = decodeArr "\n\u000b\fÂ¬Â­Â®Â¯Â°Â±Â²" "\u009c\u009c\u009c\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo76 = decodeArr "Â»Â¼ÃÃ" "\u009e\u009eMM"
private yygo79 = decodeArr "ÅºÅ»" "Â¡Â¡"
private yygo81 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Â¥Â¥Â¦Â¦Â¦\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo82 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¤Å¥Å¦Å§Å¨ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666Â©Â©Â©Â«Â«Â«ÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo85 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo87 = decodeArr "Æ³Æ´" "Â­Â­"
private yygo89 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Â²Â²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo90 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo92 = decodeArr "Ã" "Â·"
private yygo96 = decodeArr "ÅµÅ¶Å·" "Â½Â¾Â¾"
private yygo97 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666aaÂ¿Â¿<<;;;;;;;;;;;;;;======================"
private yygo98 = decodeArr "Â«ÆµÆ¶Æ·Æ¾Æ¿" "ÃÃÃÃÃÃ"
private yygo100 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo101 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo102 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo104 = decodeArr "ÃÃÃ" "ÃÃÃ"
private yygo105 = decodeArr "Æ¸Æ¹ÆºÆ»Æ¼Æ½" "ÃÃÃÃÃÃ"
private yygo106 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "ÃÃÃ~~~~\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo109 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014Ã\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo113 = decodeArr "Â«ÃÃÃÃÃÃÃ" "\u008fÃ¦Ã§Ã§Ã¨Ã¨Ã¨Ã¨"
private yygo115 = decodeArr "Â¸Â¹ÂºÄÄÄ" "Ã«Ã«Ã«Ã¬Ã­Ã­"
private yygo116 = decodeArr "Â¸Â¹ÂºÄÄÄÄÄ" "Ã¯Ã¯Ã¯Ã°Ã±Ã±Ã²Ã²"
private yygo117 = decodeArr "ÄÄÄÄ Ä¡" "Ã³\u0095\u0095\u0095\u0095"
private yygo119 = decodeArr "Â¸Â¹ÂºÄÄÄÄÄ" "Ã¯Ã¯Ã¯Ã°Ã±Ã±ÃµÃµ"
private yygo120 = decodeArr "vwxyz{\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ã·Ã·Ã·Ã·Ã·Ã·\u008b\u008b\u008b\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo121 = decodeArr "vwxyz{\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ã¸Ã¸Ã¸Ã¸Ã¸Ã¸\u008b\u008b\u008b\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo122 = decodeArr "vwxyz{\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ã¹Ã¹Ã¹Ã¹Ã¹Ã¹\u008b\u008b\u008b\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo123 = decodeArr "ÃÃÃÃÃÃÃ Ã¡" "\u0094\u0094\u0094\u0094ÃºÃºÃºÃº"
private yygo124 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´" "222333Ã¼Ã½Ã½66666666667XX\\\\\\\\8888899::<<;;;;;;;;;;;;;;======================[["
private yygo126 = decodeArr "\u0019\u001a" "Ã¾Ã¾"
private yygo127 = decodeArr "\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ã¿Ã¿Ã¿Ã¿\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo142 = decodeArr "ÅÅ" "ÄÄ"
private yygo144 = decodeArr "ÃÃÃÃÃÃ" "ÄÄÄÄÄÄ"
private yygo148 = decodeArr "\u0005\u0006\u0007\b\tÃÃÃ" "ÄÄÄÄÄÄÄÄ"
private yygo149 = decodeArr "ÅÅÅ" "ÄÄÄ"
private yygo150 = decodeArr "Å¬Å­Å®" "ÄÄÄ"
private yygo152 = decodeArr "Â³Â´Â»Â¼Â½Â¾Â¿ÃÃÃÃ" "ÄÄÄÄÄÄÄÄÄMM"
private yygo155 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014Ä\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo161 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÄÄ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo164 = decodeArr "ÅÅ" "ÄÄ"
private yygo165 = decodeArr "\u0019\u001a" "Ä Ä "
private yygo169 = decodeArr "\u0019\u001a" "Ä¥Ä¥"
private yygo174 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²ÇÇÇ" "2223334466666666667Ä§Ä§55558888899::<<;;;;;;;;;;;;;;======================Ä¨Ä¨Ä¨"
private yygo176 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²ÇÇÇ" "2223334466666666667Ä©Ä©55558888899::<<;;;;;;;;;;;;;;======================ÄªÄªÄª"
private yygo181 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo182 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo184 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²ÇÇÇ" "2223334466666666667Ä©Ä©55558888899::<<;;;;;;;;;;;;;;======================Ä®Ä®Ä®"
private yygo185 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å§Å¨ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666Ä¯Ä¯Ä¯Ä°Ä°Ä°ÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo186 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Ä²Ä²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo188 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Ä³Ä³55558888899::<<;;;;;;;;;;;;;;======================"
private yygo199 = decodeArr "Ã¢Ã£Ã¤" "Ä¹Ä¹Äº"
private yygo200 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´ÄµÆ³Æ´" "ÃÃÃÄ¿Ä¾Ä¾Ä¾ÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅÅ"
private yygo201 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÅÅÅÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo209 = decodeArr "Â¸Â¹ÂºÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅÅ"
private yygo215 = decodeArr "Æ¸Æ¹ÆºÆ»Æ¼Æ½" "ÅÅÅÃÃÃ"
private yygo216 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÅÅ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo223 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "ÅÅÅÅÅÅ"
private yygo227 = decodeArr "+," "ÅÅ"
private yygo229 = decodeArr "ÃÃÃ" "ÅÅÅ"
private yygo233 = decodeArr "Ã¼Ã½Ä¢Ä£" "ÅÅÅÅ"
private yygo234 = decodeArr "Â¸Â¹ÂºÄÄÄÄ" "Ã«Ã«Ã«ÅÅ Å Å "
private yygo235 = decodeArr "Ã¼Ã½" "Å¡Å¡"
private yygo237 = decodeArr "ÅÅÅ" "Å£Å£Å£"
private yygo238 = decodeArr "Â¸Â¹ÂºÄÄÄÄ" "Ã¯Ã¯Ã¯Å¤Å¥Å¥Å¥"
private yygo239 = decodeArr "Â¸Â¹ÂºÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄ" "ÃÃÃÅ¦Å¦Å¦Å¦Å¦Å¦ÃÃÃÃÃÃÃ"
private yygo242 = decodeArr "ÅÅÅ" "Å¨Å¨Å¨"
private yygo244 = decodeArr "Ã¼Ã½Ä¢Ä£" "ÅÅÅªÅª"
private yygo246 = decodeArr "Â«ÃÃÃÃÃÃÃ" "\u008fÃ¦Ã§Ã§Ã¨Ã¨Ã¨Ã¨"
private yygo251 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo252 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Â²Â²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo253 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo254 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄ Ä¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Å®Å®Å®~~~~\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo261 = decodeArr "ÃÃÃÃÃÃ" "ÄÄÄÄÅ°Å°"
private yygo263 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÅ±Å±ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo264 = decodeArr "Â«ÃÃÃÃÃÃ" "\u008f\u0092\u0092\u0092\u0092Å²Å²"
private yygo267 = decodeArr "\u0005\u0006\u0007\b\t" "Å´Å´Å´Å´Å´"
private yygo269 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÅ¶Å¶Å·Å·ÅµÅµÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo275 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ«ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666Å½Å½Å¾Å¾Å¾7Å¼Å¼55558888899::<<;;;;;;;;;;;;;;======================"
private yygo276 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Å¿Å¿55558888899::<<;;;;;;;;;;;;;;======================"
private yygo278 = decodeArr "Å¬Å­Å®" "ÄÆÆ"
private yygo279 = decodeArr "Â»Â¼ÃÃ" "ÆÆMM"
private yygo286 = decodeArr "Å¼Å½" "ÆÆ"
private yygo287 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅ¯Å°Å±Å²Å³Å´ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666ÆÆÆÆÆÆÆ7ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo288 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Â¥Â¥ÆÆÆ\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo290 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Â¥Â¥ÆÆÆ\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo291 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo292 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo293 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¤Å¥Å¦Å§Å¨ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666Â©Â©Â©ÆÆÆÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo308 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo310 = decodeArr "Â«ÆµÆ¶Æ·Æ¾Æ¿" "ÃÆÆÆÃÃ"
private yygo313 = decodeArr "Ã¨Ã©" "ÆÆ"
private yygo314 = decodeArr "Ã¢Ã£Ã¤" "ÆÆÄº"
private yygo324 = decodeArr "Â¸Â¹ÂºÃ¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÆ§Æ§Æ¦ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo325 = decodeArr "Â¸Â¹ÂºÃ¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÆ¨Æ¨Æ¦ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo330 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Æ¯Æ¯55558888899::<<;;;;;;;;;;;;;;======================"
private yygo332 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Æ²Æ²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo334 = decodeArr "Æ¸Æ¹ÆºÆ»Æ¼Æ½" "Æ´Æ´Æ´ÃÃÃ"
private yygo337 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "Æ¶Æ¶Æ¶Æ¶Æ¶Å"
private yygo338 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "Æ·Æ·Æ·Æ·Æ·Å"
private yygo339 = decodeArr "\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "Æ¼Æ¼Æ¼Æ¾Æ¾Æ¾Æ¾Æ¾Æ¾Æ½Æ½Æ½Æ¿Æ¿Æ¿ÇÇÇÇÇÇ"
private yygo342 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÇÇÇÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo343 = decodeArr "-." "ÇÇ"
private yygo348 = decodeArr "ÄÄÄÄ¤Ä¥Ä¦Ä§Ä¨Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²" "ÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇ"
private yygo349 = decodeArr "Ã¼Ã½Ä¢Ä£" "ÅÅÇÇ"
private yygo359 = decodeArr "Â¸Â¹ÂºÃ¾Ã¿ÄÄÄ" "ÃÃÃÇ¤Ç¤Ç¤Ç¤Ç¤"
private yygo361 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÇ¥Ç¥ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo367 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Â¥Â¥Ç¨Ç¨Ç¨\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo371 = decodeArr "\u0005\u0006\u0007\b\t" "Ç©Ç©Ç©Ç©Ç©"
private yygo376 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÅ¶Å¶Ç¬Ç¬ÅµÅµÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo377 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÅ¶Å¶Ç­Ç­ÅµÅµÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo378 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÅ¶Å¶Ç®Ç®ÅµÅµÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo379 = decodeArr "u|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ç³ÇµÇµÇµÇ´Ç´Ç´Ç·Ç·Ç·Ç·Ç¶Ç¶Ç¶\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo382 = decodeArr "ÅÅ" "Ç»Ç»"
private yygo385 = decodeArr "Â»Â¼ÃÃ" "Ç¼Ç¼MM"
private yygo388 = decodeArr "Â³Â´Â»Â¼Â½Â¾Â¿ÃÃÃÃ" "Ç½Ç½ÄÄÄÄÄÄÄMM"
private yygo391 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Ç¿Ç¿55558888899::<<;;;;;;;;;;;;;;======================"
private yygo393 = decodeArr "ÅÅÅ¬Å­Å®" "ÈÈÄÈÈ"
private yygo394 = decodeArr "ÅÅ" "ÈÈ"
private yygo397 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÈÈ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo402 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²ÇÇÇ" "2223334466666666667Ä§Ä§55558888899::<<;;;;;;;;;;;;;;======================ÈÈÈ"
private yygo405 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å§Å¨ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666Ä¯Ä¯Ä¯ÈÈÈÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo412 = decodeArr "Â¸Â¹ÂºÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÈÈÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo414 = decodeArr "ÄÄÄÄÄ" "ÈÈÈÈÈ"
private yygo417 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÈÈÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo418 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÈÈÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo419 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo425 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Æ¯Æ¯55558888899::<<;;;;;;;;;;;;;;======================"
private yygo427 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Æ²Æ²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo437 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "ÈÈÈÈÈÅ"
private yygo441 = decodeArr "Â»Â¼ÃÃ" "NNMM"
private yygo442 = decodeArr "\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "Æ¾Æ¾Æ¾Æ¾Æ¾Æ¾ÈÈÈÆ¿Æ¿Æ¿ÇÇÇÇÇÇ"
private yygo446 = decodeArr "Â¨Â©ÂªÃ" "È¢È¢È¢È¡"
private yygo451 = decodeArr "\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "È£È£È£Æ¾Æ¾Æ¾Æ¾Æ¾Æ¾Æ½Æ½Æ½Æ¿Æ¿Æ¿ÇÇÇÇÇÇ"
private yygo453 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÈ¤È¤ÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo454 = decodeArr "/0" "È¦È¦"
private yygo459 = decodeArr "Â¸Â¹ÂºÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ³Ä´Äµ" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÈ©È¨È¨"
private yygo460 = decodeArr "Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²" "ÈªÈªÈªÈªÇÇÇÇÇÇ"
private yygo462 = decodeArr "Ä­Ä®Ä¯Ä°Ä±Ä²" "È«È«È«ÇÇÇ"
private yygo463 = decodeArr "Ä­Ä®Ä¯Ä°Ä±Ä²" "È¬È¬È¬ÇÇÇ"
private yygo464 = decodeArr "Ä­Ä®Ä¯Ä°Ä±Ä²" "È­È­È­ÇÇÇ"
private yygo467 = decodeArr "Ä°Ä±Ä²" "È°È°È°"
private yygo468 = decodeArr "Ä°Ä±Ä²" "È±È±È±"
private yygo469 = decodeArr "\u0005\u0006\u0007\b\t" "È²È²È²È²È²"
private yygo476 = decodeArr "ÄÄÄÄ¤Ä¥Ä¦Ä§Ä¨Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²" "ÈµÈµÈµÈ¶È¶ÇÇÇÇÇÇÇÇÇÇÇÇÇ"
private yygo477 = decodeArr "Â¸Â¹ÂºÄÄÄÄ" "Ã«Ã«Ã«ÅÈ·È·È·"
private yygo479 = decodeArr "Ã¼Ã½" "È¸È¸"
private yygo480 = decodeArr "Â¸Â¹ÂºÄÄÄÄ" "Ã¯Ã¯Ã¯Å¤È¹È¹È¹"
private yygo482 = decodeArr "Æ³Æ´" "ÅÅ"
private yygo484 = decodeArr "Â¸Â¹ÂºÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄ" "ÃÃÃÈºÈºÈºÈºÈºÈºÃÃÃÃÃÃÃ"
private yygo486 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÈ»È»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo490 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÈ½È½ÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo491 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÅ¶Å¶È¾È¾ÅµÅµÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo495 = decodeArr "\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "È¿È¿È¿\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo496 = decodeArr "\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "ÉÉÉ\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo497 = decodeArr "\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "ÉÉÉ\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo499 = decodeArr "u\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ç³Ç´Ç´Ç´Ç·Ç·Ç·Ç·ÉÉÉ\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo502 = decodeArr "\u0019\u001a" "ÉÉ"
private yygo504 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ«ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666Å½Å½ÉÉÉ7Å¼Å¼55558888899::<<;;;;;;;;;;;;;;======================"
private yygo507 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÉÉ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo513 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667ÉÉ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo514 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅ¯Å°Å±Å²Å³Å´ÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "222333446666666666ÆÆÆÆÉÉÉ7ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo524 = decodeArr "ÄÄÄÄÄ" "ÉÉÈÈÈ"
private yygo535 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Æ¯Æ¯55558888899::<<;;;;;;;;;;;;;;======================"
private yygo536 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅµÅ¸Å¹Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "2223334466666666667Æ²Æ²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo538 = decodeArr "Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÃ" "ÉÉÉÉÉÉÉÉÉÈ¡"
private yygo539 = decodeArr "Â»Â¼ÃÃ" "\u009e\u009eMM"
private yygo542 = decodeArr "\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "ÉÉÉÆ¾Æ¾Æ¾Æ¾Æ¾Æ¾Æ½Æ½Æ½Æ¿Æ¿Æ¿ÇÇÇÇÇÇ"
private yygo551 = decodeArr "\u000e\u000f\u0010Â«Ä¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿ÅÅÅÅÅÅ" "ÉÉÉÉÉÉÉÉÉÉÉÉ É É¡É¡É¡É¢É¢É¢É£"
private yygo563 = decodeArr "Ä¤Ä¥Ä¦Ä§Ä¨Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²" "É¤É¤ÇÇÇÇÇÇÇÇÇÇÇÇÇ"
private yygo565 = decodeArr "\u0005\u0006\u0007\b\t" "É¥É¥É¥É¥É¥"
private yygo568 = decodeArr "ÅÅÅ" "É¦É¦É¦"
private yygo580 = decodeArr "u|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅµÅ¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²" "Ç³É§É§É§Ç´Ç´Ç´Ç·Ç·Ç·Ç·Ç¶Ç¶Ç¶\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo587 = decodeArr "ÄÄÄÄÄ" "É©É©ÈÈÈ"
private yygo588 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÉªÉªÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo590 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃÄ¿ÈÈÈÉ«É«ÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo592 = decodeArr "Â¢Â£Â¤Â¨Â©ÂªÃ" "É¬É¬É¬ÉÉÉÈ¡"
private yygo595 = decodeArr "Â¨Â©ÂªÃ" "É®É®É®È¡"
private yygo599 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê°Ê°Ê°Ê°Ê°Ê°"
private yygo600 = decodeArr "Â«ÅÅÅÅ" "ÉÊ²Ê²Ê²É£"
private yygo601 = decodeArr "Â«ÅÅÅÅ" "ÉÊ³Ê³Ê³É£"
private yygo602 = decodeArr "Â«Å" "ÉÊ´"
private yygo603 = decodeArr "Â«Å" "ÉÊµ"
private yygo604 = decodeArr "Â«Ä½Ä¾Ä¿ÅÅÅÅÅÅ" "ÉÊ¶Ê¶É¡É¡É¡É¢É¢É¢É£"
private yygo623 = decodeArr "Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÃ" "ÉÉÉÊ¼Ê¼Ê¼ÉÉÉÈ¡"
private yygo675 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê¾Ê¾Ê¾Ê¾Ê¾Ê¾"
private yygo689 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±ËËËËËË"
private yygo696 = decodeArr "\u000e\u000f\u0010Â«Ä¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿ÅÅÅÅÅÅ" "ÉÉÉÉËËËËËÉÉÉ É É¡É¡É¡É¢É¢É¢É£"
private yygo697 = decodeArr "\u000e\u000f\u0010Â«Ä¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿ÅÅÅÅÅÅ" "ÉÉÉÉËËËËËÉÉÉ É É¡É¡É¡É¢É¢É¢É£"
private yygo698 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃËËÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo699 = decodeArr "Â«Ä½Ä¾Ä¿ÅÅÅÅÅÅ" "ÉËËÉ¡É¡É¡É¢É¢É¢É£"
private yygo701 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±ËËËËËË"
private yygo705 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ´Äµ" "ÃÃÃËËÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo711 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±Ê±ËËËËËË"
private yygos = let 
    sub1 = [      (0, yygo0),
      (1, yygo1),
      (2, yygo2),
      (4, yygo4),
      (6, yygo6),
      (8, yygo8),
      (10, yygo10),
      (13, yygo13),
      (23, yygo23),
      (26, yygo26),
      (29, yygo29),
      (30, yygo30),
      (41, yygo41),
      (42, yygo42),
      (43, yygo43),
      (46, yygo46),
      (52, yygo52),
      (57, yygo57),
      (64, yygo64),
      (66, yygo66),
      (67, yygo67),
      (72, yygo72),
      (76, yygo76),
      (79, yygo79),
      (81, yygo81),
      (82, yygo82),
      (85, yygo85),
      (87, yygo87),
      (89, yygo89),
      (90, yygo90),
      (92, yygo92),
      (96, yygo96),
      (97, yygo97),
      (98, yygo98),
      (100, yygo100),
      (101, yygo101),
      (102, yygo102),
      (104, yygo104),
      (105, yygo105),
      (106, yygo106),
      (109, yygo109),
      (113, yygo113),
      (115, yygo115),
      (116, yygo116),
      (117, yygo117),
      (119, yygo119),
      (120, yygo120),
      (121, yygo121),
      (122, yygo122),
      (123, yygo123),
      (124, yygo124),
      (126, yygo126),
      (127, yygo127),
      (142, yygo142),
      (144, yygo144),
      (148, yygo148),
      (149, yygo149),
      (150, yygo150),
      (152, yygo152),
      (155, yygo155),
      (161, yygo161),
      (164, yygo164),
      (165, yygo165),
      (169, yygo169)];
    sub2 = [      (174, yygo174),
      (176, yygo176),
      (181, yygo181),
      (182, yygo182),
      (184, yygo184),
      (185, yygo185),
      (186, yygo186),
      (188, yygo188),
      (199, yygo199),
      (200, yygo200),
      (201, yygo201),
      (209, yygo209),
      (215, yygo215),
      (216, yygo216),
      (223, yygo223),
      (227, yygo227),
      (229, yygo229),
      (233, yygo233),
      (234, yygo234),
      (235, yygo235),
      (237, yygo237),
      (238, yygo238),
      (239, yygo239),
      (242, yygo242),
      (244, yygo244),
      (246, yygo246),
      (251, yygo251),
      (252, yygo252),
      (253, yygo253),
      (254, yygo254),
      (261, yygo261),
      (263, yygo263),
      (264, yygo264),
      (267, yygo267),
      (269, yygo269),
      (275, yygo275),
      (276, yygo276),
      (278, yygo278),
      (279, yygo279),
      (286, yygo286),
      (287, yygo287),
      (288, yygo288),
      (290, yygo290),
      (291, yygo291),
      (292, yygo292),
      (293, yygo293),
      (308, yygo308),
      (310, yygo310),
      (313, yygo313),
      (314, yygo314),
      (324, yygo324),
      (325, yygo325),
      (330, yygo330),
      (332, yygo332),
      (334, yygo334),
      (337, yygo337),
      (338, yygo338),
      (339, yygo339),
      (342, yygo342),
      (343, yygo343),
      (348, yygo348),
      (349, yygo349),
      (359, yygo359),
      (361, yygo361)];
    sub3 = [      (367, yygo367),
      (371, yygo371),
      (376, yygo376),
      (377, yygo377),
      (378, yygo378),
      (379, yygo379),
      (382, yygo382),
      (385, yygo385),
      (388, yygo388),
      (391, yygo391),
      (393, yygo393),
      (394, yygo394),
      (397, yygo397),
      (402, yygo402),
      (405, yygo405),
      (412, yygo412),
      (414, yygo414),
      (417, yygo417),
      (418, yygo418),
      (419, yygo419),
      (425, yygo425),
      (427, yygo427),
      (437, yygo437),
      (441, yygo441),
      (442, yygo442),
      (446, yygo446),
      (451, yygo451),
      (453, yygo453),
      (454, yygo454),
      (459, yygo459),
      (460, yygo460),
      (462, yygo462),
      (463, yygo463),
      (464, yygo464),
      (467, yygo467),
      (468, yygo468),
      (469, yygo469),
      (476, yygo476),
      (477, yygo477),
      (479, yygo479),
      (480, yygo480),
      (482, yygo482),
      (484, yygo484),
      (486, yygo486),
      (490, yygo490),
      (491, yygo491),
      (495, yygo495),
      (496, yygo496),
      (497, yygo497),
      (499, yygo499),
      (502, yygo502),
      (504, yygo504),
      (507, yygo507),
      (513, yygo513),
      (514, yygo514),
      (524, yygo524),
      (535, yygo535),
      (536, yygo536),
      (538, yygo538),
      (539, yygo539),
      (542, yygo542),
      (551, yygo551),
      (563, yygo563),
      (565, yygo565)];
    sub4 = [      (568, yygo568),
      (580, yygo580),
      (587, yygo587),
      (588, yygo588),
      (590, yygo590),
      (592, yygo592),
      (595, yygo595),
      (599, yygo599),
      (600, yygo600),
      (601, yygo601),
      (602, yygo602),
      (603, yygo603),
      (604, yygo604),
      (623, yygo623),
      (675, yygo675),
      (689, yygo689),
      (696, yygo696),
      (697, yygo697),
      (698, yygo698),
      (699, yygo699),
      (701, yygo701),
      (705, yygo705),
      (711, yygo711)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` genericArrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4);
{-

    this file will be appended to every parser YYgen.fr builds

 -}
 
 
--- the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYAction act
            | act == yyAccept -> YYM.return (yyaccept (yyvals, yytoks))  -- will this ever happen?
            | act == yyErr    -> do
                            let fun = elemAt yyrecs st
                            toks <- fun yytoks
                            yyloop yyvals toks
            -- shift?
            | act >= 0, yydebug, traceLn (show st ++ ": shift to " ++ show act ++ " on " ++ yyshow yyt) = undefined
            | act >= 0 = yyloop ((act; YYTok yyt)!:yyvals) yyts
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals yytoks
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAction act
            | act == yyAccept -> YYM.return (yyaccept (yyvals, []))
            | act == yyErr = do
                yyerror yyEOF ("syntax error on end of file")
                YYM.return (yyvals, [])
            -- shift?
            | act >= 0 -> error ("Can't shift on end of file in state " ++ show act)
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals []
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case itemAt yyacts n of {
    Just fun -> fun tok;
    Nothing  -> YYAction yyErr;
};

yyeaction n = case elemAt yyeacts n of  {
    0 -> YYAction yyErr;
    this -> YYAction this; 
};

--- nowarn: application of 'yybadprod' will diverge
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



--- drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYAction err
            | yyErr == err, yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | yyErr == err = yydrop i ts
            | otherwise  =  YYM.return (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.return [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.return (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.return [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts

yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []

yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts

yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []

yyreduce red yyvs = case itemAt yyprods red of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.itemAt popst of
                Just arr -> case elemAt arr red of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.return ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.return (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror (yyline yyt) ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.return (Just x)
        _ -> YYM.return Nothing;
;
--begin tail
{--
    the parser pass
 -}
pass :: [Token] -> StG (Maybe ParseResult) -- Global -> IO (Maybe ParseResult, Global)
pass = yyparse . substQQ
--end tail
